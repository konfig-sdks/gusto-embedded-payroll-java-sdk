/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Contractor;
import com.konfigthis.client.model.ContractorAddress;
import com.konfigthis.client.model.ContractorOnboardingStatus;
import com.konfigthis.client.model.ContractorsChangeOnboardingStatusRequest;
import com.konfigthis.client.model.ContractorsCreateNewContractorRequest;
import com.konfigthis.client.model.ContractorsUpdateAddressRequest;
import com.konfigthis.client.model.ContractorsUpdateContractorRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContractorsApi
 */
@Disabled
public class ContractorsApiTest {

    private static ContractorsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ContractorsApi(apiClient);
    }

    /**
     * Change the contractor&#39;s onboarding status
     *
     * Updates a contractor&#39;s onboarding status.  scope: &#x60;contractors:write&#x60;  Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark a contractor as self-onboarding | &#x60;admin_onboarding_incomplete&#x60; | &#x60;self_onboarding_not_invited&#x60; | | Invite an employee to self-onboard | &#x60;admin_onboarding_incomplete&#x60; or &#x60;self_onboarding_not_invited&#x60; | &#x60;self_onboarding_invited&#x60; | | Cancel an employee&#39;s self-onboarding | &#x60;self_onboarding_invited&#x60; or &#x60;self_onboarding_not_invited&#x60; | &#x60;admin_onboarding_incomplete&#x60; | | Review an employee&#39;s self-onboarded info | &#x60;self_onboarding_started&#x60; | &#x60;self_onboarding_review&#x60; | | Finish an employee&#39;s onboarding | &#x60;admin_onboarding_incomplete&#x60; or &#x60;self_onboarding_review&#x60; | &#x60;onboarding_completed&#x60; |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeOnboardingStatusTest() throws ApiException {
        String onboardingStatus = null;
        String contractorUuid = null;
        String xGustoAPIVersion = null;
        ContractorOnboardingStatus response = api.changeOnboardingStatus(onboardingStatus, contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a contractor
     *
     * Create an individual or business contractor.  scope: &#x60;contractors:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewContractorTest() throws ApiException {
        String companyId = null;
        String type = null;
        String wageType = null;
        String startDate = null;
        String hourlyRate = null;
        Boolean selfOnboarding = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        String middleInitial = null;
        Boolean fileNewHireReport = null;
        String workState = null;
        String ssn = null;
        String businessName = null;
        String ein = null;
        Boolean isActive = null;
        String xGustoAPIVersion = null;
        Contractor response = api.createNewContractor(companyId)
                .type(type)
                .wageType(wageType)
                .startDate(startDate)
                .hourlyRate(hourlyRate)
                .selfOnboarding(selfOnboarding)
                .email(email)
                .firstName(firstName)
                .lastName(lastName)
                .middleInitial(middleInitial)
                .fileNewHireReport(fileNewHireReport)
                .workState(workState)
                .ssn(ssn)
                .businessName(businessName)
                .ein(ein)
                .isActive(isActive)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a contractor
     *
     * A contractor can only be deleted when there are no contractor payments.  scope: &#x60;contractors:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContractorTest() throws ApiException {
        String contractorId = null;
        String xGustoAPIVersion = null;
        api.deleteContractor(contractorId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a contractor address
     *
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: &#x60;contractors:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAddressTest() throws ApiException {
        String contractorUuid = null;
        String xGustoAPIVersion = null;
        ContractorAddress response = api.getAddress(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a contractor
     *
     * Get a contractor.  scope: &#x60;contractors:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String contractorId = null;
        String xGustoAPIVersion = null;
        Contractor response = api.getById(contractorId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get contractors of a company
     *
     * Get all contractors, active and inactive, individual and business, for a company.  scope: &#x60;contractors:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyContractorsTest() throws ApiException {
        String companyId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        List<Contractor> response = api.getCompanyContractors(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the contractor&#39;s onboarding status
     *
     * Retrieves a contractor&#39;s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: &#x60;contractors:read&#x60;  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | &#x60;admin_onboarding_incomplete&#x60; | Admin needs to enter basic information about the contractor. | | &#x60;admin_onboarding_review&#x60; | All information has been completed and admin needs to confirm onboarding. | | &#x60;onboarding_completed&#x60; | Contractor has been fully onboarded and verified. |  ### Contractor self-onboarding  | onboarding_status | Description | | --- | ----------- | | &#x60;admin_onboarding_incomplete&#x60; | Admin needs to enter basic information about the contractor. | | &#x60;self_onboarding_not_invited&#x60; | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | &#x60;self_onboarding_invited&#x60; | Contractor has been sent an invitation to self-onboard. | | &#x60;self_onboarding_started&#x60; | Contractor has started the self-onboarding process. | | &#x60;self_onboarding_review&#x60; | Admin needs to review contractors&#39;s entered information and confirm onboarding. | | &#x60;onboarding_completed&#x60; | Contractor has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | &#x60;basic_details&#x60; | Add individual contractor&#39;s first name, last name, social security number or Business name and EIN depending on the contractor type | | &#x60;add_address&#x60; | Add contractor address. | | &#x60;compensation_details&#x60; | Add contractor compensation. | | &#x60;payment_details&#x60; | Set up contractor&#39;s direct deposit or set to check. | | &#x60;sign_documents&#x60; | Contractor forms (e.g., W9) are generated &amp; signed. | | &#x60;file_new_hire_report&#x60; | Contractor new hire report is generated. |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOnboardingStatusTest() throws ApiException {
        String contractorUuid = null;
        String xGustoAPIVersion = null;
        ContractorOnboardingStatus response = api.getOnboardingStatus(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a contractor&#39;s address
     *
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: &#x60;contractors:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAddressTest() throws ApiException {
        String contractorUuid = null;
        String version = null;
        String street1 = null;
        String street2 = null;
        String city = null;
        String state = null;
        String zip = null;
        String xGustoAPIVersion = null;
        ContractorAddress response = api.updateAddress(contractorUuid)
                .version(version)
                .street1(street1)
                .street2(street2)
                .city(city)
                .state(state)
                .zip(zip)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a contractor
     *
     * Update a contractor.  scope: &#x60;contractors:write&#x60;  &gt; 🚧 Warning &gt; &gt; Watch out when changing a contractor&#39;s type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContractorTest() throws ApiException {
        String contractorId = null;
        String version = null;
        String type = null;
        String wageType = null;
        String startDate = null;
        String hourlyRate = null;
        Boolean selfOnboarding = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        String middleInitial = null;
        Boolean fileNewHireReport = null;
        String workState = null;
        String ssn = null;
        String businessName = null;
        String ein = null;
        Boolean isActive = null;
        String xGustoAPIVersion = null;
        Contractor response = api.updateContractor(contractorId)
                .version(version)
                .type(type)
                .wageType(wageType)
                .startDate(startDate)
                .hourlyRate(hourlyRate)
                .selfOnboarding(selfOnboarding)
                .email(email)
                .firstName(firstName)
                .lastName(lastName)
                .middleInitial(middleInitial)
                .fileNewHireReport(fileNewHireReport)
                .workState(workState)
                .ssn(ssn)
                .businessName(businessName)
                .ein(ein)
                .isActive(isActive)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
