/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ExternalPayroll;
import com.konfigthis.client.model.ExternalPayrollBasic;
import com.konfigthis.client.model.ExternalPayrollTaxSuggestions;
import com.konfigthis.client.model.ExternalPayrollsCreateNewPayrollRequest;
import com.konfigthis.client.model.ExternalPayrollsUpdatePayrollItemsRequest;
import com.konfigthis.client.model.ExternalPayrollsUpdatePayrollItemsRequestExternalPayrollItemsInner;
import com.konfigthis.client.model.ExternalPayrollsUpdateTaxLiabilitiesRequest;
import com.konfigthis.client.model.ExternalPayrollsUpdateTaxLiabilitiesRequestLiabilitySelectionsInner;
import com.konfigthis.client.model.TaxLiabilitiesSelections;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExternalPayrollsApi
 */
@Disabled
public class ExternalPayrollsApiTest {

    private static ExternalPayrollsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExternalPayrollsApi(apiClient);
    }

    /**
     * Create a new external payroll for a company
     *
     * Creates a new external payroll for the company.  scope: &#x60;external_payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPayrollTest() throws ApiException {
        String checkDate = null;
        String paymentPeriodStartDate = null;
        String paymentPeriodEndDate = null;
        String companyUuid = null;
        String xGustoAPIVersion = null;
        ExternalPayroll response = api.createNewPayroll(checkDate, paymentPeriodStartDate, paymentPeriodEndDate, companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an external payroll
     *
     * Delete an external payroll.  scope: &#x60;external_payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayrollTest() throws ApiException {
        String companyUuid = null;
        String externalPayrollId = null;
        String xGustoAPIVersion = null;
        api.deletePayroll(companyUuid, externalPayrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Finalize tax liabilities options and convert into processed payrolls
     *
     * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.  scope: &#x60;external_payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finalizeTaxLiabilitiesTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        api.finalizeTaxLiabilities(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an external payroll
     *
     * Get an external payroll for a given company.  scope: &#x60;external_payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String companyUuid = null;
        String externalPayrollId = null;
        String xGustoAPIVersion = null;
        ExternalPayroll response = api.getById(companyUuid, externalPayrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tax liabilities
     *
     * Get tax liabilities from aggregate external payrolls for a company.  scope: &#x60;external_payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxLiabilitiesTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        List<TaxLiabilitiesSelections> response = api.getTaxLiabilities(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tax suggestions for an external payroll
     *
     * Get tax suggestions for an external payroll. Earnings and/or benefits data must be saved prior to the calculation in order to retrieve accurate tax calculation.  scope: &#x60;external_payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxSuggestionsTest() throws ApiException {
        String companyUuid = null;
        String externalPayrollId = null;
        String xGustoAPIVersion = null;
        List<ExternalPayrollTaxSuggestions> response = api.getTaxSuggestions(companyUuid, externalPayrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get external payrolls for a company
     *
     * Get an external payroll for a given company.  scope: &#x60;external_payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listForCompanyTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        List<ExternalPayrollBasic> response = api.listForCompany(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an external payroll
     *
     * Update an external payroll with a list of external payroll items  scope: &#x60;external_payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayrollItemsTest() throws ApiException {
        String companyUuid = null;
        String externalPayrollId = null;
        Boolean replaceFields = null;
        List<ExternalPayrollsUpdatePayrollItemsRequestExternalPayrollItemsInner> externalPayrollItems = null;
        String xGustoAPIVersion = null;
        ExternalPayroll response = api.updatePayrollItems(companyUuid, externalPayrollId)
                .replaceFields(replaceFields)
                .externalPayrollItems(externalPayrollItems)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update tax liabilities
     *
     * Update tax liabilities for a company.  scope: &#x60;external_payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaxLiabilitiesTest() throws ApiException {
        String companyUuid = null;
        List<ExternalPayrollsUpdateTaxLiabilitiesRequestLiabilitySelectionsInner> liabilitySelections = null;
        String xGustoAPIVersion = null;
        List<TaxLiabilitiesSelections> response = api.updateTaxLiabilities(companyUuid)
                .liabilitySelections(liabilitySelections)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
