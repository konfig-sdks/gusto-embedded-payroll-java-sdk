/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BankAccountsCreateFromPlaidTokenRequest;
import com.konfigthis.client.model.BankAccountsCreateVerificationDepositsRequest;
import com.konfigthis.client.model.BankAccountsVerifyMicroDepositsRequest;
import com.konfigthis.client.model.CompanyBankAccount;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BankAccountsApi
 */
@Disabled
public class BankAccountsApiTest {

    private static BankAccountsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BankAccountsApi(apiClient);
    }

    /**
     * Create a bank account from a plaid processor token
     *
     * This endpoint creates a new **verified** bank account by using a plaid processor token to retrieve its information.  scope: &#x60;plaid_processor:write&#x60;  &gt; ðŸ“˜ &gt; To create a token please use the [plaid api](https://plaid.com/docs/api/processors/#processortokencreate) and select \&quot;gusto\&quot; as processor.  &gt; ðŸš§ Warning - Company Bank Accounts &gt; &gt; If a default company bank account exists, it will be disabled and the new bank account will replace it as the company&#39;s default funding method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFromPlaidTokenTest() throws ApiException {
        String ownerType = null;
        String ownerId = null;
        String processorToken = null;
        String xGustoAPIVersion = null;
        Object response = api.createFromPlaidToken(ownerType, ownerId, processorToken)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a company bank account
     *
     * This endpoint creates a new company bank account.  Upon being created, two verification deposits are automatically sent to the bank account, and the bank account&#39;s verification_status is &#39;awaiting_deposits&#39;.   When the deposits are successfully transferred, the verification_status changes to &#39;ready_for_verification&#39;, at which point the verify endpoint can be used to verify the bank account. After successful verification, the bank account&#39;s verification_status is &#39;verified&#39;.  scope: &#x60;company_bank_accounts:write&#x60;  &gt; ðŸš§ Warning &gt; &gt; If a default bank account exists, it will be disabled and the new bank account will replace it as the company&#39;s default funding method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVerificationDepositsTest() throws ApiException {
        String companyId = null;
        String routingNumber = null;
        String accountNumber = null;
        String accountType = null;
        String xGustoAPIVersion = null;
        CompanyBankAccount response = api.createVerificationDeposits(companyId)
                .routingNumber(routingNumber)
                .accountNumber(accountNumber)
                .accountType(accountType)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all company bank accounts
     *
     * Returns company bank accounts. Currently, we only support a single default bank account per company.  scope: &#x60;company_bank_accounts:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCompanyBankAccountsTest() throws ApiException {
        String companyId = null;
        String xGustoAPIVersion = null;
        List<CompanyBankAccount> response = api.listCompanyBankAccounts(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify a company bank account
     *
     * Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There&#39;s a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.  ### Bank account verification in demo  We provide the endpoint &#x60;POST &#39;/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits&#39;&#x60; to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.  &#x60;&#x60;&#x60;   POST &#39;/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits&#39;    {     \&quot;deposit_1\&quot;: 0.02,     \&quot;deposit_2\&quot;: 0.42   } &#x60;&#x60;&#x60;  scope: &#x60;company_bank_accounts:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyMicroDepositsTest() throws ApiException {
        String bankAccountUuid = null;
        String companyId = null;
        Double deposit1 = null;
        Double deposit2 = null;
        String xGustoAPIVersion = null;
        CompanyBankAccount response = api.verifyMicroDeposits(bankAccountUuid, companyId)
                .deposit1(deposit1)
                .deposit2(deposit2)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
