/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeeFederalTax;
import com.konfigthis.client.model.EmployeeStateTax;
import com.konfigthis.client.model.EmployeeTaxSetupUpdateFederalTaxesRequest;
import com.konfigthis.client.model.EmployeeTaxSetupUpdateStateTaxesRequest;
import com.konfigthis.client.model.EmployeeTaxSetupUpdateStateTaxesRequestStatesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeTaxSetupApi
 */
@Disabled
public class EmployeeTaxSetupApiTest {

    private static EmployeeTaxSetupApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeeTaxSetupApi(apiClient);
    }

    /**
     * Get an employee&#39;s federal taxes
     *
     * Get attributes relevant for an employee&#39;s federal taxes.   scope: &#x60;employee_federal_taxes:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFederalTaxesByIdTest() throws ApiException {
        String employeeUuid = null;
        String xGustoAPIVersion = null;
        EmployeeFederalTax response = api.getFederalTaxesById(employeeUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee&#39;s state taxes
     *
     * Get attributes relevant for an employee&#39;s state taxes.  The data required to correctly calculate an employee&#39;s state taxes varies by both home and work location. This API returns information about each question that must be answered grouped by state. Mostly commonly, an employee lives and works in the same state and will only have questions for a single state. The response contains metadata about each question, the type of answer expected, and the current answer stored in Gusto for that question.  Answers are represented by an array. Today, this array can only be empty or contain exactly one element, but is designed to allow for forward compatibility with effective-dated fields. Until effective dated answers are supported, the &#x60;valid_from&#x60; and &#x60;valid_up_to&#x60; must always be &#x60;\&quot;2010-01-01\&quot;&#x60; and &#x60;null&#x60; respectively.  ## About filing new hire reports Payroll Admins are responsible for filing a new hire report for each Employee. The &#x60;file_new_hire_report&#x60; question will only be listed if: - the &#x60;employee.onboarding_status&#x60; is one of the following:   - &#x60;admin_onboarding_incomplete&#x60;   - &#x60;self_onboarding_awaiting_admin_review&#x60; - that employee&#39;s work state requires filing a new hire report  scope: &#x60;employee_state_taxes:read&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStateTaxesTest() throws ApiException {
        String employeeUuid = null;
        String xGustoAPIVersion = null;
        List<EmployeeStateTax> response = api.getStateTaxes(employeeUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee&#39;s federal taxes
     *
     * Update attributes relevant for an employee&#39;s federal taxes.  scope: &#x60;employee_federal_taxes:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFederalTaxesTest() throws ApiException {
        String version = null;
        String employeeUuid = null;
        String filingStatus = null;
        String extraWithholding = null;
        Boolean twoJobs = null;
        String dependentsAmount = null;
        String otherIncome = null;
        String deductions = null;
        String w4DataType = null;
        String xGustoAPIVersion = null;
        EmployeeFederalTax response = api.updateFederalTaxes(version, employeeUuid)
                .filingStatus(filingStatus)
                .extraWithholding(extraWithholding)
                .twoJobs(twoJobs)
                .dependentsAmount(dependentsAmount)
                .otherIncome(otherIncome)
                .deductions(deductions)
                .w4DataType(w4DataType)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee&#39;s state taxes
     *
     * Update attributes relevant for an employee&#39;s state taxes.  As described for the GET endpoint, the answers must be supplied in the effective-dated format, but currently only a single answer will be accepted - &#x60;valid_from&#x60; and &#x60;valid_up_to&#x60; must be &#x60;\&quot;2010-01-01\&quot;&#x60; and &#x60;null&#x60; respectively.  scope: &#x60;employee_state_taxes:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStateTaxesTest() throws ApiException {
        Set<EmployeeTaxSetupUpdateStateTaxesRequestStatesInner> states = null;
        String employeeUuid = null;
        String xGustoAPIVersion = null;
        List<EmployeeStateTax> response = api.updateStateTaxes(states, employeeUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
