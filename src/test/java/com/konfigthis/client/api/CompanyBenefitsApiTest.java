/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BenefitSummary;
import com.konfigthis.client.model.BenefitTypeRequirements;
import com.konfigthis.client.model.CompanyBenefit;
import com.konfigthis.client.model.CompanyBenefitWithEmployeeBenefits;
import com.konfigthis.client.model.CompanyBenefitsCreateBenefitRequest;
import com.konfigthis.client.model.CompanyBenefitsUpdateBenefitRequest;
import com.konfigthis.client.model.SupportedBenefit;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompanyBenefitsApi
 */
@Disabled
public class CompanyBenefitsApiTest {

    private static CompanyBenefitsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompanyBenefitsApi(apiClient);
    }

    /**
     * Create a company benefit
     *
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: &#x60;company_benefits:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBenefitTest() throws ApiException {
        String description = null;
        String companyId = null;
        Double benefitType = null;
        Boolean active = null;
        Boolean responsibleForEmployerTaxes = null;
        Boolean responsibleForEmployeeW2 = null;
        String xGustoAPIVersion = null;
        CompanyBenefit response = api.createBenefit(description, companyId)
                .benefitType(benefitType)
                .active(active)
                .responsibleForEmployerTaxes(responsibleForEmployerTaxes)
                .responsibleForEmployeeW2(responsibleForEmployeeW2)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a company benefit
     *
     * The following must be true in order to delete a company benefit   - There are no employee benefits associated with the company benefit   - There are no payroll items associated with the company benefit   - The benefit is not managed by a Partner or by Gusto (type must be &#39;External&#39;)  scope: &#x60;company_benefits:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBenefitTest() throws ApiException {
        String companyBenefitId = null;
        String xGustoAPIVersion = null;
        api.deleteBenefit(companyBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a company benefit
     *
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.  scope: &#x60;company_benefits:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBenefitByIdTest() throws ApiException {
        String companyBenefitId = null;
        Boolean withEmployeeBenefits = null;
        String xGustoAPIVersion = null;
        CompanyBenefitWithEmployeeBenefits response = api.getBenefitById(companyBenefitId)
                .withEmployeeBenefits(withEmployeeBenefits)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get benefit fields requirements by ID
     *
     * Returns field requirements for the requested benefit type.  scope: &#x60;benefits:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBenefitFieldsRequirementsByIdTest() throws ApiException {
        String benefitId = null;
        String xGustoAPIVersion = null;
        BenefitTypeRequirements response = api.getBenefitFieldsRequirementsById(benefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get company benefit summary by company benefit id.
     *
     * Returns summary benefit data for the requested company benefit id.  Benefits containing PHI are only visible to applications with the &#x60;company_benefits:read:phi&#x60; scope.  scope: &#x60;company_benefits:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBenefitSummaryByIdTest() throws ApiException {
        String companyBenefitId = null;
        String startDate = null;
        String endDate = null;
        Boolean detailed = null;
        String xGustoAPIVersion = null;
        BenefitSummary response = api.getBenefitSummaryById(companyBenefitId)
                .startDate(startDate)
                .endDate(endDate)
                .detailed(detailed)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get benefits for a company
     *
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  Benefits containing PHI are only visible to applications with the &#x60;company_benefits:read:phi&#x60; scope.  scope: &#x60;company_benefits:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBenefitsForCompanyTest() throws ApiException {
        String companyId = null;
        Boolean enrollmentCount = null;
        String xGustoAPIVersion = null;
        List<CompanyBenefit> response = api.getBenefitsForCompany(companyId)
                .enrollmentCount(enrollmentCount)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a supported benefit by ID
     *
     * Returns a benefit supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: &#x60;benefits:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSupportedBenefitByIdTest() throws ApiException {
        String benefitId = null;
        String xGustoAPIVersion = null;
        SupportedBenefit response = api.getSupportedBenefitById(benefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all benefits supported by Gusto
     *
     * Returns all benefits supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: &#x60;benefits:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSupportedBenefitsTest() throws ApiException {
        String xGustoAPIVersion = null;
        List<SupportedBenefit> response = api.listSupportedBenefits()
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a company benefit
     *
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: &#x60;company_benefits:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBenefitTest() throws ApiException {
        String version = null;
        String companyBenefitId = null;
        String description = null;
        Boolean active = null;
        String xGustoAPIVersion = null;
        CompanyBenefit response = api.updateBenefit(version, companyBenefitId)
                .description(description)
                .active(active)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
