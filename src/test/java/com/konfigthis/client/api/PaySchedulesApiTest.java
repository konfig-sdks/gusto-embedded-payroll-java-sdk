/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PayPeriod;
import com.konfigthis.client.model.PaySchedule;
import com.konfigthis.client.model.PayScheduleAssignment;
import com.konfigthis.client.model.PayScheduleAssignmentBody;
import com.konfigthis.client.model.PayScheduleAssignmentBodyDepartmentsInner;
import com.konfigthis.client.model.PayScheduleAssignmentBodyEmployeesInner;
import com.konfigthis.client.model.PayScheduleAssignmentPreview;
import com.konfigthis.client.model.PaySchedulesCreateNewRequest;
import com.konfigthis.client.model.PaySchedulesPreviewPayScheduleDatesResponse;
import com.konfigthis.client.model.PaySchedulesUpdatePayScheduleRequest;
import com.konfigthis.client.model.UnprocessedTerminationPayPeriod;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaySchedulesApi
 */
@Disabled
public class PaySchedulesApiTest {

    private static PaySchedulesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PaySchedulesApi(apiClient);
    }

    /**
     * Assign pay schedules for a company
     *
     * This endpoints assigns employees to specified pay schedules based on the pay schedule type.  scope: &#x60;pay_schedules:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignEmployeesToSchedulesTest() throws ApiException {
        String type = null;
        String companyId = null;
        String hourlyPayScheduleUuid = null;
        String salariedPayScheduleUuid = null;
        String defaultPayScheduleUuid = null;
        List<PayScheduleAssignmentBodyEmployeesInner> employees = null;
        List<PayScheduleAssignmentBodyDepartmentsInner> departments = null;
        String xGustoAPIVersion = null;
        api.assignEmployeesToSchedules(type, companyId)
                .hourlyPayScheduleUuid(hourlyPayScheduleUuid)
                .salariedPayScheduleUuid(salariedPayScheduleUuid)
                .defaultPayScheduleUuid(defaultPayScheduleUuid)
                .employees(employees)
                .departments(departments)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new pay schedule
     *
     * If a company does not have any pay schedules, this endpoint will create a single pay schedule and assign it to all employees. This is a common use case during company onboarding.  If a company has an existing active pay schedule and want to support multiple pay schedules, this endpoint will create a pay schedule that is not assigned to any employee.  Be sure to **[check state laws](https://www.dol.gov/agencies/whd/state/payday)** to know what schedule is right for your customers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        String frequency = null;
        String anchorPayDate = null;
        String anchorEndOfPayPeriod = null;
        String companyId = null;
        Integer day1 = null;
        Integer day2 = null;
        String customName = null;
        String xGustoAPIVersion = null;
        PaySchedule response = api.createNew(frequency, anchorPayDate, anchorEndOfPayPeriod, companyId)
                .day1(day1)
                .day2(day2)
                .customName(customName)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get pay schedule assignments for a company
     *
     * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: &#x60;pay_schedules:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssignmentsTest() throws ApiException {
        String companyId = null;
        String xGustoAPIVersion = null;
        PayScheduleAssignment response = api.getAssignments(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a pay schedule
     *
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: &#x60;pay_schedules:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String companyId = null;
        String payScheduleId = null;
        String xGustoAPIVersion = null;
        PaySchedule response = api.getDetails(companyId, payScheduleId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get pay periods for a company
     *
     * Pay periods are the foundation of payroll. Compensation, time &amp; attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version &#39;2023-04-01&#39;, the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayPeriodsTest() throws ApiException {
        String companyId = null;
        String startDate = null;
        String endDate = null;
        String payrollTypes = null;
        String xGustoAPIVersion = null;
        List<PayPeriod> response = api.getPayPeriods(companyId)
                .startDate(startDate)
                .endDate(endDate)
                .payrollTypes(payrollTypes)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get termination pay periods for a company
     *
     * When a payroll admin terminates an employee and selects \&quot;Dismissal Payroll\&quot; as the employee&#39;s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnprocessedTerminationPayPeriodsTest() throws ApiException {
        String companyId = null;
        String xGustoAPIVersion = null;
        List<UnprocessedTerminationPayPeriod> response = api.getUnprocessedTerminationPayPeriods(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the pay schedules for a company
     *
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: &#x60;pay_schedules:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listForCompanyTest() throws ApiException {
        String companyId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        List<PaySchedule> response = api.listForCompany(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Preview pay schedule assignments for a company
     *
     * This endpoints returns the employee changes, including pay period and transition pay periods, for changing the pay schedule.  scope: &#x60;pay_schedules:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void previewAssignmentsForCompanyTest() throws ApiException {
        String type = null;
        String companyId = null;
        String hourlyPayScheduleUuid = null;
        String salariedPayScheduleUuid = null;
        String defaultPayScheduleUuid = null;
        List<PayScheduleAssignmentBodyEmployeesInner> employees = null;
        List<PayScheduleAssignmentBodyDepartmentsInner> departments = null;
        String xGustoAPIVersion = null;
        PayScheduleAssignmentPreview response = api.previewAssignmentsForCompany(type, companyId)
                .hourlyPayScheduleUuid(hourlyPayScheduleUuid)
                .salariedPayScheduleUuid(salariedPayScheduleUuid)
                .defaultPayScheduleUuid(defaultPayScheduleUuid)
                .employees(employees)
                .departments(departments)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Preview pay schedule dates
     *
     * Provides a preview of a pay schedule with the specified parameters  scope: &#x60;pay_schedules:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void previewPayScheduleDatesTest() throws ApiException {
        String companyId = null;
        String frequency = null;
        String anchorPayDate = null;
        String anchorEndOfPayPeriod = null;
        Integer day1 = null;
        Integer day2 = null;
        String xGustoAPIVersion = null;
        PaySchedulesPreviewPayScheduleDatesResponse response = api.previewPayScheduleDates(companyId)
                .frequency(frequency)
                .anchorPayDate(anchorPayDate)
                .anchorEndOfPayPeriod(anchorEndOfPayPeriod)
                .day1(day1)
                .day2(day2)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a pay schedule
     *
     * Updates a pay schedule.  scope: &#x60;pay_schedules:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayScheduleTest() throws ApiException {
        String version = null;
        String companyId = null;
        String payScheduleId = null;
        String frequency = null;
        String anchorPayDate = null;
        String anchorEndOfPayPeriod = null;
        Integer day1 = null;
        Integer day2 = null;
        String customName = null;
        Boolean autoPilot = null;
        String xGustoAPIVersion = null;
        PaySchedule response = api.updatePaySchedule(version, companyId, payScheduleId)
                .frequency(frequency)
                .anchorPayDate(anchorPayDate)
                .anchorEndOfPayPeriod(anchorEndOfPayPeriod)
                .day1(day1)
                .day2(day2)
                .customName(customName)
                .autoPilot(autoPilot)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
