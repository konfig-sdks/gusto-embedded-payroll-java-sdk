/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.LocationsCreateCompanyLocationRequest;
import com.konfigthis.client.model.LocationsCreateCompanyLocationRequest1;
import com.konfigthis.client.model.LocationsUpdateLocationRequest;
import com.konfigthis.client.model.MinimumWage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
@Disabled
public class LocationsApiTest {

    private static LocationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LocationsApi(apiClient);
    }

    /**
     * Create a company location
     *
     * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: &#x60;companies.write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompanyLocationTest() throws ApiException {
        String phoneNumber = null;
        String street1 = null;
        String city = null;
        String state = null;
        String zip = null;
        String companyId = null;
        String street2 = null;
        String country = null;
        Boolean mailingAddress = null;
        Boolean filingAddress = null;
        String xGustoAPIVersion = null;
        Location response = api.createCompanyLocation(phoneNumber, street1, city, state, zip, companyId)
                .street2(street2)
                .country(country)
                .mailingAddress(mailingAddress)
                .filingAddress(filingAddress)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a location
     *
     * Get a location.  scope: &#x60;companies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String locationId = null;
        String xGustoAPIVersion = null;
        Location response = api.getById(locationId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get company locations
     *
     * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: &#x60;companies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyLocationsTest() throws ApiException {
        String companyId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        List<Location> response = api.getCompanyLocations(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get minimum wages for a location
     *
     * Get minimum wages for a location  scope: &#x60;companies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMinimumWagesTest() throws ApiException {
        String locationUuid = null;
        String effectiveDate = null;
        String xGustoAPIVersion = null;
        List<MinimumWage> response = api.getMinimumWages(locationUuid)
                .effectiveDate(effectiveDate)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a location
     *
     * Update a location.  scope: &#x60;companies.write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLocationTest() throws ApiException {
        String locationId = null;
        String version = null;
        String phoneNumber = null;
        String street1 = null;
        String street2 = null;
        String city = null;
        String state = null;
        String zip = null;
        String country = null;
        Boolean mailingAddress = null;
        Boolean filingAddress = null;
        String xGustoAPIVersion = null;
        Location response = api.updateLocation(locationId)
                .version(version)
                .phoneNumber(phoneNumber)
                .street1(street1)
                .street2(street2)
                .city(city)
                .state(state)
                .zip(zip)
                .country(country)
                .mailingAddress(mailingAddress)
                .filingAddress(filingAddress)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
