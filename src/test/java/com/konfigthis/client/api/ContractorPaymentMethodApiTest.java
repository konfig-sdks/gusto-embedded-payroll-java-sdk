/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ContractorBankAccount;
import com.konfigthis.client.model.ContractorPaymentMethod;
import com.konfigthis.client.model.ContractorPaymentMethodCreateBankAccountRequest;
import com.konfigthis.client.model.ContractorPaymentMethodUpdateBankAccountRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContractorPaymentMethodApi
 */
@Disabled
public class ContractorPaymentMethodApiTest {

    private static ContractorPaymentMethodApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ContractorPaymentMethodApi(apiClient);
    }

    /**
     * Create an contractor bank account
     *
     * Creates a contractor bank account.  Note: We currently only support one bank account per contractor. Using this endpoint on a contractor who has already has a bank account will just replace it.  scope: &#x60;contractor_payment_methods:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankAccountTest() throws ApiException {
        String name = null;
        String routingNumber = null;
        String accountNumber = null;
        String accountType = null;
        String contractorUuid = null;
        String xGustoAPIVersion = null;
        ContractorBankAccount response = api.createBankAccount(name, routingNumber, accountNumber, accountType, contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a contractor&#39;s payment method
     *
     * Fetches a contractor&#39;s payment method. A contractor payment method describes how the payment should be split across the contractor&#39;s associated bank accounts.  scope: &#x60;contractor_payment_methods:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractorPaymentMethodTest() throws ApiException {
        String contractorUuid = null;
        String xGustoAPIVersion = null;
        ContractorPaymentMethod response = api.getContractorPaymentMethod(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all contractor bank accounts
     *
     * Returns all contractor bank accounts.  scope: &#x60;contractor_payment_methods:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBankAccountsTest() throws ApiException {
        String contractorUuid = null;
        String xGustoAPIVersion = null;
        List<ContractorBankAccount> response = api.listBankAccounts(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a contractor&#39;s payment method
     *
     * Updates a contractor&#39;s payment method. Note that creating a contractor bank account will also update the contractor&#39;s payment method.  scope: &#x60;contractor_payment_methods:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBankAccountTest() throws ApiException {
        String contractorUuid = null;
        String version = null;
        String type = null;
        String xGustoAPIVersion = null;
        ContractorPaymentMethod response = api.updateBankAccount(contractorUuid)
                .version(version)
                .type(type)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
