/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EarningType;
import com.konfigthis.client.model.EarningTypesCreateCustomEarningTypeRequest;
import com.konfigthis.client.model.EarningTypesGetAllResponse;
import com.konfigthis.client.model.EarningTypesUpdateTypeRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EarningTypesApi
 */
@Disabled
public class EarningTypesApiTest {

    private static EarningTypesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EarningTypesApi(apiClient);
    }

    /**
     * Create a custom earning type
     *
     * Create a custom earning type.  If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.  scope: &#x60;payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomEarningTypeTest() throws ApiException {
        String name = null;
        String companyId = null;
        String xGustoAPIVersion = null;
        EarningType response = api.createCustomEarningType(name, companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate an earning type
     *
     * Deactivate an earning type.  scope: &#x60;payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateTypeTest() throws ApiException {
        String companyId = null;
        String earningTypeUuid = null;
        String xGustoAPIVersion = null;
        api.deactivateType(companyId, earningTypeUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all earning types for a company
     *
     * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.  #### Default Earning Type Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)  #### Custom Earning Type Custom earning types are all the other earning types added specifically for a company.  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String companyId = null;
        String xGustoAPIVersion = null;
        EarningTypesGetAllResponse response = api.getAll(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an earning type
     *
     * Update an earning type.  scope: &#x60;payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTypeTest() throws ApiException {
        String companyId = null;
        String earningTypeUuid = null;
        String name = null;
        String xGustoAPIVersion = null;
        EarningType response = api.updateType(companyId, earningTypeUuid)
                .name(name)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
