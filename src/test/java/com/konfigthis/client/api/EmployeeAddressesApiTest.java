/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeeAddress;
import com.konfigthis.client.model.EmployeeAddressesCreateHomeAddressRequest;
import com.konfigthis.client.model.EmployeeAddressesCreateWorkAddressRequest;
import com.konfigthis.client.model.EmployeeAddressesUpdateHomeAddressRequest;
import com.konfigthis.client.model.EmployeeAddressesUpdateWorkAddressRequest;
import com.konfigthis.client.model.EmployeeWorkAddress;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeAddressesApi
 */
@Disabled
public class EmployeeAddressesApiTest {

    private static EmployeeAddressesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeeAddressesApi(apiClient);
    }

    /**
     * Create an employee&#39;s home address
     *
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: &#x60;employees:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHomeAddressTest() throws ApiException {
        String employeeId = null;
        String street1 = null;
        String street2 = null;
        String city = null;
        String state = null;
        String zip = null;
        LocalDate effectiveDate = null;
        Boolean courtesyWithholding = null;
        String xGustoAPIVersion = null;
        EmployeeAddress response = api.createHomeAddress(employeeId)
                .street1(street1)
                .street2(street2)
                .city(city)
                .state(state)
                .zip(zip)
                .effectiveDate(effectiveDate)
                .courtesyWithholding(courtesyWithholding)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an employee work address
     *
     * The work address of an employee describes when an employee began working at an associated company location.  scope: &#x60;employees:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkAddressTest() throws ApiException {
        String employeeId = null;
        String locationUuid = null;
        LocalDate effectiveDate = null;
        String xGustoAPIVersion = null;
        EmployeeWorkAddress response = api.createWorkAddress(employeeId)
                .locationUuid(locationUuid)
                .effectiveDate(effectiveDate)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an employee&#39;s home address
     *
     * Used for deleting an employee&#39;s home address.  Cannot delete the employee&#39;s active home address.  scope: &#x60;employees:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHomeTest() throws ApiException {
        String homeAddressUuid = null;
        String xGustoAPIVersion = null;
        api.deleteHome(homeAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an employee&#39;s work address
     *
     * Used for deleting an employee&#39;s work address.  Cannot delete the employee&#39;s active work address.  scope: &#x60;employees:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkAddressTest() throws ApiException {
        String workAddressUuid = null;
        String xGustoAPIVersion = null;
        api.deleteWorkAddress(workAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee&#39;s home address
     *
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: &#x60;employees:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHomeAddressTest() throws ApiException {
        String homeAddressUuid = null;
        String xGustoAPIVersion = null;
        EmployeeAddress response = api.getHomeAddress(homeAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee&#39;s home addresses
     *
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: &#x60;employees:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHomeAddressesTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        List<EmployeeAddress> response = api.getHomeAddresses(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee work address
     *
     * The work address of an employee is used for payroll tax purposes.  scope: &#x60;employees:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkAddressTest() throws ApiException {
        String workAddressUuid = null;
        String xGustoAPIVersion = null;
        EmployeeWorkAddress response = api.getWorkAddress(workAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee&#39;s work addresses
     *
     * Returns a list of an employee&#39;s work addresses. Each address includes its effective date and a boolean signifying if it is the currently active work address.  scope: &#x60;employees:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkAddressesTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        List<EmployeeWorkAddress> response = api.listWorkAddresses(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee&#39;s home address
     *
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: &#x60;employees:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHomeAddressTest() throws ApiException {
        String version = null;
        String homeAddressUuid = null;
        String street1 = null;
        String street2 = null;
        String city = null;
        String state = null;
        String zip = null;
        LocalDate effectiveDate = null;
        Boolean courtesyWithholding = null;
        String xGustoAPIVersion = null;
        EmployeeAddress response = api.updateHomeAddress(version, homeAddressUuid)
                .street1(street1)
                .street2(street2)
                .city(city)
                .state(state)
                .zip(zip)
                .effectiveDate(effectiveDate)
                .courtesyWithholding(courtesyWithholding)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee work address
     *
     * The work address of an employee is used for payroll tax purposes.  scope: &#x60;employees:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkAddressTest() throws ApiException {
        String workAddressUuid = null;
        String version = null;
        String locationUuid = null;
        LocalDate effectiveDate = null;
        String xGustoAPIVersion = null;
        EmployeeWorkAddress response = api.updateWorkAddress(workAddressUuid)
                .version(version)
                .locationUuid(locationUuid)
                .effectiveDate(effectiveDate)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
