/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeePayStub;
import com.konfigthis.client.model.GrossUpPay;
import com.konfigthis.client.model.Payroll;
import com.konfigthis.client.model.PayrollBlocker;
import com.konfigthis.client.model.PayrollCheck;
import com.konfigthis.client.model.PayrollMinimal;
import com.konfigthis.client.model.PayrollPrepared;
import com.konfigthis.client.model.PayrollReceipt;
import com.konfigthis.client.model.PayrollReversal;
import com.konfigthis.client.model.PayrollsCalculateGrossUpRequest;
import com.konfigthis.client.model.PayrollsCreateOffCyclePayrollRequest;
import com.konfigthis.client.model.PayrollsGeneratePrintableChecksRequest;
import com.konfigthis.client.model.PayrollsSkipPayrollRequest;
import com.konfigthis.client.model.PayrollsUpdatePayrollByIdRequest;
import com.konfigthis.client.model.PayrollsUpdatePayrollByIdRequestEmployeeCompensationsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayrollsApi
 */
@Disabled
public class PayrollsApiTest {

    private static PayrollsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PayrollsApi(apiClient);
    }

    /**
     * Get approved payroll reversals
     *
     * Returns all approved Payroll Reversals for a Company.  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approvedReversalsTest() throws ApiException {
        String companyId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        PayrollReversal response = api.approvedReversals(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Calculate gross up
     *
     * Calculates gross up earnings for an employee&#39;s payroll, given net earnings. This endpoint is only applicable to off-cycle unprocessed payrolls.  The gross up amount must then be mapped to the corresponding fixed compensation earning type to get the correct payroll amount. For example, for bonus off-cycles, the gross up amount should be set with the Bonus earning type in the payroll &#x60;fixed_compensations&#x60; field.  scope: &#x60;payrolls:run&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateGrossUpTest() throws ApiException {
        String employeeUuid = null;
        String netPay = null;
        String payrollUuid = null;
        String xGustoAPIVersion = null;
        GrossUpPay response = api.calculateGrossUp(employeeUuid, netPay, payrollUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Calculate a payroll
     *
     * Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.  This calculation is asynchronous and a successful request responds with a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with *include&#x3D;taxes,benefits,deductions* params. In v2023-04-01, *show_calculation&#x3D;true* is no longer required.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateGrossUp_0Test() throws ApiException {
        String companyId = null;
        String payrollId = null;
        String xGustoAPIVersion = null;
        api.calculateGrossUp_0(companyId, payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel a payroll
     *
     * Transitions a &#x60;processed&#x60; payroll back to the &#x60;unprocessed&#x60; state. A payroll can be canceled if it meets both criteria: - &#x60;processed&#x60; is true - Current time is earlier than 3:30pm PT on the payroll_deadline  scope: &#x60;payrolls:run&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPayrollTransitionTest() throws ApiException {
        String companyId = null;
        String payrollId = null;
        String xGustoAPIVersion = null;
        Payroll response = api.cancelPayrollTransition(companyId, payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an off-cycle payroll
     *
     * Creates a new, unprocessed, off-cycle payroll.  ## &#x60;off_cycle_reason&#x60; - External benefits and deductions will be included when the &#x60;off_cycle_reason&#x60; is set to &#x60;Correction&#x60;. - All benefits and deductions are blocked when the &#x60;off_cycle_reason&#x60; is set to &#x60;Bonus&#x60;.  scope: &#x60;payrolls:run&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOffCyclePayrollTest() throws ApiException {
        Boolean offCycle = null;
        String offCycleReason = null;
        String startDate = null;
        String endDate = null;
        String companyId = null;
        String payScheduleUuid = null;
        List<String> employeeUuids = null;
        String checkDate = null;
        String withholdingPayPeriod = null;
        Boolean skipRegularDeductions = null;
        Boolean fixedWithholdingRate = null;
        String xGustoAPIVersion = null;
        PayrollPrepared response = api.createOffCyclePayroll(offCycle, offCycleReason, startDate, endDate, companyId)
                .payScheduleUuid(payScheduleUuid)
                .employeeUuids(employeeUuids)
                .checkDate(checkDate)
                .withholdingPayPeriod(withholdingPayPeriod)
                .skipRegularDeductions(skipRegularDeductions)
                .fixedWithholdingRate(fixedWithholdingRate)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a payroll
     *
     * This endpoint allows you to delete an **unprocessed** payroll.  By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the &#x60;async&#x3D;true&#x60; query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return &#x60;204/No Content&#x60;. When a payroll has been enqueued for asynchronous deletion, &#x60;202/Accepted&#x60; will be returned.  scope: &#x60;payrolls:run&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUnprocessedPayrollTest() throws ApiException {
        String companyId = null;
        String payrollId = null;
        Boolean async = null;
        String xGustoAPIVersion = null;
        api.deleteUnprocessedPayroll(companyId, payrollId)
                .async(async)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate payroll printable checks (pdf)
     *
     * This endpoint initiates the generation of employee checks for the payroll specified by payroll_id. A generation status and corresponding generated document request_uuid will be returned. Use the generated document GET endpoint with document_type: &#x60;printable_payroll_checks&#x60; and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.  scope: &#x60;generated_documents:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePrintableChecksTest() throws ApiException {
        String printingFormat = null;
        String payrollId = null;
        Integer startingCheckNumber = null;
        String xGustoAPIVersion = null;
        PayrollCheck response = api.generatePrintableChecks(printingFormat, payrollId)
                .startingCheckNumber(startingCheckNumber)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all payroll blockers for a company
     *
     * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.  The list is empty if there are no payroll blockers.  scope: &#x60;payrolls:run&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayrollBlockersTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        List<PayrollBlocker> response = api.getAllPayrollBlockers(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all payrolls for a company
     *
     * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, &amp; end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can&#39;t be more than 1 year apart.  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyPayrollsTest() throws ApiException {
        String companyId = null;
        String processingStatuses = null;
        String payrollTypes = null;
        String include = null;
        String startDate = null;
        String endDate = null;
        String xGustoAPIVersion = null;
        List<PayrollMinimal> response = api.getCompanyPayrolls(companyId)
                .processingStatuses(processingStatuses)
                .payrollTypes(payrollTypes)
                .include(include)
                .startDate(startDate)
                .endDate(endDate)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee pay stub (pdf)
     *
     * Get an employee&#39;s pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.  scope: &#x60;pay_stubs:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeePayStubTest() throws ApiException {
        String payrollId = null;
        String employeeId = null;
        String xGustoAPIVersion = null;
        api.getEmployeePayStub(payrollId, employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee&#39;s pay stubs
     *
     * Get an employee&#39;s pay stubs  scope: &#x60;pay_stubs:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeePayStubsTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        List<EmployeePayStub> response = api.getEmployeePayStubs(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a single payroll
     *
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the &#x60;employee_benefits:read:phi&#x60; scope  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSinglePayrollTest() throws ApiException {
        String companyId = null;
        String payrollId = null;
        String include = null;
        String xGustoAPIVersion = null;
        Payroll response = api.getSinglePayroll(companyId, payrollId)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a single payroll receipt
     *
     * Returns a payroll receipt.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleReceiptTest() throws ApiException {
        String payrollUuid = null;
        String xGustoAPIVersion = null;
        PayrollReceipt response = api.getSingleReceipt(payrollUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Prepare a payroll for update
     *
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates &amp; times.  Notes:  * Will null out calculated_at &amp; totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: &#x60;payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepareForUpdateTest() throws ApiException {
        String companyId = null;
        String payrollId = null;
        String xGustoAPIVersion = null;
        PayrollPrepared response = api.prepareForUpdate(companyId, payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Skip a payroll
     *
     * Submits a $0 payroll for employees associated with the pay schedule to skip payroll. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, the payroll is transitioned to the &#x60;processed&#x60; state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: &#x60;payrolls:run&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void skipPayrollTest() throws ApiException {
        String payrollType = null;
        String companyUuid = null;
        String startDate = null;
        String endDate = null;
        String payScheduleUuid = null;
        List<String> employeeUuids = null;
        String xGustoAPIVersion = null;
        api.skipPayroll(payrollType, companyUuid)
                .startDate(startDate)
                .endDate(endDate)
                .payScheduleUuid(payScheduleUuid)
                .employeeUuids(employeeUuids)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit payroll
     *
     * Submits an unprocessed payroll to be calculated and run. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, transitions the payroll to the &#x60;processed&#x60; state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: &#x60;payrolls:run&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitPayrollTest() throws ApiException {
        String companyId = null;
        String payrollId = null;
        String xGustoAPIVersion = null;
        api.submitPayroll(companyId, payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a payroll by ID
     *
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: &#x60;payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayrollByIdTest() throws ApiException {
        List<PayrollsUpdatePayrollByIdRequestEmployeeCompensationsInner> employeeCompensations = null;
        String companyId = null;
        String payrollId = null;
        String xGustoAPIVersion = null;
        PayrollPrepared response = api.updatePayrollById(employeeCompensations, companyId, payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
