/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Admin;
import com.konfigthis.client.model.CompaniesAcceptTermsOfServiceRequest;
import com.konfigthis.client.model.CompaniesAcceptTermsOfServiceResponse;
import com.konfigthis.client.model.CompaniesCreateAdminRequest;
import com.konfigthis.client.model.CompaniesCreatePartnerManagedCompanyRequest;
import com.konfigthis.client.model.CompaniesCreatePartnerManagedCompanyRequestCompany;
import com.konfigthis.client.model.CompaniesCreatePartnerManagedCompanyRequestUser;
import com.konfigthis.client.model.CompaniesCreatePartnerManagedCompanyResponse;
import com.konfigthis.client.model.CompaniesGetCustomFieldsResponse;
import com.konfigthis.client.model.CompaniesGetTermsOfServiceStatusRequest;
import com.konfigthis.client.model.CompaniesGetTermsOfServiceStatusResponse;
import com.konfigthis.client.model.CompaniesMigrateToEmbeddedPayrollRequest;
import com.konfigthis.client.model.CompaniesMigrateToEmbeddedPayrollResponse;
import com.konfigthis.client.model.Company;
import com.konfigthis.client.model.CompanyOnboardingStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompaniesApi
 */
@Disabled
public class CompaniesApiTest {

    private static CompaniesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompaniesApi(apiClient);
    }

    /**
     * Accept terms of service for a company user
     *
     * Accept the Gusto Embedded Payroll&#39;s [Terms of Service](https://flows.gusto.com/terms). The user must have a role in the company in order to accept the Terms of Service.  scope: &#x60;terms_of_services:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptTermsOfServiceTest() throws ApiException {
        String email = null;
        String ipAddress = null;
        String externalUserId = null;
        String companyUuid = null;
        String xGustoAPIVersion = null;
        CompaniesAcceptTermsOfServiceResponse response = api.acceptTermsOfService(email, ipAddress, externalUserId, companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an admin for the company
     *
     * Creates a new admin for a company. If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.  scope: &#x60;company_admin:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAdminTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String email = null;
        String companyId = null;
        String xGustoAPIVersion = null;
        Admin response = api.createAdmin(firstName, lastName, email, companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a partner managed company
     *
     * Create a partner managed company. When you successfully call the API, it does the following: * Creates a new company in Gusto * Creates a new user using the provided email if the user does not already exist. * Makes the user the primary payroll administrator of the new company.  In response, you will receive oauth access tokens for the created company.  IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.  &gt; ðŸ“˜ Token Authentication &gt; &gt; this endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPartnerManagedCompanyTest() throws ApiException {
        CompaniesCreatePartnerManagedCompanyRequestUser user = null;
        CompaniesCreatePartnerManagedCompanyRequestCompany company = null;
        String xGustoAPIVersion = null;
        CompaniesCreatePartnerManagedCompanyResponse response = api.createPartnerManagedCompany(user, company)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Finish company onboarding
     *
     * Finalize a given company&#39;s onboarding process.  ### Approve a company in demo After a company is finished onboarding, Gusto requires an additional step to review and approve that company. In production environments, this step is required for risk-analysis purposes.  We provide the endpoint &#x60;PUT &#39;/v1/companies/{company_uuid}/approve&#39;&#x60; to facilitate company approvals in the demo environment.  &#x60;&#x60;&#x60;shell PUT &#39;/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve&#39;  # Response: Company object, with company_status: &#39;Approved&#39; &#x60;&#x60;&#x60;  scope: &#x60;companies:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finishOnboardingTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        CompanyOnboardingStatus response = api.finishOnboarding(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the admins at a company
     *
     * Returns a list of all the admins at a company  scope: &#x60;company_admin:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAdminsTest() throws ApiException {
        String companyId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        List<Admin> response = api.getAllAdmins(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a company
     *
     * Get a company.          The employees:read scope is required to return home_address and non-work locations.          The company_admin:read scope is required to return primary_payroll_admin.          The signatories:read scope is required to return primary_signatory.           scope: &#x60;companies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyTest() throws ApiException {
        String companyId = null;
        String xGustoAPIVersion = null;
        Company response = api.getCompany(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the custom fields of a company
     *
     * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company  scope: &#x60;companies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        String companyId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        CompaniesGetCustomFieldsResponse response = api.getCustomFields(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the company&#39;s onboarding status
     *
     * Get company&#39;s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: &#x60;company_onboarding_status:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOnboardingStatusTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        CompanyOnboardingStatus response = api.getOnboardingStatus(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve terms of service status for a company user
     *
     * Retrieve the user acceptance status of the Gusto Embedded Payroll&#39;s [Terms of Service](https://flows.gusto.com/terms).  scope: &#x60;terms_of_services:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTermsOfServiceStatusTest() throws ApiException {
        String email = null;
        String companyUuid = null;
        String xGustoAPIVersion = null;
        CompaniesGetTermsOfServiceStatusResponse response = api.getTermsOfServiceStatus(email, companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Migrate company to embedded payroll
     *
     * Migrate an existing Gusto customer to your embedded payroll product.  To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).  scope: &#x60;partner_managed_companies:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrateToEmbeddedPayrollTest() throws ApiException {
        String email = null;
        String ipAddress = null;
        String externalUserId = null;
        String companyUuid = null;
        String xGustoAPIVersion = null;
        CompaniesMigrateToEmbeddedPayrollResponse response = api.migrateToEmbeddedPayroll(email, ipAddress, externalUserId, companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
