/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Compensation;
import com.konfigthis.client.model.FlsaStatusType;
import com.konfigthis.client.model.Job;
import com.konfigthis.client.model.JobsAndCompensationsCreateCompensationRequest;
import com.konfigthis.client.model.JobsAndCompensationsCreateCompensationRequestMinimumWagesInner;
import com.konfigthis.client.model.JobsAndCompensationsCreateJobRequest;
import com.konfigthis.client.model.JobsAndCompensationsUpdateCompensationRequest;
import com.konfigthis.client.model.JobsAndCompensationsUpdateJobRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsAndCompensationsApi
 */
@Disabled
public class JobsAndCompensationsApiTest {

    private static JobsAndCompensationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new JobsAndCompensationsApi(apiClient);
    }

    /**
     * Create a compensation
     *
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;.  scope: &#x60;jobs:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompensationTest() throws ApiException {
        String paymentUnit = null;
        FlsaStatusType flsaStatus = null;
        String jobId = null;
        String rate = null;
        String effectiveDate = null;
        Boolean adjustForMinimumWage = null;
        List<JobsAndCompensationsCreateCompensationRequestMinimumWagesInner> minimumWages = null;
        String xGustoAPIVersion = null;
        Compensation response = api.createCompensation(paymentUnit, flsaStatus, jobId)
                .rate(rate)
                .effectiveDate(effectiveDate)
                .adjustForMinimumWage(adjustForMinimumWage)
                .minimumWages(minimumWages)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a job
     *
     * Create a job.  scope: &#x60;jobs:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        String title = null;
        String hireDate = null;
        String employeeId = null;
        Boolean twoPercentShareholder = null;
        Boolean stateWcCovered = null;
        String stateWcClassCode = null;
        String xGustoAPIVersion = null;
        Job response = api.createJob(title, hireDate, employeeId)
                .twoPercentShareholder(twoPercentShareholder)
                .stateWcCovered(stateWcCovered)
                .stateWcClassCode(stateWcClassCode)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an individual job
     *
     * Deletes a specific job that an employee holds.  scope: &#x60;jobs:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJobByIdTest() throws ApiException {
        String jobId = null;
        String xGustoAPIVersion = null;
        api.deleteJobById(jobId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a compensation
     *
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;.  scope: &#x60;jobs:read&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompensationByIdTest() throws ApiException {
        String compensationId = null;
        String xGustoAPIVersion = null;
        Compensation response = api.getCompensationById(compensationId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get jobs for an employee
     *
     * Get all of the jobs that an employee holds.  scope: &#x60;jobs:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeJobsTest() throws ApiException {
        String employeeId = null;
        Double page = null;
        Double per = null;
        String include = null;
        String xGustoAPIVersion = null;
        List<Job> response = api.getEmployeeJobs(employeeId)
                .page(page)
                .per(per)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get compensations for a job
     *
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;. By default the API returns only the current compensation - see the &#x60;include&#x60; query parameter for retrieving all compensations.  Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same &#x60;job_uuid&#x60; as another will fail with a relevant error.  Use &#x60;flsa_status&#x60; to determine if an employee is eligible for overtime.  scope: &#x60;jobs:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobCompensationsTest() throws ApiException {
        String jobId = null;
        Double page = null;
        Double per = null;
        String include = null;
        String xGustoAPIVersion = null;
        List<Compensation> response = api.getJobCompensations(jobId)
                .page(page)
                .per(per)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a job
     *
     * Get a job.  scope: &#x60;jobs:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobDetailsTest() throws ApiException {
        String jobId = null;
        String include = null;
        String xGustoAPIVersion = null;
        Job response = api.getJobDetails(jobId)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a compensation
     *
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;. This endpoint deletes a compensation for a job that hasn&#39;t been processed on payroll.  scope: &#x60;jobs:write&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCompensationTest() throws ApiException {
        String compensationId = null;
        String xGustoAPIVersion = null;
        api.removeCompensation(compensationId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a compensation
     *
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;.  scope: &#x60;jobs:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompensationTest() throws ApiException {
        String version = null;
        String compensationId = null;
        String rate = null;
        String paymentUnit = null;
        FlsaStatusType flsaStatus = null;
        Boolean adjustForMinimumWage = null;
        List<JobsAndCompensationsCreateCompensationRequestMinimumWagesInner> minimumWages = null;
        String xGustoAPIVersion = null;
        Compensation response = api.updateCompensation(version, compensationId)
                .rate(rate)
                .paymentUnit(paymentUnit)
                .flsaStatus(flsaStatus)
                .adjustForMinimumWage(adjustForMinimumWage)
                .minimumWages(minimumWages)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a job
     *
     * Update a job.  scope: &#x60;jobs:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobTest() throws ApiException {
        String version = null;
        String jobId = null;
        String title = null;
        String hireDate = null;
        Boolean twoPercentShareholder = null;
        Boolean stateWcCovered = null;
        String stateWcClassCode = null;
        String xGustoAPIVersion = null;
        Job response = api.updateJob(version, jobId)
                .title(title)
                .hireDate(hireDate)
                .twoPercentShareholder(twoPercentShareholder)
                .stateWcCovered(stateWcCovered)
                .stateWcClassCode(stateWcClassCode)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
