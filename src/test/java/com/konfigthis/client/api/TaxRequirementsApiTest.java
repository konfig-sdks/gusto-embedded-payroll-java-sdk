/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TaxRequirementsGetStatesResponseInner;
import com.konfigthis.client.model.TaxRequirementsState;
import com.konfigthis.client.model.TaxRequirementsUpdateStateTaxesRequest;
import com.konfigthis.client.model.TaxRequirementsUpdateStateTaxesRequestRequirementSetsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaxRequirementsApi
 */
@Disabled
public class TaxRequirementsApiTest {

    private static TaxRequirementsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TaxRequirementsApi(apiClient);
    }

    /**
     * Get State Tax Requirements
     *
     * Get all tax requirements for a given state.  ### Metadata Examples  &#x60;&#x60;&#x60;json select {   \&quot;type\&quot;: \&quot;select\&quot;,   \&quot;options\&quot;: [     { \&quot;label\&quot;: \&quot;Semiweekly\&quot;,  value: \&quot;Semi-weekly\&quot; },     { \&quot;label\&quot;: \&quot;Monthly\&quot;,  value: \&quot;Monthly\&quot; },     { \&quot;label\&quot;: \&quot;Quarterly\&quot;,  value: \&quot;Quarterly\&quot; },   ] } &#x60;&#x60;&#x60; &#x60;&#x60;&#x60;json radio {   \&quot;type\&quot;: \&quot;radio\&quot;,   \&quot;options\&quot;: [     { \&quot;label\&quot;: \&quot;No, we cannot reimburse\&quot;,  value: false, short_label: \&quot;Not Reimbursable\&quot; },     { \&quot;label\&quot;: \&quot;Yes, we can reimburse\&quot;,  value: true, short_label: \&quot;Reimbursable\&quot; },   ] } &#x60;&#x60;&#x60; &#x60;&#x60;&#x60;json account_number {   \&quot;type\&quot;: \&quot;account_number\&quot;,   \&quot;mask\&quot;: \&quot;######-##&#39;,   \&quot;prefix\&quot;: null } &#x60;&#x60;&#x60; &#x60;&#x60;&#x60;json tax_rate {   \&quot;type\&quot;: \&quot;tax_rate\&quot;,   \&quot;validation\&quot;: {     \&quot;type\&quot;: \&quot;min_max\&quot;,     \&quot;min\&quot;: \&quot;0.0004\&quot;,     \&quot;max\&quot;: \&quot;0.081\&quot;   } } &#x60;&#x60;&#x60;  scope: &#x60;company_tax_requirements:read&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStateRequirementsTest() throws ApiException {
        String companyUuid = null;
        String state = null;
        Boolean scheduling = null;
        String xGustoAPIVersion = null;
        TaxRequirementsState response = api.getStateRequirements(companyUuid, state)
                .scheduling(scheduling)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get All Tax Requirement States
     *
     * Returns objects describing the states that have tax requirements for the company  scope: &#x60;company_tax_requirements:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatesTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        List<TaxRequirementsGetStatesResponseInner> response = api.getStates(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update State Tax Requirements
     *
     * Update State Tax Requirements  scope: &#x60;company_tax_requirements:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStateTaxesTest() throws ApiException {
        String companyUuid = null;
        String state = null;
        List<TaxRequirementsUpdateStateTaxesRequestRequirementSetsInner> requirementSets = null;
        String xGustoAPIVersion = null;
        api.updateStateTaxes(companyUuid, state)
                .requirementSets(requirementSets)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
