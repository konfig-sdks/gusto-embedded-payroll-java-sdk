/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccruingTimeOffHour;
import com.konfigthis.client.model.TimeOffPoliciesAddEmployeesToPolicyRequest;
import com.konfigthis.client.model.TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner;
import com.konfigthis.client.model.TimeOffPoliciesCalculateAccruingTimeOffHoursRequest;
import com.konfigthis.client.model.TimeOffPoliciesCreatePolicyRequest;
import com.konfigthis.client.model.TimeOffPoliciesRemoveEmployeesRequest;
import com.konfigthis.client.model.TimeOffPoliciesUpdateEmployeeBalanceRequest;
import com.konfigthis.client.model.TimeOffPoliciesUpdatePolicyRequest;
import com.konfigthis.client.model.TimeOffPolicy;
import com.konfigthis.client.model.TimeOffPolicyEmployeesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeOffPoliciesApi
 */
@Disabled
public class TimeOffPoliciesApiTest {

    private static TimeOffPoliciesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeOffPoliciesApi(apiClient);
    }

    /**
     * Add employees to a time off policy
     *
     * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies  scope: &#x60;time_off_policies:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEmployeesToPolicyTest() throws ApiException {
        String timeOffPolicyUuid = null;
        List<TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner> employees = null;
        String xGustoAPIVersion = null;
        TimeOffPolicy response = api.addEmployeesToPolicy(timeOffPolicyUuid)
                .employees(employees)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Calculate accruing time off hours
     *
     * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateAccruingTimeOffHoursTest() throws ApiException {
        String payrollId = null;
        String employeeId = null;
        Double regularHoursWorked = null;
        Double overtimeHoursWorked = null;
        Double doubleOvertimeHoursWorked = null;
        Double ptoHoursUsed = null;
        Double sickHoursUsed = null;
        String xGustoAPIVersion = null;
        List<AccruingTimeOffHour> response = api.calculateAccruingTimeOffHours(payrollId, employeeId)
                .regularHoursWorked(regularHoursWorked)
                .overtimeHoursWorked(overtimeHoursWorked)
                .doubleOvertimeHoursWorked(doubleOvertimeHoursWorked)
                .ptoHoursUsed(ptoHoursUsed)
                .sickHoursUsed(sickHoursUsed)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a time off policy
     *
     * Create a time off policy  scope: &#x60;time_off_policies:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        String name = null;
        String policyType = null;
        String accrualMethod = null;
        String companyUuid = null;
        Float accrualRate = null;
        Float accrualRateUnit = null;
        Boolean paidOutOnTermination = null;
        Integer accrualWaitingPeriodDays = null;
        Float carryoverLimitHours = null;
        Float maxAccrualHoursPerYear = null;
        Float maxHours = null;
        String xGustoAPIVersion = null;
        TimeOffPolicy response = api.createPolicy(name, policyType, accrualMethod, companyUuid)
                .accrualRate(accrualRate)
                .accrualRateUnit(accrualRateUnit)
                .paidOutOnTermination(paidOutOnTermination)
                .accrualWaitingPeriodDays(accrualWaitingPeriodDays)
                .carryoverLimitHours(carryoverLimitHours)
                .maxAccrualHoursPerYear(maxAccrualHoursPerYear)
                .maxHours(maxHours)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate a time off policy
     *
     * Deactivate a time off policy  scope: &#x60;time_off_policies:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivatePolicyTest() throws ApiException {
        String timeOffPolicyUuid = null;
        String xGustoAPIVersion = null;
        TimeOffPolicy response = api.deactivatePolicy(timeOffPolicyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all time off policies
     *
     * Get all time off policies for a company  scope: &#x60;time_off_policies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPoliciesTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        List<TimeOffPolicy> response = api.getAllPolicies(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a time off policy
     *
     * Get a time off policy  scope: &#x60;time_off_policies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String timeOffPolicyUuid = null;
        String xGustoAPIVersion = null;
        TimeOffPolicy response = api.getPolicy(timeOffPolicyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove employees from a time off policy
     *
     * Remove employees from a time off policy  scope: &#x60;time_off_policies:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEmployeesTest() throws ApiException {
        String timeOffPolicyUuid = null;
        List<TimeOffPolicyEmployeesInner> employees = null;
        String xGustoAPIVersion = null;
        TimeOffPolicy response = api.removeEmployees(timeOffPolicyUuid)
                .employees(employees)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update employee time off hour balances
     *
     * Updates time off hours balances for employees for a time off policy  scope: &#x60;time_off_policies:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeBalanceTest() throws ApiException {
        String timeOffPolicyUuid = null;
        List<TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner> employees = null;
        String xGustoAPIVersion = null;
        TimeOffPolicy response = api.updateEmployeeBalance(timeOffPolicyUuid)
                .employees(employees)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a time off policy
     *
     * Update a time off policy  scope: &#x60;time_off_policies:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws ApiException {
        String timeOffPolicyUuid = null;
        String name = null;
        String accrualMethod = null;
        Float accrualRate = null;
        Float accrualRateUnit = null;
        Boolean paidOutOnTermination = null;
        Integer accrualWaitingPeriodDays = null;
        Float carryoverLimitHours = null;
        Float maxAccrualHoursPerYear = null;
        Float maxHours = null;
        String xGustoAPIVersion = null;
        TimeOffPolicy response = api.updatePolicy(timeOffPolicyUuid)
                .name(name)
                .accrualMethod(accrualMethod)
                .accrualRate(accrualRate)
                .accrualRateUnit(accrualRateUnit)
                .paidOutOnTermination(paidOutOnTermination)
                .accrualWaitingPeriodDays(accrualWaitingPeriodDays)
                .carryoverLimitHours(carryoverLimitHours)
                .maxAccrualHoursPerYear(maxAccrualHoursPerYear)
                .maxHours(maxHours)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
