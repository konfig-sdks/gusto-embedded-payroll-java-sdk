/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.SignatoriesCreateInviteRequest;
import com.konfigthis.client.model.SignatoriesCreateSignatoryWithCompleteInformationRequest;
import com.konfigthis.client.model.SignatoriesCreateSignatoryWithCompleteInformationRequestHomeAddress;
import com.konfigthis.client.model.SignatoriesUpdateRequest;
import com.konfigthis.client.model.SignatoriesUpdateRequestHomeAddress;
import com.konfigthis.client.model.Signatory;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SignatoriesApi
 */
@Disabled
public class SignatoriesApiTest {

    private static SignatoriesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SignatoriesApi(apiClient);
    }

    /**
     * Invite a signatory
     *
     * Create a signatory with minimal information. This signatory can be invited to provide more information through the &#x60;PUT /v1/companies/{company_uuid}/signatories/{signatory_uuid}&#x60; endpoint. This will start the identity verification process and allow the signatory to be verified to sign documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInviteTest() throws ApiException {
        String email = null;
        String companyUuid = null;
        String title = null;
        String firstName = null;
        String lastName = null;
        String xGustoAPIVersion = null;
        Signatory response = api.createInvite(email, companyUuid)
                .title(title)
                .firstName(firstName)
                .lastName(lastName)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a signatory
     *
     * Create a company signatory with complete information. A signatory can legally sign forms once the identity verification process is successful.  scope: &#x60;signatories:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSignatoryWithCompleteInformationTest() throws ApiException {
        String title = null;
        String ssn = null;
        String firstName = null;
        String lastName = null;
        String email = null;
        String phone = null;
        String birthday = null;
        SignatoriesCreateSignatoryWithCompleteInformationRequestHomeAddress homeAddress = null;
        String companyUuid = null;
        String middleInitial = null;
        String xGustoAPIVersion = null;
        Signatory response = api.createSignatoryWithCompleteInformation(title, ssn, firstName, lastName, email, phone, birthday, homeAddress, companyUuid)
                .middleInitial(middleInitial)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a signatory
     *
     * Delete a company signatory.  scope: &#x60;signatories:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSignatoryTest() throws ApiException {
        String companyUuid = null;
        String signatoryUuid = null;
        String xGustoAPIVersion = null;
        api.deleteSignatory(companyUuid, signatoryUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all company signatories
     *
     * Returns company signatories. Currently we only support a single signatory per company.  scope: &#x60;signatories:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanySignatoriesTest() throws ApiException {
        String companyUuid = null;
        String xGustoAPIVersion = null;
        List<Signatory> response = api.getCompanySignatories(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a signatory
     *
     * Update a signatory that has been either invited or created. If the signatory has been created with minimal information through the &#x60;POST /v1/companies/{company_uuid}/signatories/invite&#x60; endpoint, then the first update must contain all attributes specified in the request body in order to start the identity verification process.  scope: &#x60;signatories:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String companyUuid = null;
        String signatoryUuid = null;
        String title = null;
        String version = null;
        String firstName = null;
        String middleInitial = null;
        String lastName = null;
        String phone = null;
        String birthday = null;
        String ssn = null;
        SignatoriesUpdateRequestHomeAddress homeAddress = null;
        String xGustoAPIVersion = null;
        Signatory response = api.update(companyUuid, signatoryUuid)
                .title(title)
                .version(version)
                .firstName(firstName)
                .middleInitial(middleInitial)
                .lastName(lastName)
                .phone(phone)
                .birthday(birthday)
                .ssn(ssn)
                .homeAddress(homeAddress)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
