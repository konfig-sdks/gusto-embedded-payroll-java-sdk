/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeeBenefit;
import com.konfigthis.client.model.EmployeeBenefitsCreateBenefitRecordRequest;
import com.konfigthis.client.model.EmployeeBenefitsCreateBenefitRecordRequestContribution;
import com.konfigthis.client.model.EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest;
import com.konfigthis.client.model.EmployeeBenefitsUpdateBenefitRecordRequest;
import com.konfigthis.client.model.EmployeeBenefitsUpdateBenefitRecordRequestContribution;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeBenefitsApi
 */
@Disabled
public class EmployeeBenefitsApiTest {

    private static EmployeeBenefitsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeeBenefitsApi(apiClient);
    }

    /**
     * Create an employee benefit
     *
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: &#x60;employee_benefits:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBenefitRecordTest() throws ApiException {
        String companyBenefitUuid = null;
        String employeeId = null;
        Boolean active = null;
        String employeeDeduction = null;
        Boolean deductAsPercentage = null;
        String employeeDeductionAnnualMaximum = null;
        EmployeeBenefitsCreateBenefitRecordRequestContribution contribution = null;
        Boolean elective = null;
        String companyContributionAnnualMaximum = null;
        String limitOption = null;
        Boolean catchUp = null;
        String coverageAmount = null;
        String coverageSalaryMultiplier = null;
        String deductionReducesTaxableIncome = null;
        String companyContribution = null;
        Boolean contributeAsPercentage = null;
        String xGustoAPIVersion = null;
        EmployeeBenefit response = api.createBenefitRecord(companyBenefitUuid, employeeId)
                .active(active)
                .employeeDeduction(employeeDeduction)
                .deductAsPercentage(deductAsPercentage)
                .employeeDeductionAnnualMaximum(employeeDeductionAnnualMaximum)
                .contribution(contribution)
                .elective(elective)
                .companyContributionAnnualMaximum(companyContributionAnnualMaximum)
                .limitOption(limitOption)
                .catchUp(catchUp)
                .coverageAmount(coverageAmount)
                .coverageSalaryMultiplier(coverageSalaryMultiplier)
                .deductionReducesTaxableIncome(deductionReducesTaxableIncome)
                .companyContribution(companyContribution)
                .contributeAsPercentage(contributeAsPercentage)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create year-to-date benefit amounts from a different company
     *
     * Year-to-date benefit amounts from a different company represents the amount of money added to an employee&#39;s plan during a current year, made outside of the current contribution when they were employed at a different company.  This endpoint only supports passing outside contributions for 401(k) benefits.  scope: &#x60;employee_benefits:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createYtdBenefitAmountsFromDifferentCompanyTest() throws ApiException {
        Double taxYear = null;
        String ytdEmployeeDeductionAmount = null;
        String ytdCompanyContributionAmount = null;
        String employeeId = null;
        Double benefitType = null;
        String xGustoAPIVersion = null;
        api.createYtdBenefitAmountsFromDifferentCompany(taxYear, ytdEmployeeDeductionAmount, ytdCompanyContributionAmount, employeeId)
                .benefitType(benefitType)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an employee benefit
     *
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: &#x60;employee_benefits:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String employeeBenefitId = null;
        String xGustoAPIVersion = null;
        api.deleteById(employeeBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all benefits for an employee
     *
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Returns an array of all employee benefits for this employee  Benefits containing PHI are only visible to applications with the &#x60;employee_benefits:read:phi&#x60; scope.  scope: &#x60;employee_benefits:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllForEmployeeTest() throws ApiException {
        String employeeId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        List<EmployeeBenefit> response = api.getAllForEmployee(employeeId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee benefit
     *
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Benefits containing PHI are only visible to applications with the &#x60;employee_benefits:read:phi&#x60; scope.  scope: &#x60;employee_benefits:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeBenefitByIdTest() throws ApiException {
        String employeeBenefitId = null;
        String xGustoAPIVersion = null;
        EmployeeBenefit response = api.getEmployeeBenefitById(employeeBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee benefit
     *
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: &#x60;employee_benefits:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBenefitRecordTest() throws ApiException {
        String version = null;
        String employeeBenefitId = null;
        Boolean active = null;
        String employeeDeduction = null;
        Boolean deductAsPercentage = null;
        String employeeDeductionAnnualMaximum = null;
        EmployeeBenefitsUpdateBenefitRecordRequestContribution contribution = null;
        Boolean elective = null;
        String companyContributionAnnualMaximum = null;
        String limitOption = null;
        Boolean catchUp = null;
        String coverageAmount = null;
        String deductionReducesTaxableIncome = null;
        String coverageSalaryMultiplier = null;
        String companyContribution = null;
        Boolean contributeAsPercentage = null;
        String xGustoAPIVersion = null;
        EmployeeBenefit response = api.updateBenefitRecord(version, employeeBenefitId)
                .active(active)
                .employeeDeduction(employeeDeduction)
                .deductAsPercentage(deductAsPercentage)
                .employeeDeductionAnnualMaximum(employeeDeductionAnnualMaximum)
                .contribution(contribution)
                .elective(elective)
                .companyContributionAnnualMaximum(companyContributionAnnualMaximum)
                .limitOption(limitOption)
                .catchUp(catchUp)
                .coverageAmount(coverageAmount)
                .deductionReducesTaxableIncome(deductionReducesTaxableIncome)
                .coverageSalaryMultiplier(coverageSalaryMultiplier)
                .companyContribution(companyContribution)
                .contributeAsPercentage(contributeAsPercentage)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
