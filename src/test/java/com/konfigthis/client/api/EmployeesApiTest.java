/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeeOnboardingStatus;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequest;
import com.konfigthis.client.model.EmployeesGetCustomFieldsResponse;
import com.konfigthis.client.model.EmployeesUpdateEmployeeRequest;
import com.konfigthis.client.model.EmployeesUpdateOnboardingStatusRequest;
import com.konfigthis.client.model.TimeOffActivity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeesApi
 */
@Disabled
public class EmployeesApiTest {

    private static EmployeesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeesApi(apiClient);
    }

    /**
     * Finish onboarding an employee
     *
     * This endpoint is currently supported but will eventually be deprecated; please use &#x60;/v1/employees/{employee_id}/onboarding_status&#x60; instead.  Call this endpoint as the very last step of employee onboarding to complete their onboarding. When successful, the employee&#39;s &#x60;onboarded&#x60; attribute will be updated to true, indicating that they can be included in company&#39;s payrolls.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeOnboardingTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        Employee response = api.completeOnboarding(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an employee
     *
     * Create an employee.  scope: &#x60;employees:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeeTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String companyId = null;
        String middleInitial = null;
        String dateOfBirth = null;
        String email = null;
        String ssn = null;
        Boolean selfOnboarding = null;
        String xGustoAPIVersion = null;
        Employee response = api.createEmployee(firstName, lastName, companyId)
                .middleInitial(middleInitial)
                .dateOfBirth(dateOfBirth)
                .email(email)
                .ssn(ssn)
                .selfOnboarding(selfOnboarding)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an onboarding employee
     *
     * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: &#x60;employees:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOnboardingEmployeeTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        api.deleteOnboardingEmployee(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee&#39;s custom fields
     *
     * Returns a list of the employee&#39;s custom fields.  scope: &#x60;employees:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        String employeeId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        EmployeesGetCustomFieldsResponse response = api.getCustomFields(employeeId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee
     *
     * Get an employee.  scope: &#x60;employees:read&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeByIdTest() throws ApiException {
        String employeeId = null;
        String include = null;
        String xGustoAPIVersion = null;
        Employee response = api.getEmployeeById(employeeId)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the employee&#39;s onboarding status
     *
     * # Description Retrieves an employee&#39;s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: &#x60;employees:read&#x60;  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | &#x60;admin_onboarding_incomplete&#x60; | Admin needs to complete the full employee-onboarding. | | &#x60;onboarding_completed&#x60; | Employee has been fully onboarded and verified. |  ### Employee self-onboarding | onboarding_status | Description | |:------------------|------------:| | &#x60;admin_onboarding_incomplete&#x60; | Admin needs to enter basic information about the employee. | | &#x60;self_onboarding_pending_invite&#x60; | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | &#x60;self_onboarding_invited&#x60; | Employee has been sent an invitation to self-onboard. | | &#x60;self_onboarding_invited_started&#x60; | Employee has started the self-onboarding process. | | &#x60;self_onboarding_invited_overdue&#x60; | Employee&#39;s start date has passed, and employee has still not completed self-onboarding. | | &#x60;self_onboarding_completed_by_employee&#x60; | Employee has completed entering in their information. The status should be updated via API to \&quot;self_onboarding_awaiting_admin_review\&quot; from here, once the Admin has started reviewing. | | &#x60;self_onboarding_awaiting_admin_review&#x60; | Admin has started to verify the employee&#39;s information. | | &#x60;onboarding_completed&#x60; | Employee has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | &#x60;personal_details&#x60; | Add employee&#39;s first name, last name, email, date of birth, social security number | | &#x60;compensation_details&#x60; | Associate employee to a job &amp; compensation. | | &#x60;add_work_address&#x60; | Add employee work address. | | &#x60;add_home_address&#x60; | Add employee home address. | | &#x60;federal_tax_setup&#x60; | Set up federal tax withholdings. | | &#x60;state_tax_setup&#x60; | Set up state tax withholdings. | | &#x60;direct_deposit_setup&#x60; | (optional) Set up employee&#39;s direct deposit. | | &#x60;employee_form_signing&#x60; | Employee forms (e.g., W4, direct deposit authorization) are generated &amp; signed. | | &#x60;file_new_hire_report&#x60; | File a new hire report for this employee. | | &#x60;admin_review&#x60; | Admin reviews &amp; confirms employee details (only required for Employee self-onboarding) |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOnboardingStatusTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        EmployeeOnboardingStatus response = api.getOnboardingStatus(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get employee time off activities
     *
     * Get employee time off activities.  scope: &#x60;employee_time_off_activities:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffActivitiesTest() throws ApiException {
        String employeeUuid = null;
        String timeOffType = null;
        String xGustoAPIVersion = null;
        TimeOffActivity response = api.getTimeOffActivities(employeeUuid, timeOffType)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get employees of a company
     *
     * Get all of the employees, onboarding, active and terminated, for a given company.  scope: &#x60;employees:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCompanyEmployeesTest() throws ApiException {
        String companyId = null;
        Boolean terminated = null;
        String include = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        List<Employee> response = api.listCompanyEmployees(companyId)
                .terminated(terminated)
                .include(include)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee
     *
     * Update an employee.  scope: &#x60;employees:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeTest() throws ApiException {
        String version = null;
        String employeeId = null;
        String firstName = null;
        String middleInitial = null;
        String lastName = null;
        String dateOfBirth = null;
        String email = null;
        String ssn = null;
        Boolean twoPercentShareholder = null;
        String xGustoAPIVersion = null;
        Employee response = api.updateEmployee(version, employeeId)
                .firstName(firstName)
                .middleInitial(middleInitial)
                .lastName(lastName)
                .dateOfBirth(dateOfBirth)
                .email(email)
                .ssn(ssn)
                .twoPercentShareholder(twoPercentShareholder)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the employee&#39;s onboarding status
     *
     * scope: &#x60;employees:manage&#x60;  Updates an employee&#39;s onboarding status. Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark an employee as self-onboarding | &#x60;admin_onboarding_incomplete&#x60; | &#x60;self_onboarding_pending_invite&#x60; | | Invite an employee to self-onboard | &#x60;admin_onboarding_incomplete&#x60; or &#x60;self_onboarding_pending_invite&#x60; | &#x60;self_onboarding_invited&#x60; | | Cancel an employee&#39;s self-onboarding | &#x60;self_onboarding_invited&#x60; or &#x60;self_onboarding_pending_invite&#x60; | &#x60;admin_onboarding_incomplete&#x60; | | Review an employee&#39;s self-onboarded info | &#x60;self_onboarding_completed_by_employee&#x60; | &#x60;self_onboarding_awaiting_admin_review&#x60; | | Finish an employee&#39;s onboarding | &#x60;admin_onboarding_incomplete&#x60; or &#x60;self_onboarding_awaiting_admin_review&#x60; | &#x60;onboarding_completed&#x60; |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOnboardingStatusTest() throws ApiException {
        String onboardingStatus = null;
        String employeeId = null;
        String xGustoAPIVersion = null;
        EmployeeOnboardingStatus response = api.updateOnboardingStatus(onboardingStatus, employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
