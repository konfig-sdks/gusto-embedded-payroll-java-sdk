/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeeEmploymentsCreateTerminationRequest;
import com.konfigthis.client.model.EmployeeEmploymentsGetHistoryResponseInner;
import com.konfigthis.client.model.EmployeeEmploymentsUpdateRehireRequest;
import com.konfigthis.client.model.EmployeeEmploymentsUpdateTerminationRequest;
import com.konfigthis.client.model.Rehire;
import com.konfigthis.client.model.RehireBody;
import com.konfigthis.client.model.Termination;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeEmploymentsApi
 */
@Disabled
public class EmployeeEmploymentsApiTest {

    private static EmployeeEmploymentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeeEmploymentsApi(apiClient);
    }

    /**
     * Create an employee rehire
     *
     * Rehire is created whenever an employee is scheduled to return to the company.  scope: &#x60;employments:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRehireTest() throws ApiException {
        String effectiveDate = null;
        Boolean fileNewHireReport = null;
        String workLocationUuid = null;
        String employeeId = null;
        String employmentStatus = null;
        Boolean twoPercentShareholder = null;
        String xGustoAPIVersion = null;
        Rehire response = api.createRehire(effectiveDate, fileNewHireReport, workLocationUuid, employeeId)
                .employmentStatus(employmentStatus)
                .twoPercentShareholder(twoPercentShareholder)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an employee termination
     *
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: &#x60;employments:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTerminationTest() throws ApiException {
        String effectiveDate = null;
        String employeeId = null;
        Boolean runTerminationPayroll = null;
        String xGustoAPIVersion = null;
        Termination response = api.createTermination(effectiveDate, employeeId)
                .runTerminationPayroll(runTerminationPayroll)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an employee termination
     *
     * Delete an employee termination.  scope: &#x60;employments:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTerminationTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        api.deleteTermination(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get employment history for an employee
     *
     * Retrieve the employment history for a given employee, which includes termination and rehire.  scope: &#x60;employments:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHistoryTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        List<EmployeeEmploymentsGetHistoryResponseInner> response = api.getHistory(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee rehire
     *
     * Retrieve an employee&#39;s rehire, which contains information on when the employee returns to work.  scope: &#x60;employments:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRehireTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        Rehire response = api.getRehire(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get terminations for an employee
     *
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: &#x60;employments:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeeTerminationsTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        List<Termination> response = api.listEmployeeTerminations(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an employee rehire
     *
     * Delete an employee rehire. An employee rehire cannot be deleted if it&#39;s active (past effective date).  scope: &#x60;employments:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeRehireTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        api.removeRehire(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee rehire
     *
     * Update an employee&#39;s rehire.  scope: &#x60;employments:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRehireTest() throws ApiException {
        String employeeId = null;
        String version = null;
        String effectiveDate = null;
        Boolean fileNewHireReport = null;
        String workLocationUuid = null;
        String employmentStatus = null;
        Boolean twoPercentShareholder = null;
        String xGustoAPIVersion = null;
        Rehire response = api.updateRehire(employeeId)
                .version(version)
                .effectiveDate(effectiveDate)
                .fileNewHireReport(fileNewHireReport)
                .workLocationUuid(workLocationUuid)
                .employmentStatus(employmentStatus)
                .twoPercentShareholder(twoPercentShareholder)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee termination
     *
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: &#x60;employments:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTerminationTest() throws ApiException {
        String employeeId = null;
        String version = null;
        String effectiveDate = null;
        Boolean runTerminationPayroll = null;
        String xGustoAPIVersion = null;
        Termination response = api.updateTermination(employeeId)
                .version(version)
                .effectiveDate(effectiveDate)
                .runTerminationPayroll(runTerminationPayroll)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
