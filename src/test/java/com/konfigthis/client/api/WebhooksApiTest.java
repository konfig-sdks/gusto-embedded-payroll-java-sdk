/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.WebhookSubscription;
import com.konfigthis.client.model.WebhooksCreateSubscriptionRequest;
import com.konfigthis.client.model.WebhooksUpdateSubscriptionRequest;
import com.konfigthis.client.model.WebhooksVerifySubscriptionTokenRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private static WebhooksApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebhooksApi(apiClient);
    }

    /**
     * Create a webhook subscription
     *
     * Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.  &gt; ðŸ“˜ Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionTest() throws ApiException {
        String url = null;
        List<String> subscriptionTypes = null;
        String xGustoAPIVersion = null;
        WebhookSubscription response = api.createSubscription(url, subscriptionTypes)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webhook subscription
     *
     * Deletes the Webhook Subscription associated with the provided UUID.  &gt; ðŸ“˜ Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:write&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionByUuidTest() throws ApiException {
        String webhookSubscriptionUuid = null;
        String xGustoAPIVersion = null;
        api.deleteSubscriptionByUuid(webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webhook subscription
     *
     * Returns the Webhook Subscription associated with the provided UUID.  &gt; ðŸ“˜ Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:read&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionTest() throws ApiException {
        String webhookSubscriptionUuid = null;
        String xGustoAPIVersion = null;
        WebhookSubscription response = api.getSubscription(webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * List webhook subscriptions
     *
     * Returns all webhook subscriptions associated with the provided Partner API token.  &gt; ðŸ“˜ Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscriptionsTest() throws ApiException {
        String xGustoAPIVersion = null;
        List<WebhookSubscription> response = api.listSubscriptions()
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Request the webhook subscription verification_token
     *
     * Request that the webhook subscription &#x60;verification_token&#x60; be POSTed to the Subscription URL.  &gt; ðŸ“˜ Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:read&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestVerificationTokenTest() throws ApiException {
        String webhookSubscriptionUuid = null;
        String xGustoAPIVersion = null;
        api.requestVerificationToken(webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webhook subscription
     *
     * Updates the Webhook Subscription associated with the provided UUID.  &gt; ðŸ“˜ Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:write&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        List<String> subscriptionTypes = null;
        String webhookSubscriptionUuid = null;
        String xGustoAPIVersion = null;
        WebhookSubscription response = api.updateSubscription(subscriptionTypes, webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify the webhook subscription
     *
     * When a webhook subscription is created, a &#x60;verification_token&#x60; is POSTed to the registered webhook subscription URL. This &#x60;verify&#x60; endpoint needs to be called with &#x60;verification_token&#x60; before webhook events can be sent to the registered webhook URL.  Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the &#x60;verification_token&#x60; to the Subscriber.  &gt; ðŸ“˜ Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:write&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifySubscriptionTokenTest() throws ApiException {
        String verificationToken = null;
        String webhookSubscriptionUuid = null;
        String xGustoAPIVersion = null;
        WebhookSubscription response = api.verifySubscriptionToken(verificationToken, webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
