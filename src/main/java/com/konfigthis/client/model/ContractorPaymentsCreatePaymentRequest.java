/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ContractorPaymentsCreatePaymentRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContractorPaymentsCreatePaymentRequest {
  public static final String SERIALIZED_NAME_CONTRACTOR_UUID = "contractor_uuid";
  @SerializedName(SERIALIZED_NAME_CONTRACTOR_UUID)
  private String contractorUuid;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  /**
   * Gets or Sets paymentMethod
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
 public enum PaymentMethodEnum {
    DIRECT_DEPOSIT("Direct Deposit"),
    
    CHECK("Check"),
    
    HISTORICAL_PAYMENT("Historical Payment");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod = PaymentMethodEnum.DIRECT_DEPOSIT;

  public static final String SERIALIZED_NAME_WAGE = "wage";
  @SerializedName(SERIALIZED_NAME_WAGE)
  private Double wage;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Double hours;

  public static final String SERIALIZED_NAME_BONUS = "bonus";
  @SerializedName(SERIALIZED_NAME_BONUS)
  private Double bonus;

  public static final String SERIALIZED_NAME_REIMBURSEMENT = "reimbursement";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT)
  private Double reimbursement;

  public ContractorPaymentsCreatePaymentRequest() {
  }

  public ContractorPaymentsCreatePaymentRequest contractorUuid(String contractorUuid) {
    
    
    
    
    this.contractorUuid = contractorUuid;
    return this;
  }

   /**
   * The contractor receiving the payment
   * @return contractorUuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The contractor receiving the payment")

  public String getContractorUuid() {
    return contractorUuid;
  }


  public void setContractorUuid(String contractorUuid) {
    
    
    
    this.contractorUuid = contractorUuid;
  }


  public ContractorPaymentsCreatePaymentRequest date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * The contractor receiving the payment
   * @return date
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Tue Dec 31 16:00:00 PST 2019", required = true, value = "The contractor receiving the payment")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public ContractorPaymentsCreatePaymentRequest paymentMethod(PaymentMethodEnum paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DIRECT_DEPOSIT", value = "")

  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }


  public ContractorPaymentsCreatePaymentRequest wage(Double wage) {
    
    
    
    
    this.wage = wage;
    return this;
  }

  public ContractorPaymentsCreatePaymentRequest wage(Integer wage) {
    
    
    
    
    this.wage = wage.doubleValue();
    return this;
  }

   /**
   * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
   * @return wage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5000", value = "If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked")

  public Double getWage() {
    return wage;
  }


  public void setWage(Double wage) {
    
    
    
    this.wage = wage;
  }


  public ContractorPaymentsCreatePaymentRequest hours(Double hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

  public ContractorPaymentsCreatePaymentRequest hours(Integer hours) {
    
    
    
    
    this.hours = hours.doubleValue();
    return this;
  }

   /**
   * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40", value = "If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment")

  public Double getHours() {
    return hours;
  }


  public void setHours(Double hours) {
    
    
    
    this.hours = hours;
  }


  public ContractorPaymentsCreatePaymentRequest bonus(Double bonus) {
    
    
    
    
    this.bonus = bonus;
    return this;
  }

  public ContractorPaymentsCreatePaymentRequest bonus(Integer bonus) {
    
    
    
    
    this.bonus = bonus.doubleValue();
    return this;
  }

   /**
   * If the contractor is on an hourly wage, this is the bonus the contractor earned
   * @return bonus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "500", value = "If the contractor is on an hourly wage, this is the bonus the contractor earned")

  public Double getBonus() {
    return bonus;
  }


  public void setBonus(Double bonus) {
    
    
    
    this.bonus = bonus;
  }


  public ContractorPaymentsCreatePaymentRequest reimbursement(Double reimbursement) {
    
    
    
    
    this.reimbursement = reimbursement;
    return this;
  }

  public ContractorPaymentsCreatePaymentRequest reimbursement(Integer reimbursement) {
    
    
    
    
    this.reimbursement = reimbursement.doubleValue();
    return this;
  }

   /**
   * Reimbursed wages for the contractor
   * @return reimbursement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "Reimbursed wages for the contractor")

  public Double getReimbursement() {
    return reimbursement;
  }


  public void setReimbursement(Double reimbursement) {
    
    
    
    this.reimbursement = reimbursement;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContractorPaymentsCreatePaymentRequest instance itself
   */
  public ContractorPaymentsCreatePaymentRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest = (ContractorPaymentsCreatePaymentRequest) o;
    return Objects.equals(this.contractorUuid, contractorPaymentsCreatePaymentRequest.contractorUuid) &&
        Objects.equals(this.date, contractorPaymentsCreatePaymentRequest.date) &&
        Objects.equals(this.paymentMethod, contractorPaymentsCreatePaymentRequest.paymentMethod) &&
        Objects.equals(this.wage, contractorPaymentsCreatePaymentRequest.wage) &&
        Objects.equals(this.hours, contractorPaymentsCreatePaymentRequest.hours) &&
        Objects.equals(this.bonus, contractorPaymentsCreatePaymentRequest.bonus) &&
        Objects.equals(this.reimbursement, contractorPaymentsCreatePaymentRequest.reimbursement)&&
        Objects.equals(this.additionalProperties, contractorPaymentsCreatePaymentRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractorUuid, date, paymentMethod, wage, hours, bonus, reimbursement, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractorPaymentsCreatePaymentRequest {\n");
    sb.append("    contractorUuid: ").append(toIndentedString(contractorUuid)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    wage: ").append(toIndentedString(wage)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    bonus: ").append(toIndentedString(bonus)).append("\n");
    sb.append("    reimbursement: ").append(toIndentedString(reimbursement)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractor_uuid");
    openapiFields.add("date");
    openapiFields.add("payment_method");
    openapiFields.add("wage");
    openapiFields.add("hours");
    openapiFields.add("bonus");
    openapiFields.add("reimbursement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractor_uuid");
    openapiRequiredFields.add("date");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContractorPaymentsCreatePaymentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContractorPaymentsCreatePaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractorPaymentsCreatePaymentRequest is not found in the empty JSON string", ContractorPaymentsCreatePaymentRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContractorPaymentsCreatePaymentRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("contractor_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractor_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractor_uuid").toString()));
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractorPaymentsCreatePaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractorPaymentsCreatePaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractorPaymentsCreatePaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractorPaymentsCreatePaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractorPaymentsCreatePaymentRequest>() {
           @Override
           public void write(JsonWriter out, ContractorPaymentsCreatePaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractorPaymentsCreatePaymentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContractorPaymentsCreatePaymentRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContractorPaymentsCreatePaymentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContractorPaymentsCreatePaymentRequest
  * @throws IOException if the JSON string is invalid with respect to ContractorPaymentsCreatePaymentRequest
  */
  public static ContractorPaymentsCreatePaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractorPaymentsCreatePaymentRequest.class);
  }

 /**
  * Convert an instance of ContractorPaymentsCreatePaymentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

