/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FederalTaxDetailsUpdateAttributesRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FederalTaxDetailsUpdateAttributesRequest {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legal_name";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_EIN = "ein";
  @SerializedName(SERIALIZED_NAME_EIN)
  private String ein;

  /**
   * What type of tax entity the company is
   */
  @JsonAdapter(TaxPayerTypeEnum.Adapter.class)
 public enum TaxPayerTypeEnum {
    C_CORPORATION("C-Corporation"),
    
    S_CORPORATION("S-Corporation"),
    
    SOLE_PROPRIETOR("Sole proprietor"),
    
    LLC("LLC"),
    
    LLP("LLP"),
    
    LIMITED_PARTNERSHIP("Limited partnership"),
    
    CO_OWNERSHIP("Co-ownership"),
    
    ASSOCIATION("Association"),
    
    TRUSTEESHIP("Trusteeship"),
    
    GENERAL_PARTNERSHIP("General partnership"),
    
    JOINT_VENTURE("Joint venture"),
    
    NON_PROFIT("Non-Profit");

    private String value;

    TaxPayerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxPayerTypeEnum fromValue(String value) {
      for (TaxPayerTypeEnum b : TaxPayerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxPayerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxPayerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxPayerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxPayerTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TAX_PAYER_TYPE = "tax_payer_type";
  @SerializedName(SERIALIZED_NAME_TAX_PAYER_TYPE)
  private TaxPayerTypeEnum taxPayerType;

  public static final String SERIALIZED_NAME_FILING_FORM = "filing_form";
  @SerializedName(SERIALIZED_NAME_FILING_FORM)
  private String filingForm;

  public static final String SERIALIZED_NAME_TAXABLE_AS_SCORP = "taxable_as_scorp";
  @SerializedName(SERIALIZED_NAME_TAXABLE_AS_SCORP)
  private Boolean taxableAsScorp;

  public FederalTaxDetailsUpdateAttributesRequest() {
  }

  public FederalTaxDetailsUpdateAttributesRequest version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public FederalTaxDetailsUpdateAttributesRequest legalName(String legalName) {
    
    
    
    
    this.legalName = legalName;
    return this;
  }

   /**
   * The legal name of the company
   * @return legalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The legal name of the company")

  public String getLegalName() {
    return legalName;
  }


  public void setLegalName(String legalName) {
    
    
    
    this.legalName = legalName;
  }


  public FederalTaxDetailsUpdateAttributesRequest ein(String ein) {
    
    
    
    
    this.ein = ein;
    return this;
  }

   /**
   * The EIN of of the company
   * @return ein
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The EIN of of the company")

  public String getEin() {
    return ein;
  }


  public void setEin(String ein) {
    
    
    
    this.ein = ein;
  }


  public FederalTaxDetailsUpdateAttributesRequest taxPayerType(TaxPayerTypeEnum taxPayerType) {
    
    
    
    
    this.taxPayerType = taxPayerType;
    return this;
  }

   /**
   * What type of tax entity the company is
   * @return taxPayerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "What type of tax entity the company is")

  public TaxPayerTypeEnum getTaxPayerType() {
    return taxPayerType;
  }


  public void setTaxPayerType(TaxPayerTypeEnum taxPayerType) {
    
    
    
    this.taxPayerType = taxPayerType;
  }


  public FederalTaxDetailsUpdateAttributesRequest filingForm(String filingForm) {
    
    
    
    
    this.filingForm = filingForm;
    return this;
  }

   /**
   * The form used by the company for federal tax filing. One of: - 941 (Quarterly federal tax return) - 944 (Annual federal tax return)
   * @return filingForm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The form used by the company for federal tax filing. One of: - 941 (Quarterly federal tax return) - 944 (Annual federal tax return)")

  public String getFilingForm() {
    return filingForm;
  }


  public void setFilingForm(String filingForm) {
    
    
    
    this.filingForm = filingForm;
  }


  public FederalTaxDetailsUpdateAttributesRequest taxableAsScorp(Boolean taxableAsScorp) {
    
    
    
    
    this.taxableAsScorp = taxableAsScorp;
    return this;
  }

   /**
   * Whether this company should be taxed as an S-Corporation
   * @return taxableAsScorp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this company should be taxed as an S-Corporation")

  public Boolean getTaxableAsScorp() {
    return taxableAsScorp;
  }


  public void setTaxableAsScorp(Boolean taxableAsScorp) {
    
    
    
    this.taxableAsScorp = taxableAsScorp;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FederalTaxDetailsUpdateAttributesRequest instance itself
   */
  public FederalTaxDetailsUpdateAttributesRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest = (FederalTaxDetailsUpdateAttributesRequest) o;
    return Objects.equals(this.version, federalTaxDetailsUpdateAttributesRequest.version) &&
        Objects.equals(this.legalName, federalTaxDetailsUpdateAttributesRequest.legalName) &&
        Objects.equals(this.ein, federalTaxDetailsUpdateAttributesRequest.ein) &&
        Objects.equals(this.taxPayerType, federalTaxDetailsUpdateAttributesRequest.taxPayerType) &&
        Objects.equals(this.filingForm, federalTaxDetailsUpdateAttributesRequest.filingForm) &&
        Objects.equals(this.taxableAsScorp, federalTaxDetailsUpdateAttributesRequest.taxableAsScorp)&&
        Objects.equals(this.additionalProperties, federalTaxDetailsUpdateAttributesRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, legalName, ein, taxPayerType, filingForm, taxableAsScorp, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FederalTaxDetailsUpdateAttributesRequest {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    ein: ").append(toIndentedString(ein)).append("\n");
    sb.append("    taxPayerType: ").append(toIndentedString(taxPayerType)).append("\n");
    sb.append("    filingForm: ").append(toIndentedString(filingForm)).append("\n");
    sb.append("    taxableAsScorp: ").append(toIndentedString(taxableAsScorp)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("legal_name");
    openapiFields.add("ein");
    openapiFields.add("tax_payer_type");
    openapiFields.add("filing_form");
    openapiFields.add("taxable_as_scorp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FederalTaxDetailsUpdateAttributesRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FederalTaxDetailsUpdateAttributesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FederalTaxDetailsUpdateAttributesRequest is not found in the empty JSON string", FederalTaxDetailsUpdateAttributesRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FederalTaxDetailsUpdateAttributesRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("legal_name") != null && !jsonObj.get("legal_name").isJsonNull()) && !jsonObj.get("legal_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_name").toString()));
      }
      if ((jsonObj.get("ein") != null && !jsonObj.get("ein").isJsonNull()) && !jsonObj.get("ein").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ein` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ein").toString()));
      }
      if ((jsonObj.get("tax_payer_type") != null && !jsonObj.get("tax_payer_type").isJsonNull()) && !jsonObj.get("tax_payer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_payer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_payer_type").toString()));
      }
      if ((jsonObj.get("filing_form") != null && !jsonObj.get("filing_form").isJsonNull()) && !jsonObj.get("filing_form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_form").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FederalTaxDetailsUpdateAttributesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FederalTaxDetailsUpdateAttributesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FederalTaxDetailsUpdateAttributesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FederalTaxDetailsUpdateAttributesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FederalTaxDetailsUpdateAttributesRequest>() {
           @Override
           public void write(JsonWriter out, FederalTaxDetailsUpdateAttributesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FederalTaxDetailsUpdateAttributesRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FederalTaxDetailsUpdateAttributesRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FederalTaxDetailsUpdateAttributesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FederalTaxDetailsUpdateAttributesRequest
  * @throws IOException if the JSON string is invalid with respect to FederalTaxDetailsUpdateAttributesRequest
  */
  public static FederalTaxDetailsUpdateAttributesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FederalTaxDetailsUpdateAttributesRequest.class);
  }

 /**
  * Convert an instance of FederalTaxDetailsUpdateAttributesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

