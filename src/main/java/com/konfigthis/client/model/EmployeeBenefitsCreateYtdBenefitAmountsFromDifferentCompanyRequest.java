/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest {
  public static final String SERIALIZED_NAME_BENEFIT_TYPE = "benefit_type";
  @SerializedName(SERIALIZED_NAME_BENEFIT_TYPE)
  private Double benefitType;

  public static final String SERIALIZED_NAME_TAX_YEAR = "tax_year";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Double taxYear;

  public static final String SERIALIZED_NAME_YTD_EMPLOYEE_DEDUCTION_AMOUNT = "ytd_employee_deduction_amount";
  @SerializedName(SERIALIZED_NAME_YTD_EMPLOYEE_DEDUCTION_AMOUNT)
  private String ytdEmployeeDeductionAmount = "0.00";

  public static final String SERIALIZED_NAME_YTD_COMPANY_CONTRIBUTION_AMOUNT = "ytd_company_contribution_amount";
  @SerializedName(SERIALIZED_NAME_YTD_COMPANY_CONTRIBUTION_AMOUNT)
  private String ytdCompanyContributionAmount = "0.00";

  public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest() {
  }

  public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest benefitType(Double benefitType) {
    
    
    
    
    this.benefitType = benefitType;
    return this;
  }

  public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest benefitType(Integer benefitType) {
    
    
    
    
    this.benefitType = benefitType.doubleValue();
    return this;
  }

   /**
   * The benefit type supported by Gusto.
   * @return benefitType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The benefit type supported by Gusto.")

  public Double getBenefitType() {
    return benefitType;
  }


  public void setBenefitType(Double benefitType) {
    
    
    
    this.benefitType = benefitType;
  }


  public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest taxYear(Double taxYear) {
    if (taxYear != null && taxYear < 2000) {
      throw new IllegalArgumentException("Invalid value for taxYear. Must be greater than or equal to 2000.");
    }
    if (taxYear != null && taxYear > 2999) {
      throw new IllegalArgumentException("Invalid value for taxYear. Must be less than or equal to 2999.");
    }
    
    
    this.taxYear = taxYear;
    return this;
  }

  public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest taxYear(Integer taxYear) {
    if (taxYear != null && taxYear < 2000) {
      throw new IllegalArgumentException("Invalid value for taxYear. Must be greater than or equal to 2000.");
    }
    if (taxYear != null && taxYear > 2999) {
      throw new IllegalArgumentException("Invalid value for taxYear. Must be less than or equal to 2999.");
    }
    
    
    this.taxYear = taxYear.doubleValue();
    return this;
  }

   /**
   * The tax year for which this amount applies.
   * minimum: 2000
   * maximum: 2999
   * @return taxYear
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The tax year for which this amount applies.")

  public Double getTaxYear() {
    return taxYear;
  }


  public void setTaxYear(Double taxYear) {
    if (taxYear != null && taxYear < 2000) {
      throw new IllegalArgumentException("Invalid value for taxYear. Must be greater than or equal to 2000.");
    }
    if (taxYear != null && taxYear > 2999) {
      throw new IllegalArgumentException("Invalid value for taxYear. Must be less than or equal to 2999.");
    }
    
    this.taxYear = taxYear;
  }


  public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest ytdEmployeeDeductionAmount(String ytdEmployeeDeductionAmount) {
    
    
    
    
    this.ytdEmployeeDeductionAmount = ytdEmployeeDeductionAmount;
    return this;
  }

   /**
   * The year-to-date employee deduction made outside the current company.
   * @return ytdEmployeeDeductionAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.00", required = true, value = "The year-to-date employee deduction made outside the current company.")

  public String getYtdEmployeeDeductionAmount() {
    return ytdEmployeeDeductionAmount;
  }


  public void setYtdEmployeeDeductionAmount(String ytdEmployeeDeductionAmount) {
    
    
    
    this.ytdEmployeeDeductionAmount = ytdEmployeeDeductionAmount;
  }


  public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest ytdCompanyContributionAmount(String ytdCompanyContributionAmount) {
    
    
    
    
    this.ytdCompanyContributionAmount = ytdCompanyContributionAmount;
    return this;
  }

   /**
   * The year-to-date company contribution made outside the current company.
   * @return ytdCompanyContributionAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.00", required = true, value = "The year-to-date company contribution made outside the current company.")

  public String getYtdCompanyContributionAmount() {
    return ytdCompanyContributionAmount;
  }


  public void setYtdCompanyContributionAmount(String ytdCompanyContributionAmount) {
    
    
    
    this.ytdCompanyContributionAmount = ytdCompanyContributionAmount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest instance itself
   */
  public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest = (EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest) o;
    return Objects.equals(this.benefitType, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.benefitType) &&
        Objects.equals(this.taxYear, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.taxYear) &&
        Objects.equals(this.ytdEmployeeDeductionAmount, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.ytdEmployeeDeductionAmount) &&
        Objects.equals(this.ytdCompanyContributionAmount, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.ytdCompanyContributionAmount)&&
        Objects.equals(this.additionalProperties, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benefitType, taxYear, ytdEmployeeDeductionAmount, ytdCompanyContributionAmount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest {\n");
    sb.append("    benefitType: ").append(toIndentedString(benefitType)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("    ytdEmployeeDeductionAmount: ").append(toIndentedString(ytdEmployeeDeductionAmount)).append("\n");
    sb.append("    ytdCompanyContributionAmount: ").append(toIndentedString(ytdCompanyContributionAmount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benefit_type");
    openapiFields.add("tax_year");
    openapiFields.add("ytd_employee_deduction_amount");
    openapiFields.add("ytd_company_contribution_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tax_year");
    openapiRequiredFields.add("ytd_employee_deduction_amount");
    openapiRequiredFields.add("ytd_company_contribution_amount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest is not found in the empty JSON string", EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("ytd_employee_deduction_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ytd_employee_deduction_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ytd_employee_deduction_amount").toString()));
      }
      if (!jsonObj.get("ytd_company_contribution_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ytd_company_contribution_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ytd_company_contribution_amount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest>() {
           @Override
           public void write(JsonWriter out, EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest
  * @throws IOException if the JSON string is invalid with respect to EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest
  */
  public static EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.class);
  }

 /**
  * Convert an instance of EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

