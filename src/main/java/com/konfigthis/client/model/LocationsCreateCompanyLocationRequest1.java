/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LocationsCreateCompanyLocationRequest1 {
  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_STREET1 = "street_1";
  @SerializedName(SERIALIZED_NAME_STREET1)
  private String street1;

  public static final String SERIALIZED_NAME_STREET2 = "street_2";
  @SerializedName(SERIALIZED_NAME_STREET2)
  private String street2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public LocationsCreateCompanyLocationRequest1() {
  }

  public LocationsCreateCompanyLocationRequest1 phoneNumber(String phoneNumber) {
    
    
    if (phoneNumber != null && phoneNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for phoneNumber. Length must be greater than or equal to 1.");
    }
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    
    
    if (phoneNumber != null && phoneNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for phoneNumber. Length must be greater than or equal to 1.");
    }
    this.phoneNumber = phoneNumber;
  }


  public LocationsCreateCompanyLocationRequest1 street1(String street1) {
    
    
    if (street1 != null && street1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for street1. Length must be greater than or equal to 1.");
    }
    
    this.street1 = street1;
    return this;
  }

   /**
   * Get street1
   * @return street1
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStreet1() {
    return street1;
  }


  public void setStreet1(String street1) {
    
    
    if (street1 != null && street1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for street1. Length must be greater than or equal to 1.");
    }
    this.street1 = street1;
  }


  public LocationsCreateCompanyLocationRequest1 street2(String street2) {
    
    
    if (street2 != null && street2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for street2. Length must be greater than or equal to 1.");
    }
    
    this.street2 = street2;
    return this;
  }

   /**
   * Get street2
   * @return street2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getStreet2() {
    return street2;
  }


  public void setStreet2(String street2) {
    
    
    if (street2 != null && street2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for street2. Length must be greater than or equal to 1.");
    }
    this.street2 = street2;
  }


  public LocationsCreateCompanyLocationRequest1 city(String city) {
    
    
    if (city != null && city.length() < 1) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 1.");
    }
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    if (city != null && city.length() < 1) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 1.");
    }
    this.city = city;
  }


  public LocationsCreateCompanyLocationRequest1 state(String state) {
    
    
    if (state != null && state.length() < 1) {
      throw new IllegalArgumentException("Invalid value for state. Length must be greater than or equal to 1.");
    }
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    if (state != null && state.length() < 1) {
      throw new IllegalArgumentException("Invalid value for state. Length must be greater than or equal to 1.");
    }
    this.state = state;
  }


  public LocationsCreateCompanyLocationRequest1 zip(String zip) {
    
    
    if (zip != null && zip.length() < 1) {
      throw new IllegalArgumentException("Invalid value for zip. Length must be greater than or equal to 1.");
    }
    
    this.zip = zip;
    return this;
  }

   /**
   * Get zip
   * @return zip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    if (zip != null && zip.length() < 1) {
      throw new IllegalArgumentException("Invalid value for zip. Length must be greater than or equal to 1.");
    }
    this.zip = zip;
  }


  public LocationsCreateCompanyLocationRequest1 country(String country) {
    
    
    if (country != null && country.length() < 1) {
      throw new IllegalArgumentException("Invalid value for country. Length must be greater than or equal to 1.");
    }
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    if (country != null && country.length() < 1) {
      throw new IllegalArgumentException("Invalid value for country. Length must be greater than or equal to 1.");
    }
    this.country = country;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LocationsCreateCompanyLocationRequest1 instance itself
   */
  public LocationsCreateCompanyLocationRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationsCreateCompanyLocationRequest1 locationsCreateCompanyLocationRequest1 = (LocationsCreateCompanyLocationRequest1) o;
    return Objects.equals(this.phoneNumber, locationsCreateCompanyLocationRequest1.phoneNumber) &&
        Objects.equals(this.street1, locationsCreateCompanyLocationRequest1.street1) &&
        Objects.equals(this.street2, locationsCreateCompanyLocationRequest1.street2) &&
        Objects.equals(this.city, locationsCreateCompanyLocationRequest1.city) &&
        Objects.equals(this.state, locationsCreateCompanyLocationRequest1.state) &&
        Objects.equals(this.zip, locationsCreateCompanyLocationRequest1.zip) &&
        Objects.equals(this.country, locationsCreateCompanyLocationRequest1.country)&&
        Objects.equals(this.additionalProperties, locationsCreateCompanyLocationRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNumber, street1, street2, city, state, zip, country, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationsCreateCompanyLocationRequest1 {\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phone_number");
    openapiFields.add("street_1");
    openapiFields.add("street_2");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("zip");
    openapiFields.add("country");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("phone_number");
    openapiRequiredFields.add("street_1");
    openapiRequiredFields.add("street_2");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("zip");
    openapiRequiredFields.add("country");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LocationsCreateCompanyLocationRequest1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LocationsCreateCompanyLocationRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationsCreateCompanyLocationRequest1 is not found in the empty JSON string", LocationsCreateCompanyLocationRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LocationsCreateCompanyLocationRequest1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if (!jsonObj.get("street_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_1").toString()));
      }
      if (!jsonObj.get("street_2").isJsonNull() && !jsonObj.get("street_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_2").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationsCreateCompanyLocationRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationsCreateCompanyLocationRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationsCreateCompanyLocationRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationsCreateCompanyLocationRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationsCreateCompanyLocationRequest1>() {
           @Override
           public void write(JsonWriter out, LocationsCreateCompanyLocationRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationsCreateCompanyLocationRequest1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LocationsCreateCompanyLocationRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LocationsCreateCompanyLocationRequest1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LocationsCreateCompanyLocationRequest1
  * @throws IOException if the JSON string is invalid with respect to LocationsCreateCompanyLocationRequest1
  */
  public static LocationsCreateCompanyLocationRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationsCreateCompanyLocationRequest1.class);
  }

 /**
  * Convert an instance of LocationsCreateCompanyLocationRequest1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

