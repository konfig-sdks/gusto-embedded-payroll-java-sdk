/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Representation of a Time Off Activity
 */
@ApiModel(description = "Representation of a Time Off Activity")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffActivity {
  public static final String SERIALIZED_NAME_POLICY_UUID = "policy_uuid";
  @SerializedName(SERIALIZED_NAME_POLICY_UUID)
  private String policyUuid;

  /**
   * Type of the time off activity
   */
  @JsonAdapter(TimeOffTypeEnum.Adapter.class)
 public enum TimeOffTypeEnum {
    VACATION("vacation"),
    
    SICK("sick");

    private String value;

    TimeOffTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeOffTypeEnum fromValue(String value) {
      for (TimeOffTypeEnum b : TimeOffTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeOffTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeOffTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeOffTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeOffTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIME_OFF_TYPE = "time_off_type";
  @SerializedName(SERIALIZED_NAME_TIME_OFF_TYPE)
  private TimeOffTypeEnum timeOffType;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policy_name";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_EVENT_DESCRIPTION = "event_description";
  @SerializedName(SERIALIZED_NAME_EVENT_DESCRIPTION)
  private String eventDescription;

  public static final String SERIALIZED_NAME_EFFECTIVE_TIME = "effective_time";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_TIME)
  private String effectiveTime;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Float balance;

  public static final String SERIALIZED_NAME_BALANCE_CHANGE = "balance_change";
  @SerializedName(SERIALIZED_NAME_BALANCE_CHANGE)
  private Float balanceChange;

  public TimeOffActivity() {
  }

  public TimeOffActivity policyUuid(String policyUuid) {
    
    
    
    
    this.policyUuid = policyUuid;
    return this;
  }

   /**
   * unique identifier of a time off policy
   * @return policyUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a7838f74-4c29-4b70-9bfb-02a4e3e60709", value = "unique identifier of a time off policy")

  public String getPolicyUuid() {
    return policyUuid;
  }


  public void setPolicyUuid(String policyUuid) {
    
    
    
    this.policyUuid = policyUuid;
  }


  public TimeOffActivity timeOffType(TimeOffTypeEnum timeOffType) {
    
    
    
    
    this.timeOffType = timeOffType;
    return this;
  }

   /**
   * Type of the time off activity
   * @return timeOffType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "VACATION", value = "Type of the time off activity")

  public TimeOffTypeEnum getTimeOffType() {
    return timeOffType;
  }


  public void setTimeOffType(TimeOffTypeEnum timeOffType) {
    
    
    
    this.timeOffType = timeOffType;
  }


  public TimeOffActivity policyName(String policyName) {
    
    
    
    
    this.policyName = policyName;
    return this;
  }

   /**
   * The name of the time off policy for this activity
   * @return policyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Paid Time Off", value = "The name of the time off policy for this activity")

  public String getPolicyName() {
    return policyName;
  }


  public void setPolicyName(String policyName) {
    
    
    
    this.policyName = policyName;
  }


  public TimeOffActivity eventType(String eventType) {
    
    
    
    
    this.eventType = eventType;
    return this;
  }

   /**
   * The type of the time off event/activity
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TimeOffEvent::AddToPolicy", value = "The type of the time off event/activity")

  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    
    
    
    this.eventType = eventType;
  }


  public TimeOffActivity eventDescription(String eventDescription) {
    
    
    
    
    this.eventDescription = eventDescription;
    return this;
  }

   /**
   * A description for the time off event/activity
   * @return eventDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Added to policy: Vacation Per Hour Worked", value = "A description for the time off event/activity")

  public String getEventDescription() {
    return eventDescription;
  }


  public void setEventDescription(String eventDescription) {
    
    
    
    this.eventDescription = eventDescription;
  }


  public TimeOffActivity effectiveTime(String effectiveTime) {
    
    
    
    
    this.effectiveTime = effectiveTime;
    return this;
  }

   /**
   * The datetime of the time off activity
   * @return effectiveTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-09-27T13:43:03.000-07:00", value = "The datetime of the time off activity")

  public String getEffectiveTime() {
    return effectiveTime;
  }


  public void setEffectiveTime(String effectiveTime) {
    
    
    
    this.effectiveTime = effectiveTime;
  }


  public TimeOffActivity balance(Float balance) {
    
    
    
    
    this.balance = balance;
    return this;
  }

   /**
   * The time off balance at the time of the activity
   * @return balance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.0", value = "The time off balance at the time of the activity")

  public Float getBalance() {
    return balance;
  }


  public void setBalance(Float balance) {
    
    
    
    this.balance = balance;
  }


  public TimeOffActivity balanceChange(Float balanceChange) {
    
    
    
    
    this.balanceChange = balanceChange;
    return this;
  }

   /**
   * The amount the time off balance changed as a result of the activity
   * @return balanceChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.0", value = "The amount the time off balance changed as a result of the activity")

  public Float getBalanceChange() {
    return balanceChange;
  }


  public void setBalanceChange(Float balanceChange) {
    
    
    
    this.balanceChange = balanceChange;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffActivity instance itself
   */
  public TimeOffActivity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffActivity timeOffActivity = (TimeOffActivity) o;
    return Objects.equals(this.policyUuid, timeOffActivity.policyUuid) &&
        Objects.equals(this.timeOffType, timeOffActivity.timeOffType) &&
        Objects.equals(this.policyName, timeOffActivity.policyName) &&
        Objects.equals(this.eventType, timeOffActivity.eventType) &&
        Objects.equals(this.eventDescription, timeOffActivity.eventDescription) &&
        Objects.equals(this.effectiveTime, timeOffActivity.effectiveTime) &&
        Objects.equals(this.balance, timeOffActivity.balance) &&
        Objects.equals(this.balanceChange, timeOffActivity.balanceChange)&&
        Objects.equals(this.additionalProperties, timeOffActivity.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyUuid, timeOffType, policyName, eventType, eventDescription, effectiveTime, balance, balanceChange, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffActivity {\n");
    sb.append("    policyUuid: ").append(toIndentedString(policyUuid)).append("\n");
    sb.append("    timeOffType: ").append(toIndentedString(timeOffType)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
    sb.append("    effectiveTime: ").append(toIndentedString(effectiveTime)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    balanceChange: ").append(toIndentedString(balanceChange)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policy_uuid");
    openapiFields.add("time_off_type");
    openapiFields.add("policy_name");
    openapiFields.add("event_type");
    openapiFields.add("event_description");
    openapiFields.add("effective_time");
    openapiFields.add("balance");
    openapiFields.add("balance_change");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffActivity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffActivity is not found in the empty JSON string", TimeOffActivity.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("policy_uuid") != null && !jsonObj.get("policy_uuid").isJsonNull()) && !jsonObj.get("policy_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_uuid").toString()));
      }
      if ((jsonObj.get("time_off_type") != null && !jsonObj.get("time_off_type").isJsonNull()) && !jsonObj.get("time_off_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_off_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_off_type").toString()));
      }
      if ((jsonObj.get("policy_name") != null && !jsonObj.get("policy_name").isJsonNull()) && !jsonObj.get("policy_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_name").toString()));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if ((jsonObj.get("event_description") != null && !jsonObj.get("event_description").isJsonNull()) && !jsonObj.get("event_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_description").toString()));
      }
      if ((jsonObj.get("effective_time") != null && !jsonObj.get("effective_time").isJsonNull()) && !jsonObj.get("effective_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effective_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effective_time").toString()));
      }
      if ((jsonObj.get("balance") != null && !jsonObj.get("balance").isJsonNull()) && !jsonObj.get("balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balance").toString()));
      }
      if ((jsonObj.get("balance_change") != null && !jsonObj.get("balance_change").isJsonNull()) && !jsonObj.get("balance_change").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balance_change` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balance_change").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffActivity>() {
           @Override
           public void write(JsonWriter out, TimeOffActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffActivity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffActivity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffActivity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffActivity
  * @throws IOException if the JSON string is invalid with respect to TimeOffActivity
  */
  public static TimeOffActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffActivity.class);
  }

 /**
  * Convert an instance of TimeOffActivity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

