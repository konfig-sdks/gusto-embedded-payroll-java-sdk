/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeeBenefitsUpdateBenefitRecordRequestContribution;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeBenefitsUpdateBenefitRecordRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeBenefitsUpdateBenefitRecordRequest {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_EMPLOYEE_DEDUCTION = "employee_deduction";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_DEDUCTION)
  private String employeeDeduction = "0.00";

  public static final String SERIALIZED_NAME_DEDUCT_AS_PERCENTAGE = "deduct_as_percentage";
  @SerializedName(SERIALIZED_NAME_DEDUCT_AS_PERCENTAGE)
  private Boolean deductAsPercentage;

  public static final String SERIALIZED_NAME_EMPLOYEE_DEDUCTION_ANNUAL_MAXIMUM = "employee_deduction_annual_maximum";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_DEDUCTION_ANNUAL_MAXIMUM)
  private String employeeDeductionAnnualMaximum;

  public static final String SERIALIZED_NAME_CONTRIBUTION = "contribution";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION)
  private EmployeeBenefitsUpdateBenefitRecordRequestContribution contribution;

  public static final String SERIALIZED_NAME_ELECTIVE = "elective";
  @SerializedName(SERIALIZED_NAME_ELECTIVE)
  private Boolean elective = false;

  public static final String SERIALIZED_NAME_COMPANY_CONTRIBUTION_ANNUAL_MAXIMUM = "company_contribution_annual_maximum";
  @SerializedName(SERIALIZED_NAME_COMPANY_CONTRIBUTION_ANNUAL_MAXIMUM)
  private String companyContributionAnnualMaximum;

  public static final String SERIALIZED_NAME_LIMIT_OPTION = "limit_option";
  @SerializedName(SERIALIZED_NAME_LIMIT_OPTION)
  private String limitOption;

  public static final String SERIALIZED_NAME_CATCH_UP = "catch_up";
  @SerializedName(SERIALIZED_NAME_CATCH_UP)
  private Boolean catchUp = false;

  public static final String SERIALIZED_NAME_COVERAGE_AMOUNT = "coverage_amount";
  @SerializedName(SERIALIZED_NAME_COVERAGE_AMOUNT)
  private String coverageAmount;

  /**
   * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not \&quot;unset\&quot;, coverage amount and coverage salary multiplier are ignored.
   */
  @JsonAdapter(DeductionReducesTaxableIncomeEnum.Adapter.class)
 public enum DeductionReducesTaxableIncomeEnum {
    UNSET("unset"),
    
    REDUCES_TAXABLE_INCOME("reduces_taxable_income"),
    
    DOES_NOT_REDUCE_TAXABLE_INCOME("does_not_reduce_taxable_income"),
    
    NULL("null");

    private String value;

    DeductionReducesTaxableIncomeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeductionReducesTaxableIncomeEnum fromValue(String value) {
      for (DeductionReducesTaxableIncomeEnum b : DeductionReducesTaxableIncomeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DeductionReducesTaxableIncomeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeductionReducesTaxableIncomeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeductionReducesTaxableIncomeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeductionReducesTaxableIncomeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEDUCTION_REDUCES_TAXABLE_INCOME = "deduction_reduces_taxable_income";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_REDUCES_TAXABLE_INCOME)
  private DeductionReducesTaxableIncomeEnum deductionReducesTaxableIncome = DeductionReducesTaxableIncomeEnum.UNSET;

  public static final String SERIALIZED_NAME_COVERAGE_SALARY_MULTIPLIER = "coverage_salary_multiplier";
  @SerializedName(SERIALIZED_NAME_COVERAGE_SALARY_MULTIPLIER)
  private String coverageSalaryMultiplier = "0.00";

  public static final String SERIALIZED_NAME_COMPANY_CONTRIBUTION = "company_contribution";
  @SerializedName(SERIALIZED_NAME_COMPANY_CONTRIBUTION)
  private String companyContribution = "0.00";

  public static final String SERIALIZED_NAME_CONTRIBUTE_AS_PERCENTAGE = "contribute_as_percentage";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTE_AS_PERCENTAGE)
  private Boolean contributeAsPercentage = false;

  public EmployeeBenefitsUpdateBenefitRecordRequest() {
  }

  public EmployeeBenefitsUpdateBenefitRecordRequest version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Whether the employee benefit is active.
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the employee benefit is active.")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest employeeDeduction(String employeeDeduction) {
    
    
    
    
    this.employeeDeduction = employeeDeduction;
    return this;
  }

   /**
   * The amount to be deducted, per pay period, from the employee&#39;s pay.
   * @return employeeDeduction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.00", value = "The amount to be deducted, per pay period, from the employee's pay.")

  public String getEmployeeDeduction() {
    return employeeDeduction;
  }


  public void setEmployeeDeduction(String employeeDeduction) {
    
    
    
    this.employeeDeduction = employeeDeduction;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest deductAsPercentage(Boolean deductAsPercentage) {
    
    
    
    
    this.deductAsPercentage = deductAsPercentage;
    return this;
  }

   /**
   * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
   * @return deductAsPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.")

  public Boolean getDeductAsPercentage() {
    return deductAsPercentage;
  }


  public void setDeductAsPercentage(Boolean deductAsPercentage) {
    
    
    
    this.deductAsPercentage = deductAsPercentage;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest employeeDeductionAnnualMaximum(String employeeDeductionAnnualMaximum) {
    
    
    
    
    this.employeeDeductionAnnualMaximum = employeeDeductionAnnualMaximum;
    return this;
  }

   /**
   * The maximum employee deduction amount per year. A null value signifies no limit.
   * @return employeeDeductionAnnualMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum employee deduction amount per year. A null value signifies no limit.")

  public String getEmployeeDeductionAnnualMaximum() {
    return employeeDeductionAnnualMaximum;
  }


  public void setEmployeeDeductionAnnualMaximum(String employeeDeductionAnnualMaximum) {
    
    
    
    this.employeeDeductionAnnualMaximum = employeeDeductionAnnualMaximum;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest contribution(EmployeeBenefitsUpdateBenefitRecordRequestContribution contribution) {
    
    
    
    
    this.contribution = contribution;
    return this;
  }

   /**
   * Get contribution
   * @return contribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeBenefitsUpdateBenefitRecordRequestContribution getContribution() {
    return contribution;
  }


  public void setContribution(EmployeeBenefitsUpdateBenefitRecordRequestContribution contribution) {
    
    
    
    this.contribution = contribution;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest elective(Boolean elective) {
    
    
    
    
    this.elective = elective;
    return this;
  }

   /**
   * Whether the company contribution is elective (aka \&quot;matching\&quot;). For &#x60;tiered&#x60;, &#x60;elective_amount&#x60;, and &#x60;elective_percentage&#x60; contribution types this is ignored and assumed to be &#x60;true&#x60;.
   * @return elective
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the company contribution is elective (aka \"matching\"). For `tiered`, `elective_amount`, and `elective_percentage` contribution types this is ignored and assumed to be `true`.")

  public Boolean getElective() {
    return elective;
  }


  public void setElective(Boolean elective) {
    
    
    
    this.elective = elective;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest companyContributionAnnualMaximum(String companyContributionAnnualMaximum) {
    
    
    
    
    this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
    return this;
  }

   /**
   * The maximum company contribution amount per year. A null value signifies no limit.
   * @return companyContributionAnnualMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum company contribution amount per year. A null value signifies no limit.")

  public String getCompanyContributionAnnualMaximum() {
    return companyContributionAnnualMaximum;
  }


  public void setCompanyContributionAnnualMaximum(String companyContributionAnnualMaximum) {
    
    
    
    this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest limitOption(String limitOption) {
    
    
    
    
    this.limitOption = limitOption;
    return this;
  }

   /**
   * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either \&quot;Family\&quot; or \&quot;Individual\&quot;. For a Dependent Care FSA benefit, the limit option should be either \&quot;Joint Filing or Single\&quot; or \&quot;Married and Filing Separately\&quot;.
   * @return limitOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either \"Family\" or \"Individual\". For a Dependent Care FSA benefit, the limit option should be either \"Joint Filing or Single\" or \"Married and Filing Separately\".")

  public String getLimitOption() {
    return limitOption;
  }


  public void setLimitOption(String limitOption) {
    
    
    
    this.limitOption = limitOption;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest catchUp(Boolean catchUp) {
    
    
    
    
    this.catchUp = catchUp;
    return this;
  }

   /**
   * Whether the employee should use a benefit’s \&quot;catch up\&quot; rate. Only Roth 401k and 401k benefits use this value for employees over 50.
   * @return catchUp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the employee should use a benefit’s \"catch up\" rate. Only Roth 401k and 401k benefits use this value for employees over 50.")

  public Boolean getCatchUp() {
    return catchUp;
  }


  public void setCatchUp(Boolean catchUp) {
    
    
    
    this.catchUp = catchUp;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest coverageAmount(String coverageAmount) {
    
    
    
    
    this.coverageAmount = coverageAmount;
    return this;
  }

   /**
   * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
   * @return coverageAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.")

  public String getCoverageAmount() {
    return coverageAmount;
  }


  public void setCoverageAmount(String coverageAmount) {
    
    
    
    this.coverageAmount = coverageAmount;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest deductionReducesTaxableIncome(DeductionReducesTaxableIncomeEnum deductionReducesTaxableIncome) {
    
    
    
    
    this.deductionReducesTaxableIncome = deductionReducesTaxableIncome;
    return this;
  }

   /**
   * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not \&quot;unset\&quot;, coverage amount and coverage salary multiplier are ignored.
   * @return deductionReducesTaxableIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UNSET", value = "Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not \"unset\", coverage amount and coverage salary multiplier are ignored.")

  public DeductionReducesTaxableIncomeEnum getDeductionReducesTaxableIncome() {
    return deductionReducesTaxableIncome;
  }


  public void setDeductionReducesTaxableIncome(DeductionReducesTaxableIncomeEnum deductionReducesTaxableIncome) {
    
    
    
    this.deductionReducesTaxableIncome = deductionReducesTaxableIncome;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest coverageSalaryMultiplier(String coverageSalaryMultiplier) {
    
    
    
    
    this.coverageSalaryMultiplier = coverageSalaryMultiplier;
    return this;
  }

   /**
   * The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
   * @return coverageSalaryMultiplier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.00", value = "The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.")

  public String getCoverageSalaryMultiplier() {
    return coverageSalaryMultiplier;
  }


  public void setCoverageSalaryMultiplier(String coverageSalaryMultiplier) {
    
    
    
    this.coverageSalaryMultiplier = coverageSalaryMultiplier;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest companyContribution(String companyContribution) {
    
    
    
    
    this.companyContribution = companyContribution;
    return this;
  }

   /**
   * The amount to be paid, per pay period, by the company.
   * @return companyContribution
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.00", value = "The amount to be paid, per pay period, by the company.")

  public String getCompanyContribution() {
    return companyContribution;
  }


  public void setCompanyContribution(String companyContribution) {
    
    
    
    this.companyContribution = companyContribution;
  }


  public EmployeeBenefitsUpdateBenefitRecordRequest contributeAsPercentage(Boolean contributeAsPercentage) {
    
    
    
    
    this.contributeAsPercentage = contributeAsPercentage;
    return this;
  }

   /**
   * Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.
   * @return contributeAsPercentage
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.")

  public Boolean getContributeAsPercentage() {
    return contributeAsPercentage;
  }


  public void setContributeAsPercentage(Boolean contributeAsPercentage) {
    
    
    
    this.contributeAsPercentage = contributeAsPercentage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeBenefitsUpdateBenefitRecordRequest instance itself
   */
  public EmployeeBenefitsUpdateBenefitRecordRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest = (EmployeeBenefitsUpdateBenefitRecordRequest) o;
    return Objects.equals(this.version, employeeBenefitsUpdateBenefitRecordRequest.version) &&
        Objects.equals(this.active, employeeBenefitsUpdateBenefitRecordRequest.active) &&
        Objects.equals(this.employeeDeduction, employeeBenefitsUpdateBenefitRecordRequest.employeeDeduction) &&
        Objects.equals(this.deductAsPercentage, employeeBenefitsUpdateBenefitRecordRequest.deductAsPercentage) &&
        Objects.equals(this.employeeDeductionAnnualMaximum, employeeBenefitsUpdateBenefitRecordRequest.employeeDeductionAnnualMaximum) &&
        Objects.equals(this.contribution, employeeBenefitsUpdateBenefitRecordRequest.contribution) &&
        Objects.equals(this.elective, employeeBenefitsUpdateBenefitRecordRequest.elective) &&
        Objects.equals(this.companyContributionAnnualMaximum, employeeBenefitsUpdateBenefitRecordRequest.companyContributionAnnualMaximum) &&
        Objects.equals(this.limitOption, employeeBenefitsUpdateBenefitRecordRequest.limitOption) &&
        Objects.equals(this.catchUp, employeeBenefitsUpdateBenefitRecordRequest.catchUp) &&
        Objects.equals(this.coverageAmount, employeeBenefitsUpdateBenefitRecordRequest.coverageAmount) &&
        Objects.equals(this.deductionReducesTaxableIncome, employeeBenefitsUpdateBenefitRecordRequest.deductionReducesTaxableIncome) &&
        Objects.equals(this.coverageSalaryMultiplier, employeeBenefitsUpdateBenefitRecordRequest.coverageSalaryMultiplier) &&
        Objects.equals(this.companyContribution, employeeBenefitsUpdateBenefitRecordRequest.companyContribution) &&
        Objects.equals(this.contributeAsPercentage, employeeBenefitsUpdateBenefitRecordRequest.contributeAsPercentage)&&
        Objects.equals(this.additionalProperties, employeeBenefitsUpdateBenefitRecordRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, active, employeeDeduction, deductAsPercentage, employeeDeductionAnnualMaximum, contribution, elective, companyContributionAnnualMaximum, limitOption, catchUp, coverageAmount, deductionReducesTaxableIncome, coverageSalaryMultiplier, companyContribution, contributeAsPercentage, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeBenefitsUpdateBenefitRecordRequest {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    employeeDeduction: ").append(toIndentedString(employeeDeduction)).append("\n");
    sb.append("    deductAsPercentage: ").append(toIndentedString(deductAsPercentage)).append("\n");
    sb.append("    employeeDeductionAnnualMaximum: ").append(toIndentedString(employeeDeductionAnnualMaximum)).append("\n");
    sb.append("    contribution: ").append(toIndentedString(contribution)).append("\n");
    sb.append("    elective: ").append(toIndentedString(elective)).append("\n");
    sb.append("    companyContributionAnnualMaximum: ").append(toIndentedString(companyContributionAnnualMaximum)).append("\n");
    sb.append("    limitOption: ").append(toIndentedString(limitOption)).append("\n");
    sb.append("    catchUp: ").append(toIndentedString(catchUp)).append("\n");
    sb.append("    coverageAmount: ").append(toIndentedString(coverageAmount)).append("\n");
    sb.append("    deductionReducesTaxableIncome: ").append(toIndentedString(deductionReducesTaxableIncome)).append("\n");
    sb.append("    coverageSalaryMultiplier: ").append(toIndentedString(coverageSalaryMultiplier)).append("\n");
    sb.append("    companyContribution: ").append(toIndentedString(companyContribution)).append("\n");
    sb.append("    contributeAsPercentage: ").append(toIndentedString(contributeAsPercentage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("active");
    openapiFields.add("employee_deduction");
    openapiFields.add("deduct_as_percentage");
    openapiFields.add("employee_deduction_annual_maximum");
    openapiFields.add("contribution");
    openapiFields.add("elective");
    openapiFields.add("company_contribution_annual_maximum");
    openapiFields.add("limit_option");
    openapiFields.add("catch_up");
    openapiFields.add("coverage_amount");
    openapiFields.add("deduction_reduces_taxable_income");
    openapiFields.add("coverage_salary_multiplier");
    openapiFields.add("company_contribution");
    openapiFields.add("contribute_as_percentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeBenefitsUpdateBenefitRecordRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeBenefitsUpdateBenefitRecordRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeBenefitsUpdateBenefitRecordRequest is not found in the empty JSON string", EmployeeBenefitsUpdateBenefitRecordRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeeBenefitsUpdateBenefitRecordRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("employee_deduction") != null && !jsonObj.get("employee_deduction").isJsonNull()) && !jsonObj.get("employee_deduction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_deduction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_deduction").toString()));
      }
      if (!jsonObj.get("employee_deduction_annual_maximum").isJsonNull() && (jsonObj.get("employee_deduction_annual_maximum") != null && !jsonObj.get("employee_deduction_annual_maximum").isJsonNull()) && !jsonObj.get("employee_deduction_annual_maximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_deduction_annual_maximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_deduction_annual_maximum").toString()));
      }
      // validate the optional field `contribution`
      if (jsonObj.get("contribution") != null && !jsonObj.get("contribution").isJsonNull()) {
        EmployeeBenefitsUpdateBenefitRecordRequestContribution.validateJsonObject(jsonObj.getAsJsonObject("contribution"));
      }
      if (!jsonObj.get("company_contribution_annual_maximum").isJsonNull() && (jsonObj.get("company_contribution_annual_maximum") != null && !jsonObj.get("company_contribution_annual_maximum").isJsonNull()) && !jsonObj.get("company_contribution_annual_maximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_contribution_annual_maximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_contribution_annual_maximum").toString()));
      }
      if (!jsonObj.get("limit_option").isJsonNull() && (jsonObj.get("limit_option") != null && !jsonObj.get("limit_option").isJsonNull()) && !jsonObj.get("limit_option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limit_option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limit_option").toString()));
      }
      if (!jsonObj.get("coverage_amount").isJsonNull() && (jsonObj.get("coverage_amount") != null && !jsonObj.get("coverage_amount").isJsonNull()) && !jsonObj.get("coverage_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverage_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverage_amount").toString()));
      }
      if (!jsonObj.get("deduction_reduces_taxable_income").isJsonNull() && (jsonObj.get("deduction_reduces_taxable_income") != null && !jsonObj.get("deduction_reduces_taxable_income").isJsonNull()) && !jsonObj.get("deduction_reduces_taxable_income").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deduction_reduces_taxable_income` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deduction_reduces_taxable_income").toString()));
      }
      if ((jsonObj.get("coverage_salary_multiplier") != null && !jsonObj.get("coverage_salary_multiplier").isJsonNull()) && !jsonObj.get("coverage_salary_multiplier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverage_salary_multiplier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverage_salary_multiplier").toString()));
      }
      if ((jsonObj.get("company_contribution") != null && !jsonObj.get("company_contribution").isJsonNull()) && !jsonObj.get("company_contribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_contribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_contribution").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeBenefitsUpdateBenefitRecordRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeBenefitsUpdateBenefitRecordRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeBenefitsUpdateBenefitRecordRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeBenefitsUpdateBenefitRecordRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeBenefitsUpdateBenefitRecordRequest>() {
           @Override
           public void write(JsonWriter out, EmployeeBenefitsUpdateBenefitRecordRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeBenefitsUpdateBenefitRecordRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeBenefitsUpdateBenefitRecordRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeBenefitsUpdateBenefitRecordRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeBenefitsUpdateBenefitRecordRequest
  * @throws IOException if the JSON string is invalid with respect to EmployeeBenefitsUpdateBenefitRecordRequest
  */
  public static EmployeeBenefitsUpdateBenefitRecordRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeBenefitsUpdateBenefitRecordRequest.class);
  }

 /**
  * Convert an instance of EmployeeBenefitsUpdateBenefitRecordRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

