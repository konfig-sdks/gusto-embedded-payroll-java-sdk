/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TaxRequirementApplicableIfInner;
import com.konfigthis.client.model.TaxRequirementMetadata;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TaxRequirement
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TaxRequirement {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_APPLICABLE_IF = "applicable_if";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_IF)
  private List<TaxRequirementApplicableIfInner> applicableIf = null;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private TaxRequirementMetadata metadata;

  public TaxRequirement() {
  }

  public TaxRequirement description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A more detailed customer facing description of the requirement
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "If you have run payroll in the past in GA, find your withholding number on notices received from the Georgia Department of Revenue, or call the agency at (877) 423-6711. If you donâ€™t have a number yet, you should <a target='_blank' data-bypass href='https://gtc.dor.ga.gov/_/#1'>register the business online</a>. The last two characters of your ID must be upper case letters.", value = "A more detailed customer facing description of the requirement")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TaxRequirement key(String key) {
    
    
    
    
    this.key = key;
    return this;
  }

   /**
   * An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set.
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "71653ec0-00b5-4c66-a58b-22ecf21704c5", value = "An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set.")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    
    
    
    this.key = key;
  }


  public TaxRequirement applicableIf(List<TaxRequirementApplicableIfInner> applicableIf) {
    
    
    
    
    this.applicableIf = applicableIf;
    return this;
  }

  public TaxRequirement addApplicableIfItem(TaxRequirementApplicableIfInner applicableIfItem) {
    if (this.applicableIf == null) {
      this.applicableIf = new ArrayList<>();
    }
    this.applicableIf.add(applicableIfItem);
    return this;
  }

   /**
   * An array of references to other requirements within the requirement set. This requirement is only applicable if all referenced requirements have values matching the corresponding &#x60;value&#x60;. The primary use-case is dynamically hiding and showing requirements as values change. E.g. Show Requirement-B when Requirement-A has been answered with &#x60;false&#x60;. To be explicit, an empty array means the requirement is applicable.
   * @return applicableIf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of references to other requirements within the requirement set. This requirement is only applicable if all referenced requirements have values matching the corresponding `value`. The primary use-case is dynamically hiding and showing requirements as values change. E.g. Show Requirement-B when Requirement-A has been answered with `false`. To be explicit, an empty array means the requirement is applicable.")

  public List<TaxRequirementApplicableIfInner> getApplicableIf() {
    return applicableIf;
  }


  public void setApplicableIf(List<TaxRequirementApplicableIfInner> applicableIf) {
    
    
    
    this.applicableIf = applicableIf;
  }


  public TaxRequirement label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * A customer facing description of the requirement
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Withholding Number", value = "A customer facing description of the requirement")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public TaxRequirement value(String value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * The \&quot;answer\&quot;
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1233214-AB", value = "The \"answer\"")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    
    
    
    this.value = value;
  }


  public TaxRequirement metadata(TaxRequirementMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaxRequirementMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(TaxRequirementMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TaxRequirement instance itself
   */
  public TaxRequirement putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxRequirement taxRequirement = (TaxRequirement) o;
    return Objects.equals(this.description, taxRequirement.description) &&
        Objects.equals(this.key, taxRequirement.key) &&
        Objects.equals(this.applicableIf, taxRequirement.applicableIf) &&
        Objects.equals(this.label, taxRequirement.label) &&
        Objects.equals(this.value, taxRequirement.value) &&
        Objects.equals(this.metadata, taxRequirement.metadata)&&
        Objects.equals(this.additionalProperties, taxRequirement.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, key, applicableIf, label, value, metadata, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxRequirement {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    applicableIf: ").append(toIndentedString(applicableIf)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("key");
    openapiFields.add("applicable_if");
    openapiFields.add("label");
    openapiFields.add("value");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxRequirement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TaxRequirement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxRequirement is not found in the empty JSON string", TaxRequirement.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (jsonObj.get("applicable_if") != null && !jsonObj.get("applicable_if").isJsonNull()) {
        JsonArray jsonArrayapplicableIf = jsonObj.getAsJsonArray("applicable_if");
        if (jsonArrayapplicableIf != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicable_if").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicable_if` to be an array in the JSON string but got `%s`", jsonObj.get("applicable_if").toString()));
          }

          // validate the optional field `applicable_if` (array)
          for (int i = 0; i < jsonArrayapplicableIf.size(); i++) {
            TaxRequirementApplicableIfInner.validateJsonObject(jsonArrayapplicableIf.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        TaxRequirementMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxRequirement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxRequirement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxRequirement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxRequirement.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxRequirement>() {
           @Override
           public void write(JsonWriter out, TaxRequirement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxRequirement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TaxRequirement instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxRequirement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxRequirement
  * @throws IOException if the JSON string is invalid with respect to TaxRequirement
  */
  public static TaxRequirement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxRequirement.class);
  }

 /**
  * Convert an instance of TaxRequirement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

