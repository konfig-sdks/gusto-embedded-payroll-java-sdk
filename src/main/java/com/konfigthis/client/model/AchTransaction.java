/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Representation of an ACH transaction
 */
@ApiModel(description = "Representation of an ACH transaction")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AchTransaction {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_COMPANY_UUID = "company_uuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_UUID)
  private String companyUuid;

  /**
   * The type of payment event associated with the ACH transaction
   */
  @JsonAdapter(PaymentEventTypeEnum.Adapter.class)
 public enum PaymentEventTypeEnum {
    PAYROLL("Payroll"),
    
    CONTRACTORPAYMENT("ContractorPayment");

    private String value;

    PaymentEventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentEventTypeEnum fromValue(String value) {
      for (PaymentEventTypeEnum b : PaymentEventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentEventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentEventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentEventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentEventTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_EVENT_TYPE = "payment_event_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_EVENT_TYPE)
  private PaymentEventTypeEnum paymentEventType;

  public static final String SERIALIZED_NAME_PAYMENT_EVENT_UUID = "payment_event_uuid";
  @SerializedName(SERIALIZED_NAME_PAYMENT_EVENT_UUID)
  private String paymentEventUuid;

  /**
   * The type of recipient associated with the ACH transaction
   */
  @JsonAdapter(RecipientTypeEnum.Adapter.class)
 public enum RecipientTypeEnum {
    EMPLOYEE("Employee"),
    
    CONTRACTOR("Contractor");

    private String value;

    RecipientTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecipientTypeEnum fromValue(String value) {
      for (RecipientTypeEnum b : RecipientTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecipientTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecipientTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecipientTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecipientTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECIPIENT_TYPE = "recipient_type";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_TYPE)
  private RecipientTypeEnum recipientType;

  public static final String SERIALIZED_NAME_RECIPIENT_UUID = "recipient_uuid";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_UUID)
  private String recipientUuid;

  public static final String SERIALIZED_NAME_ERROR_CODE = "error_code";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transaction_type";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  /**
   * The status of the ACH transaction
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
 public enum PaymentStatusEnum {
    UNSUBMITTED("unsubmitted"),
    
    SUBMITTED("submitted"),
    
    SUCCESSFUL("successful"),
    
    FAILED("failed");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "payment_status";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  /**
   * The direction of the payment
   */
  @JsonAdapter(PaymentDirectionEnum.Adapter.class)
 public enum PaymentDirectionEnum {
    CREDIT("credit"),
    
    DEBIT("debit");

    private String value;

    PaymentDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentDirectionEnum fromValue(String value) {
      for (PaymentDirectionEnum b : PaymentDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentDirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_DIRECTION = "payment_direction";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DIRECTION)
  private PaymentDirectionEnum paymentDirection;

  public static final String SERIALIZED_NAME_PAYMENT_EVENT_CHECK_DATE = "payment_event_check_date";
  @SerializedName(SERIALIZED_NAME_PAYMENT_EVENT_CHECK_DATE)
  private String paymentEventCheckDate;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "payment_date";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private String paymentDate;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public AchTransaction() {
  }

  public AchTransaction description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the ACH transaction. Can be used to identify the ACH transaction on the recipient&#39;s bank statement.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PAY 380654", value = "The description of the ACH transaction. Can be used to identify the ACH transaction on the recipient's bank statement.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AchTransaction uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Unique identifier of an ACH transaction
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123e4567-e89b-12d3-a456-426655440000,", value = "Unique identifier of an ACH transaction")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public AchTransaction companyUuid(String companyUuid) {
    
    
    
    
    this.companyUuid = companyUuid;
    return this;
  }

   /**
   * Unique identifier of the company to which the ACH transaction belongs
   * @return companyUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "456e7890-e12b-34c5-d678-901234567890,", value = "Unique identifier of the company to which the ACH transaction belongs")

  public String getCompanyUuid() {
    return companyUuid;
  }


  public void setCompanyUuid(String companyUuid) {
    
    
    
    this.companyUuid = companyUuid;
  }


  public AchTransaction paymentEventType(PaymentEventTypeEnum paymentEventType) {
    
    
    
    
    this.paymentEventType = paymentEventType;
    return this;
  }

   /**
   * The type of payment event associated with the ACH transaction
   * @return paymentEventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Payroll,", value = "The type of payment event associated with the ACH transaction")

  public PaymentEventTypeEnum getPaymentEventType() {
    return paymentEventType;
  }


  public void setPaymentEventType(PaymentEventTypeEnum paymentEventType) {
    
    
    
    this.paymentEventType = paymentEventType;
  }


  public AchTransaction paymentEventUuid(String paymentEventUuid) {
    
    
    
    
    this.paymentEventUuid = paymentEventUuid;
    return this;
  }

   /**
   * Unique identifier for the payment event associated with the ACH transaction
   * @return paymentEventUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "789e0123-e45f-67ab-c890-123456789012,", value = "Unique identifier for the payment event associated with the ACH transaction")

  public String getPaymentEventUuid() {
    return paymentEventUuid;
  }


  public void setPaymentEventUuid(String paymentEventUuid) {
    
    
    
    this.paymentEventUuid = paymentEventUuid;
  }


  public AchTransaction recipientType(RecipientTypeEnum recipientType) {
    
    
    
    
    this.recipientType = recipientType;
    return this;
  }

   /**
   * The type of recipient associated with the ACH transaction
   * @return recipientType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Employee,", value = "The type of recipient associated with the ACH transaction")

  public RecipientTypeEnum getRecipientType() {
    return recipientType;
  }


  public void setRecipientType(RecipientTypeEnum recipientType) {
    
    
    
    this.recipientType = recipientType;
  }


  public AchTransaction recipientUuid(String recipientUuid) {
    
    
    
    
    this.recipientUuid = recipientUuid;
    return this;
  }

   /**
   * Unique identifier for the recipient associated with the ACH transaction
   * @return recipientUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "012e3456-f78d-90ab-12cd-345678901234,", value = "Unique identifier for the recipient associated with the ACH transaction")

  public String getRecipientUuid() {
    return recipientUuid;
  }


  public void setRecipientUuid(String recipientUuid) {
    
    
    
    this.recipientUuid = recipientUuid;
  }


  public AchTransaction errorCode(String errorCode) {
    
    
    
    
    this.errorCode = errorCode;
    return this;
  }

   /**
   * The error code associated with the ACH transaction, if any. If there is no error on the ACH transaction, this field will be nil. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.
   * @return errorCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "null,", value = "The error code associated with the ACH transaction, if any. If there is no error on the ACH transaction, this field will be nil. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.")

  public String getErrorCode() {
    return errorCode;
  }


  public void setErrorCode(String errorCode) {
    
    
    
    this.errorCode = errorCode;
  }


  public AchTransaction transactionType(String transactionType) {
    
    
    
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The type of transaction associated with the ACH transaction
   * @return transactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Credit employee pay,", value = "The type of transaction associated with the ACH transaction")

  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    
    
    
    this.transactionType = transactionType;
  }


  public AchTransaction paymentStatus(PaymentStatusEnum paymentStatus) {
    
    
    
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * The status of the ACH transaction
   * @return paymentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "submitted,", value = "The status of the ACH transaction")

  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    
    
    
    this.paymentStatus = paymentStatus;
  }


  public AchTransaction paymentDirection(PaymentDirectionEnum paymentDirection) {
    
    
    
    
    this.paymentDirection = paymentDirection;
    return this;
  }

   /**
   * The direction of the payment
   * @return paymentDirection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "credit,", value = "The direction of the payment")

  public PaymentDirectionEnum getPaymentDirection() {
    return paymentDirection;
  }


  public void setPaymentDirection(PaymentDirectionEnum paymentDirection) {
    
    
    
    this.paymentDirection = paymentDirection;
  }


  public AchTransaction paymentEventCheckDate(String paymentEventCheckDate) {
    
    
    
    
    this.paymentEventCheckDate = paymentEventCheckDate;
    return this;
  }

   /**
   * The date of the payment event check associated with the ACH transaction
   * @return paymentEventCheckDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-10-02,", value = "The date of the payment event check associated with the ACH transaction")

  public String getPaymentEventCheckDate() {
    return paymentEventCheckDate;
  }


  public void setPaymentEventCheckDate(String paymentEventCheckDate) {
    
    
    
    this.paymentEventCheckDate = paymentEventCheckDate;
  }


  public AchTransaction paymentDate(String paymentDate) {
    
    
    
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * The date of the payment associated with the ACH transaction
   * @return paymentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-10-17,", value = "The date of the payment associated with the ACH transaction")

  public String getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(String paymentDate) {
    
    
    
    this.paymentDate = paymentDate;
  }


  public AchTransaction amount(String amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount of money moved by the ACH transaction. This amount is always non-negative.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123.00,", value = "The amount of money moved by the ACH transaction. This amount is always non-negative.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    
    
    
    this.amount = amount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AchTransaction instance itself
   */
  public AchTransaction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AchTransaction achTransaction = (AchTransaction) o;
    return Objects.equals(this.description, achTransaction.description) &&
        Objects.equals(this.uuid, achTransaction.uuid) &&
        Objects.equals(this.companyUuid, achTransaction.companyUuid) &&
        Objects.equals(this.paymentEventType, achTransaction.paymentEventType) &&
        Objects.equals(this.paymentEventUuid, achTransaction.paymentEventUuid) &&
        Objects.equals(this.recipientType, achTransaction.recipientType) &&
        Objects.equals(this.recipientUuid, achTransaction.recipientUuid) &&
        Objects.equals(this.errorCode, achTransaction.errorCode) &&
        Objects.equals(this.transactionType, achTransaction.transactionType) &&
        Objects.equals(this.paymentStatus, achTransaction.paymentStatus) &&
        Objects.equals(this.paymentDirection, achTransaction.paymentDirection) &&
        Objects.equals(this.paymentEventCheckDate, achTransaction.paymentEventCheckDate) &&
        Objects.equals(this.paymentDate, achTransaction.paymentDate) &&
        Objects.equals(this.amount, achTransaction.amount)&&
        Objects.equals(this.additionalProperties, achTransaction.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, uuid, companyUuid, paymentEventType, paymentEventUuid, recipientType, recipientUuid, errorCode, transactionType, paymentStatus, paymentDirection, paymentEventCheckDate, paymentDate, amount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AchTransaction {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    companyUuid: ").append(toIndentedString(companyUuid)).append("\n");
    sb.append("    paymentEventType: ").append(toIndentedString(paymentEventType)).append("\n");
    sb.append("    paymentEventUuid: ").append(toIndentedString(paymentEventUuid)).append("\n");
    sb.append("    recipientType: ").append(toIndentedString(recipientType)).append("\n");
    sb.append("    recipientUuid: ").append(toIndentedString(recipientUuid)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    paymentDirection: ").append(toIndentedString(paymentDirection)).append("\n");
    sb.append("    paymentEventCheckDate: ").append(toIndentedString(paymentEventCheckDate)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("uuid");
    openapiFields.add("company_uuid");
    openapiFields.add("payment_event_type");
    openapiFields.add("payment_event_uuid");
    openapiFields.add("recipient_type");
    openapiFields.add("recipient_uuid");
    openapiFields.add("error_code");
    openapiFields.add("transaction_type");
    openapiFields.add("payment_status");
    openapiFields.add("payment_direction");
    openapiFields.add("payment_event_check_date");
    openapiFields.add("payment_date");
    openapiFields.add("amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AchTransaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AchTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AchTransaction is not found in the empty JSON string", AchTransaction.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("company_uuid") != null && !jsonObj.get("company_uuid").isJsonNull()) && !jsonObj.get("company_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_uuid").toString()));
      }
      if ((jsonObj.get("payment_event_type") != null && !jsonObj.get("payment_event_type").isJsonNull()) && !jsonObj.get("payment_event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_event_type").toString()));
      }
      if ((jsonObj.get("payment_event_uuid") != null && !jsonObj.get("payment_event_uuid").isJsonNull()) && !jsonObj.get("payment_event_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_event_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_event_uuid").toString()));
      }
      if ((jsonObj.get("recipient_type") != null && !jsonObj.get("recipient_type").isJsonNull()) && !jsonObj.get("recipient_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_type").toString()));
      }
      if ((jsonObj.get("recipient_uuid") != null && !jsonObj.get("recipient_uuid").isJsonNull()) && !jsonObj.get("recipient_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_uuid").toString()));
      }
      if ((jsonObj.get("error_code") != null && !jsonObj.get("error_code").isJsonNull()) && !jsonObj.get("error_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_code").toString()));
      }
      if ((jsonObj.get("transaction_type") != null && !jsonObj.get("transaction_type").isJsonNull()) && !jsonObj.get("transaction_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_type").toString()));
      }
      if ((jsonObj.get("payment_status") != null && !jsonObj.get("payment_status").isJsonNull()) && !jsonObj.get("payment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_status").toString()));
      }
      if ((jsonObj.get("payment_direction") != null && !jsonObj.get("payment_direction").isJsonNull()) && !jsonObj.get("payment_direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_direction").toString()));
      }
      if ((jsonObj.get("payment_event_check_date") != null && !jsonObj.get("payment_event_check_date").isJsonNull()) && !jsonObj.get("payment_event_check_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_event_check_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_event_check_date").toString()));
      }
      if ((jsonObj.get("payment_date") != null && !jsonObj.get("payment_date").isJsonNull()) && !jsonObj.get("payment_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_date").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AchTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AchTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AchTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AchTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<AchTransaction>() {
           @Override
           public void write(JsonWriter out, AchTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AchTransaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AchTransaction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AchTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AchTransaction
  * @throws IOException if the JSON string is invalid with respect to AchTransaction
  */
  public static AchTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AchTransaction.class);
  }

 /**
  * Convert an instance of AchTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

