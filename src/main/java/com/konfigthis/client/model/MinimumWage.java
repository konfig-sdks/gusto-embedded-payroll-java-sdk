/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Representation of a Minimum Wage
 */
@ApiModel(description = "Representation of a Minimum Wage")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MinimumWage {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_WAGE = "wage";
  @SerializedName(SERIALIZED_NAME_WAGE)
  private Float wage;

  public static final String SERIALIZED_NAME_WAGE_TYPE = "wage_type";
  @SerializedName(SERIALIZED_NAME_WAGE_TYPE)
  private String wageType;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effective_date";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_AUTHORITY = "authority";
  @SerializedName(SERIALIZED_NAME_AUTHORITY)
  private String authority;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public MinimumWage() {
  }

  public MinimumWage uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * unique identifier of a minimum wage
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "70c523ff-c71e-4474-9c83-a4ea51bd54a8", required = true, value = "unique identifier of a minimum wage")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public MinimumWage wage(Float wage) {
    
    
    
    
    this.wage = wage;
    return this;
  }

   /**
   * The wage rate for a minimum wage record. Represented as a float, e.g. \&quot;15.0\&quot;.
   * @return wage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "13.0", required = true, value = "The wage rate for a minimum wage record. Represented as a float, e.g. \"15.0\".")

  public Float getWage() {
    return wage;
  }


  public void setWage(Float wage) {
    
    
    
    this.wage = wage;
  }


  public MinimumWage wageType(String wageType) {
    
    
    
    
    this.wageType = wageType;
    return this;
  }

   /**
   * The type of wage the minimum wage applies to, e.g. \&quot;Regular\&quot;, \&quot;Regular-Industry-Specific\&quot;.
   * @return wageType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Regular", required = true, value = "The type of wage the minimum wage applies to, e.g. \"Regular\", \"Regular-Industry-Specific\".")

  public String getWageType() {
    return wageType;
  }


  public void setWageType(String wageType) {
    
    
    
    this.wageType = wageType;
  }


  public MinimumWage effectiveDate(LocalDate effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The date the minimum wage rule is effective on.
   * @return effectiveDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Fri Dec 31 16:00:00 PST 2021", required = true, value = "The date the minimum wage rule is effective on.")

  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(LocalDate effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public MinimumWage authority(String authority) {
    
    
    
    
    this.authority = authority;
    return this;
  }

   /**
   * The governing authority that created the minimum wage, e.g. \&quot;City\&quot;, \&quot;State\&quot;, or \&quot;Federal\&quot;.
   * @return authority
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "State", required = true, value = "The governing authority that created the minimum wage, e.g. \"City\", \"State\", or \"Federal\".")

  public String getAuthority() {
    return authority;
  }


  public void setAuthority(String authority) {
    
    
    
    this.authority = authority;
  }


  public MinimumWage notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Description of parties the minimum wage applies to.
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Employers with 6 or more employees", value = "Description of parties the minimum wage applies to.")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MinimumWage instance itself
   */
  public MinimumWage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MinimumWage minimumWage = (MinimumWage) o;
    return Objects.equals(this.uuid, minimumWage.uuid) &&
        Objects.equals(this.wage, minimumWage.wage) &&
        Objects.equals(this.wageType, minimumWage.wageType) &&
        Objects.equals(this.effectiveDate, minimumWage.effectiveDate) &&
        Objects.equals(this.authority, minimumWage.authority) &&
        Objects.equals(this.notes, minimumWage.notes)&&
        Objects.equals(this.additionalProperties, minimumWage.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, wage, wageType, effectiveDate, authority, notes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MinimumWage {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    wage: ").append(toIndentedString(wage)).append("\n");
    sb.append("    wageType: ").append(toIndentedString(wageType)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("wage");
    openapiFields.add("wage_type");
    openapiFields.add("effective_date");
    openapiFields.add("authority");
    openapiFields.add("notes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("wage");
    openapiRequiredFields.add("wage_type");
    openapiRequiredFields.add("effective_date");
    openapiRequiredFields.add("authority");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MinimumWage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MinimumWage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MinimumWage is not found in the empty JSON string", MinimumWage.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MinimumWage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("wage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wage").toString()));
      }
      if (!jsonObj.get("wage_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wage_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wage_type").toString()));
      }
      if (!jsonObj.get("authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authority").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MinimumWage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MinimumWage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MinimumWage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MinimumWage.class));

       return (TypeAdapter<T>) new TypeAdapter<MinimumWage>() {
           @Override
           public void write(JsonWriter out, MinimumWage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MinimumWage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MinimumWage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MinimumWage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MinimumWage
  * @throws IOException if the JSON string is invalid with respect to MinimumWage
  */
  public static MinimumWage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MinimumWage.class);
  }

 /**
  * Convert an instance of MinimumWage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

