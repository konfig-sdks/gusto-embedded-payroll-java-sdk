/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PayrollReceiptEmployeeCompensationsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollReceiptEmployeeCompensationsInner {
  public static final String SERIALIZED_NAME_EMPLOYEE_UUID = "employee_uuid";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_UUID)
  private String employeeUuid;

  public static final String SERIALIZED_NAME_EMPLOYEE_FIRST_NAME = "employee_first_name";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_FIRST_NAME)
  private String employeeFirstName;

  public static final String SERIALIZED_NAME_EMPLOYEE_LAST_NAME = "employee_last_name";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_LAST_NAME)
  private String employeeLastName;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_NET_PAY = "net_pay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private String netPay;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "total_tax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  private String totalTax;

  public static final String SERIALIZED_NAME_TOTAL_GARNISHMENTS = "total_garnishments";
  @SerializedName(SERIALIZED_NAME_TOTAL_GARNISHMENTS)
  private String totalGarnishments;

  public static final String SERIALIZED_NAME_CHILD_SUPPORT_GARNISHMENT = "child_support_garnishment";
  @SerializedName(SERIALIZED_NAME_CHILD_SUPPORT_GARNISHMENT)
  private String childSupportGarnishment;

  public static final String SERIALIZED_NAME_TOTAL_REIMBURSEMENT = "total_reimbursement";
  @SerializedName(SERIALIZED_NAME_TOTAL_REIMBURSEMENT)
  private String totalReimbursement;

  public PayrollReceiptEmployeeCompensationsInner() {
  }

  public PayrollReceiptEmployeeCompensationsInner employeeUuid(String employeeUuid) {
    
    
    
    
    this.employeeUuid = employeeUuid;
    return this;
  }

   /**
   * The UUID of the employee.
   * @return employeeUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UUID of the employee.")

  public String getEmployeeUuid() {
    return employeeUuid;
  }


  public void setEmployeeUuid(String employeeUuid) {
    
    
    
    this.employeeUuid = employeeUuid;
  }


  public PayrollReceiptEmployeeCompensationsInner employeeFirstName(String employeeFirstName) {
    
    
    
    
    this.employeeFirstName = employeeFirstName;
    return this;
  }

   /**
   * The first name of the employee.
   * @return employeeFirstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The first name of the employee.")

  public String getEmployeeFirstName() {
    return employeeFirstName;
  }


  public void setEmployeeFirstName(String employeeFirstName) {
    
    
    
    this.employeeFirstName = employeeFirstName;
  }


  public PayrollReceiptEmployeeCompensationsInner employeeLastName(String employeeLastName) {
    
    
    
    
    this.employeeLastName = employeeLastName;
    return this;
  }

   /**
   * The last name of the employee.
   * @return employeeLastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last name of the employee.")

  public String getEmployeeLastName() {
    return employeeLastName;
  }


  public void setEmployeeLastName(String employeeLastName) {
    
    
    
    this.employeeLastName = employeeLastName;
  }


  public PayrollReceiptEmployeeCompensationsInner paymentMethod(String paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * The employee&#39;s compensation payment method.\\n\\n&#x60;Check&#x60; &#x60;Direct Deposit&#x60;
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The employee's compensation payment method.\\n\\n`Check` `Direct Deposit`")

  public String getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(String paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }


  public PayrollReceiptEmployeeCompensationsInner netPay(String netPay) {
    
    
    
    
    this.netPay = netPay;
    return this;
  }

   /**
   * The employee&#39;s net pay. Net pay paid by check is available for reference but is not included in the &#x60;[\&quot;totals\&quot;][\&quot;net_pay_debit\&quot;]&#x60; amount.
   * @return netPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The employee's net pay. Net pay paid by check is available for reference but is not included in the `[\"totals\"][\"net_pay_debit\"]` amount.")

  public String getNetPay() {
    return netPay;
  }


  public void setNetPay(String netPay) {
    
    
    
    this.netPay = netPay;
  }


  public PayrollReceiptEmployeeCompensationsInner totalTax(String totalTax) {
    
    
    
    
    this.totalTax = totalTax;
    return this;
  }

   /**
   * The total of employer and employee taxes for the pay period.
   * @return totalTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total of employer and employee taxes for the pay period.")

  public String getTotalTax() {
    return totalTax;
  }


  public void setTotalTax(String totalTax) {
    
    
    
    this.totalTax = totalTax;
  }


  public PayrollReceiptEmployeeCompensationsInner totalGarnishments(String totalGarnishments) {
    
    
    
    
    this.totalGarnishments = totalGarnishments;
    return this;
  }

   /**
   * The total garnishments for the pay period.
   * @return totalGarnishments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total garnishments for the pay period.")

  public String getTotalGarnishments() {
    return totalGarnishments;
  }


  public void setTotalGarnishments(String totalGarnishments) {
    
    
    
    this.totalGarnishments = totalGarnishments;
  }


  public PayrollReceiptEmployeeCompensationsInner childSupportGarnishment(String childSupportGarnishment) {
    
    
    
    
    this.childSupportGarnishment = childSupportGarnishment;
    return this;
  }

   /**
   * The total child support garnishment for the pay period.
   * @return childSupportGarnishment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total child support garnishment for the pay period.")

  public String getChildSupportGarnishment() {
    return childSupportGarnishment;
  }


  public void setChildSupportGarnishment(String childSupportGarnishment) {
    
    
    
    this.childSupportGarnishment = childSupportGarnishment;
  }


  public PayrollReceiptEmployeeCompensationsInner totalReimbursement(String totalReimbursement) {
    
    
    
    
    this.totalReimbursement = totalReimbursement;
    return this;
  }

   /**
   * The total reimbursement for the pay period.
   * @return totalReimbursement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total reimbursement for the pay period.")

  public String getTotalReimbursement() {
    return totalReimbursement;
  }


  public void setTotalReimbursement(String totalReimbursement) {
    
    
    
    this.totalReimbursement = totalReimbursement;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollReceiptEmployeeCompensationsInner instance itself
   */
  public PayrollReceiptEmployeeCompensationsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollReceiptEmployeeCompensationsInner payrollReceiptEmployeeCompensationsInner = (PayrollReceiptEmployeeCompensationsInner) o;
    return Objects.equals(this.employeeUuid, payrollReceiptEmployeeCompensationsInner.employeeUuid) &&
        Objects.equals(this.employeeFirstName, payrollReceiptEmployeeCompensationsInner.employeeFirstName) &&
        Objects.equals(this.employeeLastName, payrollReceiptEmployeeCompensationsInner.employeeLastName) &&
        Objects.equals(this.paymentMethod, payrollReceiptEmployeeCompensationsInner.paymentMethod) &&
        Objects.equals(this.netPay, payrollReceiptEmployeeCompensationsInner.netPay) &&
        Objects.equals(this.totalTax, payrollReceiptEmployeeCompensationsInner.totalTax) &&
        Objects.equals(this.totalGarnishments, payrollReceiptEmployeeCompensationsInner.totalGarnishments) &&
        Objects.equals(this.childSupportGarnishment, payrollReceiptEmployeeCompensationsInner.childSupportGarnishment) &&
        Objects.equals(this.totalReimbursement, payrollReceiptEmployeeCompensationsInner.totalReimbursement)&&
        Objects.equals(this.additionalProperties, payrollReceiptEmployeeCompensationsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeUuid, employeeFirstName, employeeLastName, paymentMethod, netPay, totalTax, totalGarnishments, childSupportGarnishment, totalReimbursement, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollReceiptEmployeeCompensationsInner {\n");
    sb.append("    employeeUuid: ").append(toIndentedString(employeeUuid)).append("\n");
    sb.append("    employeeFirstName: ").append(toIndentedString(employeeFirstName)).append("\n");
    sb.append("    employeeLastName: ").append(toIndentedString(employeeLastName)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    totalGarnishments: ").append(toIndentedString(totalGarnishments)).append("\n");
    sb.append("    childSupportGarnishment: ").append(toIndentedString(childSupportGarnishment)).append("\n");
    sb.append("    totalReimbursement: ").append(toIndentedString(totalReimbursement)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employee_uuid");
    openapiFields.add("employee_first_name");
    openapiFields.add("employee_last_name");
    openapiFields.add("payment_method");
    openapiFields.add("net_pay");
    openapiFields.add("total_tax");
    openapiFields.add("total_garnishments");
    openapiFields.add("child_support_garnishment");
    openapiFields.add("total_reimbursement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollReceiptEmployeeCompensationsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollReceiptEmployeeCompensationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollReceiptEmployeeCompensationsInner is not found in the empty JSON string", PayrollReceiptEmployeeCompensationsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("employee_uuid") != null && !jsonObj.get("employee_uuid").isJsonNull()) && !jsonObj.get("employee_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_uuid").toString()));
      }
      if ((jsonObj.get("employee_first_name") != null && !jsonObj.get("employee_first_name").isJsonNull()) && !jsonObj.get("employee_first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_first_name").toString()));
      }
      if ((jsonObj.get("employee_last_name") != null && !jsonObj.get("employee_last_name").isJsonNull()) && !jsonObj.get("employee_last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_last_name").toString()));
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      if ((jsonObj.get("net_pay") != null && !jsonObj.get("net_pay").isJsonNull()) && !jsonObj.get("net_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_pay").toString()));
      }
      if ((jsonObj.get("total_tax") != null && !jsonObj.get("total_tax").isJsonNull()) && !jsonObj.get("total_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_tax").toString()));
      }
      if ((jsonObj.get("total_garnishments") != null && !jsonObj.get("total_garnishments").isJsonNull()) && !jsonObj.get("total_garnishments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_garnishments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_garnishments").toString()));
      }
      if ((jsonObj.get("child_support_garnishment") != null && !jsonObj.get("child_support_garnishment").isJsonNull()) && !jsonObj.get("child_support_garnishment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `child_support_garnishment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("child_support_garnishment").toString()));
      }
      if ((jsonObj.get("total_reimbursement") != null && !jsonObj.get("total_reimbursement").isJsonNull()) && !jsonObj.get("total_reimbursement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_reimbursement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_reimbursement").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollReceiptEmployeeCompensationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollReceiptEmployeeCompensationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollReceiptEmployeeCompensationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollReceiptEmployeeCompensationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollReceiptEmployeeCompensationsInner>() {
           @Override
           public void write(JsonWriter out, PayrollReceiptEmployeeCompensationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollReceiptEmployeeCompensationsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollReceiptEmployeeCompensationsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollReceiptEmployeeCompensationsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollReceiptEmployeeCompensationsInner
  * @throws IOException if the JSON string is invalid with respect to PayrollReceiptEmployeeCompensationsInner
  */
  public static PayrollReceiptEmployeeCompensationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollReceiptEmployeeCompensationsInner.class);
  }

 /**
  * Convert an instance of PayrollReceiptEmployeeCompensationsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

