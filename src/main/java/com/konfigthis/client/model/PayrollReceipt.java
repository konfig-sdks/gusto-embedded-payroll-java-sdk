/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PayrollReceiptEmployeeCompensationsInner;
import com.konfigthis.client.model.PayrollReceiptLicensee;
import com.konfigthis.client.model.PayrollReceiptTaxesInner;
import com.konfigthis.client.model.PayrollReceiptTotals;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PayrollReceipt
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollReceipt {
  public static final String SERIALIZED_NAME_PAYROLL_UUID = "payroll_uuid";
  @SerializedName(SERIALIZED_NAME_PAYROLL_UUID)
  private String payrollUuid;

  public static final String SERIALIZED_NAME_COMPANY_UUID = "company_uuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_UUID)
  private String companyUuid;

  public static final String SERIALIZED_NAME_NAME_OF_SENDER = "name_of_sender";
  @SerializedName(SERIALIZED_NAME_NAME_OF_SENDER)
  private String nameOfSender;

  public static final String SERIALIZED_NAME_NAME_OF_RECIPIENT = "name_of_recipient";
  @SerializedName(SERIALIZED_NAME_NAME_OF_RECIPIENT)
  private String nameOfRecipient;

  public static final String SERIALIZED_NAME_RECIPIENT_NOTICE = "recipient_notice";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NOTICE)
  private String recipientNotice;

  public static final String SERIALIZED_NAME_DEBIT_DATE = "debit_date";
  @SerializedName(SERIALIZED_NAME_DEBIT_DATE)
  private String debitDate;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_LICENSE_URI = "license_uri";
  @SerializedName(SERIALIZED_NAME_LICENSE_URI)
  private String licenseUri;

  public static final String SERIALIZED_NAME_RIGHT_TO_REFUND = "right_to_refund";
  @SerializedName(SERIALIZED_NAME_RIGHT_TO_REFUND)
  private String rightToRefund;

  public static final String SERIALIZED_NAME_LIABILITY_OF_LICENSEE = "liability_of_licensee";
  @SerializedName(SERIALIZED_NAME_LIABILITY_OF_LICENSEE)
  private String liabilityOfLicensee;

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private PayrollReceiptTotals totals;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<PayrollReceiptTaxesInner> taxes = null;

  public static final String SERIALIZED_NAME_EMPLOYEE_COMPENSATIONS = "employee_compensations";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_COMPENSATIONS)
  private List<PayrollReceiptEmployeeCompensationsInner> employeeCompensations = null;

  public static final String SERIALIZED_NAME_LICENSEE = "licensee";
  @SerializedName(SERIALIZED_NAME_LICENSEE)
  private PayrollReceiptLicensee licensee;

  public PayrollReceipt() {
  }

  public PayrollReceipt payrollUuid(String payrollUuid) {
    
    
    
    
    this.payrollUuid = payrollUuid;
    return this;
  }

   /**
   * A unique identifier of the payroll receipt.
   * @return payrollUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "afccb970-357e-4013-81f5-85dafc74f9b6", value = "A unique identifier of the payroll receipt.")

  public String getPayrollUuid() {
    return payrollUuid;
  }


  public void setPayrollUuid(String payrollUuid) {
    
    
    
    this.payrollUuid = payrollUuid;
  }


  public PayrollReceipt companyUuid(String companyUuid) {
    
    
    
    
    this.companyUuid = companyUuid;
    return this;
  }

   /**
   * A unique identifier of the company for the payroll.
   * @return companyUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "c827aa0d-3928-4d5a-ab1f-400641a7d2b8", value = "A unique identifier of the company for the payroll.")

  public String getCompanyUuid() {
    return companyUuid;
  }


  public void setCompanyUuid(String companyUuid) {
    
    
    
    this.companyUuid = companyUuid;
  }


  public PayrollReceipt nameOfSender(String nameOfSender) {
    
    
    
    
    this.nameOfSender = nameOfSender;
    return this;
  }

   /**
   * The name of the company by whom the payroll was paid
   * @return nameOfSender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Torp and Sons and Sons", value = "The name of the company by whom the payroll was paid")

  public String getNameOfSender() {
    return nameOfSender;
  }


  public void setNameOfSender(String nameOfSender) {
    
    
    
    this.nameOfSender = nameOfSender;
  }


  public PayrollReceipt nameOfRecipient(String nameOfRecipient) {
    
    
    
    
    this.nameOfRecipient = nameOfRecipient;
    return this;
  }

   /**
   * Always the fixed string \&quot;Payroll Recipients\&quot;
   * @return nameOfRecipient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Payroll Recipients", value = "Always the fixed string \"Payroll Recipients\"")

  public String getNameOfRecipient() {
    return nameOfRecipient;
  }


  public void setNameOfRecipient(String nameOfRecipient) {
    
    
    
    this.nameOfRecipient = nameOfRecipient;
  }


  public PayrollReceipt recipientNotice(String recipientNotice) {
    
    
    
    
    this.recipientNotice = recipientNotice;
    return this;
  }

   /**
   * Always the fixed string \&quot;Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below.\&quot;
   * @return recipientNotice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below.", value = "Always the fixed string \"Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below.\"")

  public String getRecipientNotice() {
    return recipientNotice;
  }


  public void setRecipientNotice(String recipientNotice) {
    
    
    
    this.recipientNotice = recipientNotice;
  }


  public PayrollReceipt debitDate(String debitDate) {
    
    
    
    
    this.debitDate = debitDate;
    return this;
  }

   /**
   * The debit or funding date for the payroll
   * @return debitDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-06-02", value = "The debit or funding date for the payroll")

  public String getDebitDate() {
    return debitDate;
  }


  public void setDebitDate(String debitDate) {
    
    
    
    this.debitDate = debitDate;
  }


  public PayrollReceipt license(String license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * Always the fixed string \&quot;ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page.\&quot;
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page.", value = "Always the fixed string \"ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page.\"")

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    
    
    
    this.license = license;
  }


  public PayrollReceipt licenseUri(String licenseUri) {
    
    
    
    
    this.licenseUri = licenseUri;
    return this;
  }

   /**
   * URL for the license information for the licensed payroll processor. Always the fixed string \&quot;https://gusto.com/about/licenses\&quot;
   * @return licenseUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gusto.com/about/licenses", value = "URL for the license information for the licensed payroll processor. Always the fixed string \"https://gusto.com/about/licenses\"")

  public String getLicenseUri() {
    return licenseUri;
  }


  public void setLicenseUri(String licenseUri) {
    
    
    
    this.licenseUri = licenseUri;
  }


  public PayrollReceipt rightToRefund(String rightToRefund) {
    
    
    
    
    this.rightToRefund = rightToRefund;
    return this;
  }

   /**
   * 
   * @return rightToRefund
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gusto.com/about/licenses", value = "")

  public String getRightToRefund() {
    return rightToRefund;
  }


  public void setRightToRefund(String rightToRefund) {
    
    
    
    this.rightToRefund = rightToRefund;
  }


  public PayrollReceipt liabilityOfLicensee(String liabilityOfLicensee) {
    
    
    
    
    this.liabilityOfLicensee = liabilityOfLicensee;
    return this;
  }

   /**
   * 
   * @return liabilityOfLicensee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gusto.com/about/licenses", value = "")

  public String getLiabilityOfLicensee() {
    return liabilityOfLicensee;
  }


  public void setLiabilityOfLicensee(String liabilityOfLicensee) {
    
    
    
    this.liabilityOfLicensee = liabilityOfLicensee;
  }


  public PayrollReceipt totals(PayrollReceiptTotals totals) {
    
    
    
    
    this.totals = totals;
    return this;
  }

   /**
   * Get totals
   * @return totals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayrollReceiptTotals getTotals() {
    return totals;
  }


  public void setTotals(PayrollReceiptTotals totals) {
    
    
    
    this.totals = totals;
  }


  public PayrollReceipt taxes(List<PayrollReceiptTaxesInner> taxes) {
    
    
    
    
    this.taxes = taxes;
    return this;
  }

  public PayrollReceipt addTaxesItem(PayrollReceiptTaxesInner taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

   /**
   * An array of totaled employer and employee taxes for the pay period.
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of totaled employer and employee taxes for the pay period.")

  public List<PayrollReceiptTaxesInner> getTaxes() {
    return taxes;
  }


  public void setTaxes(List<PayrollReceiptTaxesInner> taxes) {
    
    
    
    this.taxes = taxes;
  }


  public PayrollReceipt employeeCompensations(List<PayrollReceiptEmployeeCompensationsInner> employeeCompensations) {
    
    
    
    
    this.employeeCompensations = employeeCompensations;
    return this;
  }

  public PayrollReceipt addEmployeeCompensationsItem(PayrollReceiptEmployeeCompensationsInner employeeCompensationsItem) {
    if (this.employeeCompensations == null) {
      this.employeeCompensations = new ArrayList<>();
    }
    this.employeeCompensations.add(employeeCompensationsItem);
    return this;
  }

   /**
   * An array of employee compensations and withholdings for this payroll
   * @return employeeCompensations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of employee compensations and withholdings for this payroll")

  public List<PayrollReceiptEmployeeCompensationsInner> getEmployeeCompensations() {
    return employeeCompensations;
  }


  public void setEmployeeCompensations(List<PayrollReceiptEmployeeCompensationsInner> employeeCompensations) {
    
    
    
    this.employeeCompensations = employeeCompensations;
  }


  public PayrollReceipt licensee(PayrollReceiptLicensee licensee) {
    
    
    
    
    this.licensee = licensee;
    return this;
  }

   /**
   * Get licensee
   * @return licensee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayrollReceiptLicensee getLicensee() {
    return licensee;
  }


  public void setLicensee(PayrollReceiptLicensee licensee) {
    
    
    
    this.licensee = licensee;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollReceipt instance itself
   */
  public PayrollReceipt putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollReceipt payrollReceipt = (PayrollReceipt) o;
    return Objects.equals(this.payrollUuid, payrollReceipt.payrollUuid) &&
        Objects.equals(this.companyUuid, payrollReceipt.companyUuid) &&
        Objects.equals(this.nameOfSender, payrollReceipt.nameOfSender) &&
        Objects.equals(this.nameOfRecipient, payrollReceipt.nameOfRecipient) &&
        Objects.equals(this.recipientNotice, payrollReceipt.recipientNotice) &&
        Objects.equals(this.debitDate, payrollReceipt.debitDate) &&
        Objects.equals(this.license, payrollReceipt.license) &&
        Objects.equals(this.licenseUri, payrollReceipt.licenseUri) &&
        Objects.equals(this.rightToRefund, payrollReceipt.rightToRefund) &&
        Objects.equals(this.liabilityOfLicensee, payrollReceipt.liabilityOfLicensee) &&
        Objects.equals(this.totals, payrollReceipt.totals) &&
        Objects.equals(this.taxes, payrollReceipt.taxes) &&
        Objects.equals(this.employeeCompensations, payrollReceipt.employeeCompensations) &&
        Objects.equals(this.licensee, payrollReceipt.licensee)&&
        Objects.equals(this.additionalProperties, payrollReceipt.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrollUuid, companyUuid, nameOfSender, nameOfRecipient, recipientNotice, debitDate, license, licenseUri, rightToRefund, liabilityOfLicensee, totals, taxes, employeeCompensations, licensee, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollReceipt {\n");
    sb.append("    payrollUuid: ").append(toIndentedString(payrollUuid)).append("\n");
    sb.append("    companyUuid: ").append(toIndentedString(companyUuid)).append("\n");
    sb.append("    nameOfSender: ").append(toIndentedString(nameOfSender)).append("\n");
    sb.append("    nameOfRecipient: ").append(toIndentedString(nameOfRecipient)).append("\n");
    sb.append("    recipientNotice: ").append(toIndentedString(recipientNotice)).append("\n");
    sb.append("    debitDate: ").append(toIndentedString(debitDate)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    licenseUri: ").append(toIndentedString(licenseUri)).append("\n");
    sb.append("    rightToRefund: ").append(toIndentedString(rightToRefund)).append("\n");
    sb.append("    liabilityOfLicensee: ").append(toIndentedString(liabilityOfLicensee)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    employeeCompensations: ").append(toIndentedString(employeeCompensations)).append("\n");
    sb.append("    licensee: ").append(toIndentedString(licensee)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payroll_uuid");
    openapiFields.add("company_uuid");
    openapiFields.add("name_of_sender");
    openapiFields.add("name_of_recipient");
    openapiFields.add("recipient_notice");
    openapiFields.add("debit_date");
    openapiFields.add("license");
    openapiFields.add("license_uri");
    openapiFields.add("right_to_refund");
    openapiFields.add("liability_of_licensee");
    openapiFields.add("totals");
    openapiFields.add("taxes");
    openapiFields.add("employee_compensations");
    openapiFields.add("licensee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollReceipt
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollReceipt.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollReceipt is not found in the empty JSON string", PayrollReceipt.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payroll_uuid") != null && !jsonObj.get("payroll_uuid").isJsonNull()) && !jsonObj.get("payroll_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payroll_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payroll_uuid").toString()));
      }
      if ((jsonObj.get("company_uuid") != null && !jsonObj.get("company_uuid").isJsonNull()) && !jsonObj.get("company_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_uuid").toString()));
      }
      if ((jsonObj.get("name_of_sender") != null && !jsonObj.get("name_of_sender").isJsonNull()) && !jsonObj.get("name_of_sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_of_sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_of_sender").toString()));
      }
      if ((jsonObj.get("name_of_recipient") != null && !jsonObj.get("name_of_recipient").isJsonNull()) && !jsonObj.get("name_of_recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_of_recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_of_recipient").toString()));
      }
      if ((jsonObj.get("recipient_notice") != null && !jsonObj.get("recipient_notice").isJsonNull()) && !jsonObj.get("recipient_notice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_notice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_notice").toString()));
      }
      if ((jsonObj.get("debit_date") != null && !jsonObj.get("debit_date").isJsonNull()) && !jsonObj.get("debit_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debit_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debit_date").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("license_uri") != null && !jsonObj.get("license_uri").isJsonNull()) && !jsonObj.get("license_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_uri").toString()));
      }
      if ((jsonObj.get("right_to_refund") != null && !jsonObj.get("right_to_refund").isJsonNull()) && !jsonObj.get("right_to_refund").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `right_to_refund` to be a primitive type in the JSON string but got `%s`", jsonObj.get("right_to_refund").toString()));
      }
      if ((jsonObj.get("liability_of_licensee") != null && !jsonObj.get("liability_of_licensee").isJsonNull()) && !jsonObj.get("liability_of_licensee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liability_of_licensee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liability_of_licensee").toString()));
      }
      // validate the optional field `totals`
      if (jsonObj.get("totals") != null && !jsonObj.get("totals").isJsonNull()) {
        PayrollReceiptTotals.validateJsonObject(jsonObj.getAsJsonObject("totals"));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            PayrollReceiptTaxesInner.validateJsonObject(jsonArraytaxes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("employee_compensations") != null && !jsonObj.get("employee_compensations").isJsonNull()) {
        JsonArray jsonArrayemployeeCompensations = jsonObj.getAsJsonArray("employee_compensations");
        if (jsonArrayemployeeCompensations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("employee_compensations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `employee_compensations` to be an array in the JSON string but got `%s`", jsonObj.get("employee_compensations").toString()));
          }

          // validate the optional field `employee_compensations` (array)
          for (int i = 0; i < jsonArrayemployeeCompensations.size(); i++) {
            PayrollReceiptEmployeeCompensationsInner.validateJsonObject(jsonArrayemployeeCompensations.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `licensee`
      if (jsonObj.get("licensee") != null && !jsonObj.get("licensee").isJsonNull()) {
        PayrollReceiptLicensee.validateJsonObject(jsonObj.getAsJsonObject("licensee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollReceipt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollReceipt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollReceipt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollReceipt.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollReceipt>() {
           @Override
           public void write(JsonWriter out, PayrollReceipt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollReceipt read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollReceipt instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollReceipt given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollReceipt
  * @throws IOException if the JSON string is invalid with respect to PayrollReceipt
  */
  public static PayrollReceipt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollReceipt.class);
  }

 /**
  * Convert an instance of PayrollReceipt to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

