/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BenefitTypeRequirementsEmployeeDeduction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BenefitTypeRequirements {
  public static final String SERIALIZED_NAME_EMPLOYEE_DEDUCTION = "employee_deduction";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_DEDUCTION)
  private BenefitTypeRequirementsEmployeeDeduction employeeDeduction;

  public static final String SERIALIZED_NAME_CONTRIBUTION = "contribution";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION)
  private BenefitTypeRequirementsEmployeeDeduction contribution;

  public static final String SERIALIZED_NAME_DEDUCT_AS_PERCENTAGE = "deduct_as_percentage";
  @SerializedName(SERIALIZED_NAME_DEDUCT_AS_PERCENTAGE)
  private BenefitTypeRequirementsEmployeeDeduction deductAsPercentage;

  public static final String SERIALIZED_NAME_CATCH_UP = "catch_up";
  @SerializedName(SERIALIZED_NAME_CATCH_UP)
  private BenefitTypeRequirementsEmployeeDeduction catchUp;

  public static final String SERIALIZED_NAME_LIMIT_OPTION = "limit_option";
  @SerializedName(SERIALIZED_NAME_LIMIT_OPTION)
  private BenefitTypeRequirementsEmployeeDeduction limitOption;

  public static final String SERIALIZED_NAME_COMPANY_CONTRIBUTION_ANNUAL_MAXIMUM = "company_contribution_annual_maximum";
  @SerializedName(SERIALIZED_NAME_COMPANY_CONTRIBUTION_ANNUAL_MAXIMUM)
  private BenefitTypeRequirementsEmployeeDeduction companyContributionAnnualMaximum;

  public static final String SERIALIZED_NAME_COVERAGE_SALARY_MULTIPLIER = "coverage_salary_multiplier";
  @SerializedName(SERIALIZED_NAME_COVERAGE_SALARY_MULTIPLIER)
  private BenefitTypeRequirementsEmployeeDeduction coverageSalaryMultiplier;

  public static final String SERIALIZED_NAME_COVERAGE_AMOUNT = "coverage_amount";
  @SerializedName(SERIALIZED_NAME_COVERAGE_AMOUNT)
  private BenefitTypeRequirementsEmployeeDeduction coverageAmount;

  public BenefitTypeRequirements() {
  }

  public BenefitTypeRequirements employeeDeduction(BenefitTypeRequirementsEmployeeDeduction employeeDeduction) {
    
    
    
    
    this.employeeDeduction = employeeDeduction;
    return this;
  }

   /**
   * Get employeeDeduction
   * @return employeeDeduction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitTypeRequirementsEmployeeDeduction getEmployeeDeduction() {
    return employeeDeduction;
  }


  public void setEmployeeDeduction(BenefitTypeRequirementsEmployeeDeduction employeeDeduction) {
    
    
    
    this.employeeDeduction = employeeDeduction;
  }


  public BenefitTypeRequirements contribution(BenefitTypeRequirementsEmployeeDeduction contribution) {
    
    
    
    
    this.contribution = contribution;
    return this;
  }

   /**
   * Get contribution
   * @return contribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitTypeRequirementsEmployeeDeduction getContribution() {
    return contribution;
  }


  public void setContribution(BenefitTypeRequirementsEmployeeDeduction contribution) {
    
    
    
    this.contribution = contribution;
  }


  public BenefitTypeRequirements deductAsPercentage(BenefitTypeRequirementsEmployeeDeduction deductAsPercentage) {
    
    
    
    
    this.deductAsPercentage = deductAsPercentage;
    return this;
  }

   /**
   * Get deductAsPercentage
   * @return deductAsPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitTypeRequirementsEmployeeDeduction getDeductAsPercentage() {
    return deductAsPercentage;
  }


  public void setDeductAsPercentage(BenefitTypeRequirementsEmployeeDeduction deductAsPercentage) {
    
    
    
    this.deductAsPercentage = deductAsPercentage;
  }


  public BenefitTypeRequirements catchUp(BenefitTypeRequirementsEmployeeDeduction catchUp) {
    
    
    
    
    this.catchUp = catchUp;
    return this;
  }

   /**
   * Get catchUp
   * @return catchUp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitTypeRequirementsEmployeeDeduction getCatchUp() {
    return catchUp;
  }


  public void setCatchUp(BenefitTypeRequirementsEmployeeDeduction catchUp) {
    
    
    
    this.catchUp = catchUp;
  }


  public BenefitTypeRequirements limitOption(BenefitTypeRequirementsEmployeeDeduction limitOption) {
    
    
    
    
    this.limitOption = limitOption;
    return this;
  }

   /**
   * Get limitOption
   * @return limitOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitTypeRequirementsEmployeeDeduction getLimitOption() {
    return limitOption;
  }


  public void setLimitOption(BenefitTypeRequirementsEmployeeDeduction limitOption) {
    
    
    
    this.limitOption = limitOption;
  }


  public BenefitTypeRequirements companyContributionAnnualMaximum(BenefitTypeRequirementsEmployeeDeduction companyContributionAnnualMaximum) {
    
    
    
    
    this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
    return this;
  }

   /**
   * Get companyContributionAnnualMaximum
   * @return companyContributionAnnualMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitTypeRequirementsEmployeeDeduction getCompanyContributionAnnualMaximum() {
    return companyContributionAnnualMaximum;
  }


  public void setCompanyContributionAnnualMaximum(BenefitTypeRequirementsEmployeeDeduction companyContributionAnnualMaximum) {
    
    
    
    this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
  }


  public BenefitTypeRequirements coverageSalaryMultiplier(BenefitTypeRequirementsEmployeeDeduction coverageSalaryMultiplier) {
    
    
    
    
    this.coverageSalaryMultiplier = coverageSalaryMultiplier;
    return this;
  }

   /**
   * Get coverageSalaryMultiplier
   * @return coverageSalaryMultiplier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitTypeRequirementsEmployeeDeduction getCoverageSalaryMultiplier() {
    return coverageSalaryMultiplier;
  }


  public void setCoverageSalaryMultiplier(BenefitTypeRequirementsEmployeeDeduction coverageSalaryMultiplier) {
    
    
    
    this.coverageSalaryMultiplier = coverageSalaryMultiplier;
  }


  public BenefitTypeRequirements coverageAmount(BenefitTypeRequirementsEmployeeDeduction coverageAmount) {
    
    
    
    
    this.coverageAmount = coverageAmount;
    return this;
  }

   /**
   * Get coverageAmount
   * @return coverageAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitTypeRequirementsEmployeeDeduction getCoverageAmount() {
    return coverageAmount;
  }


  public void setCoverageAmount(BenefitTypeRequirementsEmployeeDeduction coverageAmount) {
    
    
    
    this.coverageAmount = coverageAmount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BenefitTypeRequirements instance itself
   */
  public BenefitTypeRequirements putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BenefitTypeRequirements benefitTypeRequirements = (BenefitTypeRequirements) o;
    return Objects.equals(this.employeeDeduction, benefitTypeRequirements.employeeDeduction) &&
        Objects.equals(this.contribution, benefitTypeRequirements.contribution) &&
        Objects.equals(this.deductAsPercentage, benefitTypeRequirements.deductAsPercentage) &&
        Objects.equals(this.catchUp, benefitTypeRequirements.catchUp) &&
        Objects.equals(this.limitOption, benefitTypeRequirements.limitOption) &&
        Objects.equals(this.companyContributionAnnualMaximum, benefitTypeRequirements.companyContributionAnnualMaximum) &&
        Objects.equals(this.coverageSalaryMultiplier, benefitTypeRequirements.coverageSalaryMultiplier) &&
        Objects.equals(this.coverageAmount, benefitTypeRequirements.coverageAmount)&&
        Objects.equals(this.additionalProperties, benefitTypeRequirements.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeDeduction, contribution, deductAsPercentage, catchUp, limitOption, companyContributionAnnualMaximum, coverageSalaryMultiplier, coverageAmount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BenefitTypeRequirements {\n");
    sb.append("    employeeDeduction: ").append(toIndentedString(employeeDeduction)).append("\n");
    sb.append("    contribution: ").append(toIndentedString(contribution)).append("\n");
    sb.append("    deductAsPercentage: ").append(toIndentedString(deductAsPercentage)).append("\n");
    sb.append("    catchUp: ").append(toIndentedString(catchUp)).append("\n");
    sb.append("    limitOption: ").append(toIndentedString(limitOption)).append("\n");
    sb.append("    companyContributionAnnualMaximum: ").append(toIndentedString(companyContributionAnnualMaximum)).append("\n");
    sb.append("    coverageSalaryMultiplier: ").append(toIndentedString(coverageSalaryMultiplier)).append("\n");
    sb.append("    coverageAmount: ").append(toIndentedString(coverageAmount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employee_deduction");
    openapiFields.add("contribution");
    openapiFields.add("deduct_as_percentage");
    openapiFields.add("catch_up");
    openapiFields.add("limit_option");
    openapiFields.add("company_contribution_annual_maximum");
    openapiFields.add("coverage_salary_multiplier");
    openapiFields.add("coverage_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BenefitTypeRequirements
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BenefitTypeRequirements.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BenefitTypeRequirements is not found in the empty JSON string", BenefitTypeRequirements.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `employee_deduction`
      if (jsonObj.get("employee_deduction") != null && !jsonObj.get("employee_deduction").isJsonNull()) {
        BenefitTypeRequirementsEmployeeDeduction.validateJsonObject(jsonObj.getAsJsonObject("employee_deduction"));
      }
      // validate the optional field `contribution`
      if (jsonObj.get("contribution") != null && !jsonObj.get("contribution").isJsonNull()) {
        BenefitTypeRequirementsEmployeeDeduction.validateJsonObject(jsonObj.getAsJsonObject("contribution"));
      }
      // validate the optional field `deduct_as_percentage`
      if (jsonObj.get("deduct_as_percentage") != null && !jsonObj.get("deduct_as_percentage").isJsonNull()) {
        BenefitTypeRequirementsEmployeeDeduction.validateJsonObject(jsonObj.getAsJsonObject("deduct_as_percentage"));
      }
      // validate the optional field `catch_up`
      if (jsonObj.get("catch_up") != null && !jsonObj.get("catch_up").isJsonNull()) {
        BenefitTypeRequirementsEmployeeDeduction.validateJsonObject(jsonObj.getAsJsonObject("catch_up"));
      }
      // validate the optional field `limit_option`
      if (jsonObj.get("limit_option") != null && !jsonObj.get("limit_option").isJsonNull()) {
        BenefitTypeRequirementsEmployeeDeduction.validateJsonObject(jsonObj.getAsJsonObject("limit_option"));
      }
      // validate the optional field `company_contribution_annual_maximum`
      if (jsonObj.get("company_contribution_annual_maximum") != null && !jsonObj.get("company_contribution_annual_maximum").isJsonNull()) {
        BenefitTypeRequirementsEmployeeDeduction.validateJsonObject(jsonObj.getAsJsonObject("company_contribution_annual_maximum"));
      }
      // validate the optional field `coverage_salary_multiplier`
      if (jsonObj.get("coverage_salary_multiplier") != null && !jsonObj.get("coverage_salary_multiplier").isJsonNull()) {
        BenefitTypeRequirementsEmployeeDeduction.validateJsonObject(jsonObj.getAsJsonObject("coverage_salary_multiplier"));
      }
      // validate the optional field `coverage_amount`
      if (jsonObj.get("coverage_amount") != null && !jsonObj.get("coverage_amount").isJsonNull()) {
        BenefitTypeRequirementsEmployeeDeduction.validateJsonObject(jsonObj.getAsJsonObject("coverage_amount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BenefitTypeRequirements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BenefitTypeRequirements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BenefitTypeRequirements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BenefitTypeRequirements.class));

       return (TypeAdapter<T>) new TypeAdapter<BenefitTypeRequirements>() {
           @Override
           public void write(JsonWriter out, BenefitTypeRequirements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BenefitTypeRequirements read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BenefitTypeRequirements instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BenefitTypeRequirements given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BenefitTypeRequirements
  * @throws IOException if the JSON string is invalid with respect to BenefitTypeRequirements
  */
  public static BenefitTypeRequirements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BenefitTypeRequirements.class);
  }

 /**
  * Convert an instance of BenefitTypeRequirements to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

