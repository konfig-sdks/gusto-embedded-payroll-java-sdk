/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the payroll&#39;s status and expected dates
 */
@ApiModel(description = "Information about the payroll's status and expected dates")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollPayrollStatusMetaType {
  public static final String SERIALIZED_NAME_CANCELLABLE = "cancellable";
  @SerializedName(SERIALIZED_NAME_CANCELLABLE)
  private Boolean cancellable;

  public static final String SERIALIZED_NAME_EXPECTED_CHECK_DATE = "expected_check_date";
  @SerializedName(SERIALIZED_NAME_EXPECTED_CHECK_DATE)
  private String expectedCheckDate;

  public static final String SERIALIZED_NAME_INITIAL_CHECK_DATE = "initial_check_date";
  @SerializedName(SERIALIZED_NAME_INITIAL_CHECK_DATE)
  private String initialCheckDate;

  public static final String SERIALIZED_NAME_EXPECTED_DEBIT_TIME = "expected_debit_time";
  @SerializedName(SERIALIZED_NAME_EXPECTED_DEBIT_TIME)
  private String expectedDebitTime;

  public static final String SERIALIZED_NAME_PAYROLL_LATE = "payroll_late";
  @SerializedName(SERIALIZED_NAME_PAYROLL_LATE)
  private Boolean payrollLate;

  public static final String SERIALIZED_NAME_INITIAL_DEBIT_CUTOFF_TIME = "initial_debit_cutoff_time";
  @SerializedName(SERIALIZED_NAME_INITIAL_DEBIT_CUTOFF_TIME)
  private String initialDebitCutoffTime;

  public PayrollPayrollStatusMetaType() {
  }

  
  public PayrollPayrollStatusMetaType(
     Boolean cancellable, 
     String expectedCheckDate, 
     String initialCheckDate, 
     String expectedDebitTime, 
     Boolean payrollLate, 
     String initialDebitCutoffTime
  ) {
    this();
    this.cancellable = cancellable;
    this.expectedCheckDate = expectedCheckDate;
    this.initialCheckDate = initialCheckDate;
    this.expectedDebitTime = expectedDebitTime;
    this.payrollLate = payrollLate;
    this.initialDebitCutoffTime = initialDebitCutoffTime;
  }

   /**
   * true if the payroll may be cancelled
   * @return cancellable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "true if the payroll may be cancelled")

  public Boolean getCancellable() {
    return cancellable;
  }




   /**
   * The date an employee will be paid if the payroll is submitted now
   * @return expectedCheckDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date an employee will be paid if the payroll is submitted now")

  public String getExpectedCheckDate() {
    return expectedCheckDate;
  }




   /**
   * The normal check date for the associated pay period
   * @return initialCheckDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The normal check date for the associated pay period")

  public String getInitialCheckDate() {
    return initialCheckDate;
  }




   /**
   * The time the employer&#39;s account will be debited if the payroll is submitted now
   * @return expectedDebitTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time the employer's account will be debited if the payroll is submitted now")

  public String getExpectedDebitTime() {
    return expectedDebitTime;
  }




   /**
   * expected_check_date &gt; initial_check_date
   * @return payrollLate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "expected_check_date > initial_check_date")

  public Boolean getPayrollLate() {
    return payrollLate;
  }




   /**
   * Payroll must be submitted at or before this time to avoid late payroll
   * @return initialDebitCutoffTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payroll must be submitted at or before this time to avoid late payroll")

  public String getInitialDebitCutoffTime() {
    return initialDebitCutoffTime;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollPayrollStatusMetaType instance itself
   */
  public PayrollPayrollStatusMetaType putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollPayrollStatusMetaType payrollPayrollStatusMetaType = (PayrollPayrollStatusMetaType) o;
    return Objects.equals(this.cancellable, payrollPayrollStatusMetaType.cancellable) &&
        Objects.equals(this.expectedCheckDate, payrollPayrollStatusMetaType.expectedCheckDate) &&
        Objects.equals(this.initialCheckDate, payrollPayrollStatusMetaType.initialCheckDate) &&
        Objects.equals(this.expectedDebitTime, payrollPayrollStatusMetaType.expectedDebitTime) &&
        Objects.equals(this.payrollLate, payrollPayrollStatusMetaType.payrollLate) &&
        Objects.equals(this.initialDebitCutoffTime, payrollPayrollStatusMetaType.initialDebitCutoffTime)&&
        Objects.equals(this.additionalProperties, payrollPayrollStatusMetaType.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellable, expectedCheckDate, initialCheckDate, expectedDebitTime, payrollLate, initialDebitCutoffTime, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollPayrollStatusMetaType {\n");
    sb.append("    cancellable: ").append(toIndentedString(cancellable)).append("\n");
    sb.append("    expectedCheckDate: ").append(toIndentedString(expectedCheckDate)).append("\n");
    sb.append("    initialCheckDate: ").append(toIndentedString(initialCheckDate)).append("\n");
    sb.append("    expectedDebitTime: ").append(toIndentedString(expectedDebitTime)).append("\n");
    sb.append("    payrollLate: ").append(toIndentedString(payrollLate)).append("\n");
    sb.append("    initialDebitCutoffTime: ").append(toIndentedString(initialDebitCutoffTime)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancellable");
    openapiFields.add("expected_check_date");
    openapiFields.add("initial_check_date");
    openapiFields.add("expected_debit_time");
    openapiFields.add("payroll_late");
    openapiFields.add("initial_debit_cutoff_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollPayrollStatusMetaType
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollPayrollStatusMetaType.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollPayrollStatusMetaType is not found in the empty JSON string", PayrollPayrollStatusMetaType.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("expected_check_date") != null && !jsonObj.get("expected_check_date").isJsonNull()) && !jsonObj.get("expected_check_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expected_check_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expected_check_date").toString()));
      }
      if ((jsonObj.get("initial_check_date") != null && !jsonObj.get("initial_check_date").isJsonNull()) && !jsonObj.get("initial_check_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_check_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initial_check_date").toString()));
      }
      if ((jsonObj.get("expected_debit_time") != null && !jsonObj.get("expected_debit_time").isJsonNull()) && !jsonObj.get("expected_debit_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expected_debit_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expected_debit_time").toString()));
      }
      if ((jsonObj.get("initial_debit_cutoff_time") != null && !jsonObj.get("initial_debit_cutoff_time").isJsonNull()) && !jsonObj.get("initial_debit_cutoff_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_debit_cutoff_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initial_debit_cutoff_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollPayrollStatusMetaType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollPayrollStatusMetaType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollPayrollStatusMetaType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollPayrollStatusMetaType.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollPayrollStatusMetaType>() {
           @Override
           public void write(JsonWriter out, PayrollPayrollStatusMetaType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollPayrollStatusMetaType read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollPayrollStatusMetaType instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollPayrollStatusMetaType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollPayrollStatusMetaType
  * @throws IOException if the JSON string is invalid with respect to PayrollPayrollStatusMetaType
  */
  public static PayrollPayrollStatusMetaType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollPayrollStatusMetaType.class);
  }

 /**
  * Convert an instance of PayrollPayrollStatusMetaType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

