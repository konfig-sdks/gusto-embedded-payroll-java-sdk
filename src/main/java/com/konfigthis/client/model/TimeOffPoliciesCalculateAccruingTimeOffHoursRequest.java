/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffPoliciesCalculateAccruingTimeOffHoursRequest {
  public static final String SERIALIZED_NAME_REGULAR_HOURS_WORKED = "regular_hours_worked";
  @SerializedName(SERIALIZED_NAME_REGULAR_HOURS_WORKED)
  private Double regularHoursWorked;

  public static final String SERIALIZED_NAME_OVERTIME_HOURS_WORKED = "overtime_hours_worked";
  @SerializedName(SERIALIZED_NAME_OVERTIME_HOURS_WORKED)
  private Double overtimeHoursWorked;

  public static final String SERIALIZED_NAME_DOUBLE_OVERTIME_HOURS_WORKED = "double_overtime_hours_worked";
  @SerializedName(SERIALIZED_NAME_DOUBLE_OVERTIME_HOURS_WORKED)
  private Double doubleOvertimeHoursWorked;

  public static final String SERIALIZED_NAME_PTO_HOURS_USED = "pto_hours_used";
  @SerializedName(SERIALIZED_NAME_PTO_HOURS_USED)
  private Double ptoHoursUsed;

  public static final String SERIALIZED_NAME_SICK_HOURS_USED = "sick_hours_used";
  @SerializedName(SERIALIZED_NAME_SICK_HOURS_USED)
  private Double sickHoursUsed;

  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest() {
  }

  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest regularHoursWorked(Double regularHoursWorked) {
    
    
    
    
    this.regularHoursWorked = regularHoursWorked;
    return this;
  }

  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest regularHoursWorked(Integer regularHoursWorked) {
    
    
    
    
    this.regularHoursWorked = regularHoursWorked.doubleValue();
    return this;
  }

   /**
   * regular hours worked in this pay period
   * @return regularHoursWorked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "regular hours worked in this pay period")

  public Double getRegularHoursWorked() {
    return regularHoursWorked;
  }


  public void setRegularHoursWorked(Double regularHoursWorked) {
    
    
    
    this.regularHoursWorked = regularHoursWorked;
  }


  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest overtimeHoursWorked(Double overtimeHoursWorked) {
    
    
    
    
    this.overtimeHoursWorked = overtimeHoursWorked;
    return this;
  }

  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest overtimeHoursWorked(Integer overtimeHoursWorked) {
    
    
    
    
    this.overtimeHoursWorked = overtimeHoursWorked.doubleValue();
    return this;
  }

   /**
   * overtime hours worked in this pay period
   * @return overtimeHoursWorked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "overtime hours worked in this pay period")

  public Double getOvertimeHoursWorked() {
    return overtimeHoursWorked;
  }


  public void setOvertimeHoursWorked(Double overtimeHoursWorked) {
    
    
    
    this.overtimeHoursWorked = overtimeHoursWorked;
  }


  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest doubleOvertimeHoursWorked(Double doubleOvertimeHoursWorked) {
    
    
    
    
    this.doubleOvertimeHoursWorked = doubleOvertimeHoursWorked;
    return this;
  }

  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest doubleOvertimeHoursWorked(Integer doubleOvertimeHoursWorked) {
    
    
    
    
    this.doubleOvertimeHoursWorked = doubleOvertimeHoursWorked.doubleValue();
    return this;
  }

   /**
   * double overtime hours worked in this pay period
   * @return doubleOvertimeHoursWorked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "double overtime hours worked in this pay period")

  public Double getDoubleOvertimeHoursWorked() {
    return doubleOvertimeHoursWorked;
  }


  public void setDoubleOvertimeHoursWorked(Double doubleOvertimeHoursWorked) {
    
    
    
    this.doubleOvertimeHoursWorked = doubleOvertimeHoursWorked;
  }


  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest ptoHoursUsed(Double ptoHoursUsed) {
    
    
    
    
    this.ptoHoursUsed = ptoHoursUsed;
    return this;
  }

  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest ptoHoursUsed(Integer ptoHoursUsed) {
    
    
    
    
    this.ptoHoursUsed = ptoHoursUsed.doubleValue();
    return this;
  }

   /**
   * paid time off hours used in this pay period
   * @return ptoHoursUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "paid time off hours used in this pay period")

  public Double getPtoHoursUsed() {
    return ptoHoursUsed;
  }


  public void setPtoHoursUsed(Double ptoHoursUsed) {
    
    
    
    this.ptoHoursUsed = ptoHoursUsed;
  }


  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest sickHoursUsed(Double sickHoursUsed) {
    
    
    
    
    this.sickHoursUsed = sickHoursUsed;
    return this;
  }

  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest sickHoursUsed(Integer sickHoursUsed) {
    
    
    
    
    this.sickHoursUsed = sickHoursUsed.doubleValue();
    return this;
  }

   /**
   * sick hours used in this pay period
   * @return sickHoursUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sick hours used in this pay period")

  public Double getSickHoursUsed() {
    return sickHoursUsed;
  }


  public void setSickHoursUsed(Double sickHoursUsed) {
    
    
    
    this.sickHoursUsed = sickHoursUsed;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffPoliciesCalculateAccruingTimeOffHoursRequest instance itself
   */
  public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest = (TimeOffPoliciesCalculateAccruingTimeOffHoursRequest) o;
    return Objects.equals(this.regularHoursWorked, timeOffPoliciesCalculateAccruingTimeOffHoursRequest.regularHoursWorked) &&
        Objects.equals(this.overtimeHoursWorked, timeOffPoliciesCalculateAccruingTimeOffHoursRequest.overtimeHoursWorked) &&
        Objects.equals(this.doubleOvertimeHoursWorked, timeOffPoliciesCalculateAccruingTimeOffHoursRequest.doubleOvertimeHoursWorked) &&
        Objects.equals(this.ptoHoursUsed, timeOffPoliciesCalculateAccruingTimeOffHoursRequest.ptoHoursUsed) &&
        Objects.equals(this.sickHoursUsed, timeOffPoliciesCalculateAccruingTimeOffHoursRequest.sickHoursUsed)&&
        Objects.equals(this.additionalProperties, timeOffPoliciesCalculateAccruingTimeOffHoursRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regularHoursWorked, overtimeHoursWorked, doubleOvertimeHoursWorked, ptoHoursUsed, sickHoursUsed, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffPoliciesCalculateAccruingTimeOffHoursRequest {\n");
    sb.append("    regularHoursWorked: ").append(toIndentedString(regularHoursWorked)).append("\n");
    sb.append("    overtimeHoursWorked: ").append(toIndentedString(overtimeHoursWorked)).append("\n");
    sb.append("    doubleOvertimeHoursWorked: ").append(toIndentedString(doubleOvertimeHoursWorked)).append("\n");
    sb.append("    ptoHoursUsed: ").append(toIndentedString(ptoHoursUsed)).append("\n");
    sb.append("    sickHoursUsed: ").append(toIndentedString(sickHoursUsed)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("regular_hours_worked");
    openapiFields.add("overtime_hours_worked");
    openapiFields.add("double_overtime_hours_worked");
    openapiFields.add("pto_hours_used");
    openapiFields.add("sick_hours_used");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffPoliciesCalculateAccruingTimeOffHoursRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffPoliciesCalculateAccruingTimeOffHoursRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffPoliciesCalculateAccruingTimeOffHoursRequest is not found in the empty JSON string", TimeOffPoliciesCalculateAccruingTimeOffHoursRequest.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffPoliciesCalculateAccruingTimeOffHoursRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffPoliciesCalculateAccruingTimeOffHoursRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffPoliciesCalculateAccruingTimeOffHoursRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffPoliciesCalculateAccruingTimeOffHoursRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffPoliciesCalculateAccruingTimeOffHoursRequest>() {
           @Override
           public void write(JsonWriter out, TimeOffPoliciesCalculateAccruingTimeOffHoursRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffPoliciesCalculateAccruingTimeOffHoursRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffPoliciesCalculateAccruingTimeOffHoursRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffPoliciesCalculateAccruingTimeOffHoursRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffPoliciesCalculateAccruingTimeOffHoursRequest
  * @throws IOException if the JSON string is invalid with respect to TimeOffPoliciesCalculateAccruingTimeOffHoursRequest
  */
  public static TimeOffPoliciesCalculateAccruingTimeOffHoursRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffPoliciesCalculateAccruingTimeOffHoursRequest.class);
  }

 /**
  * Convert an instance of TimeOffPoliciesCalculateAccruingTimeOffHoursRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

