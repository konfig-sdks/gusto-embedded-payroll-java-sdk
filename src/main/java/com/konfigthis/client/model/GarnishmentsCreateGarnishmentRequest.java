/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GarnishmentsCreateGarnishmentRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_COURT_ORDERED = "court_ordered";
  @SerializedName(SERIALIZED_NAME_COURT_ORDERED)
  private Boolean courtOrdered;

  public static final String SERIALIZED_NAME_TIMES = "times";
  @SerializedName(SERIALIZED_NAME_TIMES)
  private Integer times;

  public static final String SERIALIZED_NAME_RECURRING = "recurring";
  @SerializedName(SERIALIZED_NAME_RECURRING)
  private Boolean recurring = false;

  public static final String SERIALIZED_NAME_ANNUAL_MAXIMUM = "annual_maximum";
  @SerializedName(SERIALIZED_NAME_ANNUAL_MAXIMUM)
  private Float annualMaximum;

  public static final String SERIALIZED_NAME_PAY_PERIOD_MAXIMUM = "pay_period_maximum";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_MAXIMUM)
  private Float payPeriodMaximum;

  public static final String SERIALIZED_NAME_DEDUCT_AS_PERCENTAGE = "deduct_as_percentage";
  @SerializedName(SERIALIZED_NAME_DEDUCT_AS_PERCENTAGE)
  private Boolean deductAsPercentage = false;

  public GarnishmentsCreateGarnishmentRequest() {
  }

  public GarnishmentsCreateGarnishmentRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the garnishment.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The description of the garnishment.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public GarnishmentsCreateGarnishmentRequest active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Whether or not this garnishment is currently active.
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether or not this garnishment is currently active.")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public GarnishmentsCreateGarnishmentRequest amount(Float amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. \&quot;8.00\&quot;.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. \"8.00\".")

  public Float getAmount() {
    return amount;
  }


  public void setAmount(Float amount) {
    
    
    
    this.amount = amount;
  }


  public GarnishmentsCreateGarnishmentRequest courtOrdered(Boolean courtOrdered) {
    
    
    
    
    this.courtOrdered = courtOrdered;
    return this;
  }

   /**
   * Whether the garnishment is court ordered.
   * @return courtOrdered
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the garnishment is court ordered.")

  public Boolean getCourtOrdered() {
    return courtOrdered;
  }


  public void setCourtOrdered(Boolean courtOrdered) {
    
    
    
    this.courtOrdered = courtOrdered;
  }


  public GarnishmentsCreateGarnishmentRequest times(Integer times) {
    
    
    
    
    this.times = times;
    return this;
  }

   /**
   * The number of times to apply the garnishment. Ignored if recurring is true.
   * @return times
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of times to apply the garnishment. Ignored if recurring is true.")

  public Integer getTimes() {
    return times;
  }


  public void setTimes(Integer times) {
    
    
    
    this.times = times;
  }


  public GarnishmentsCreateGarnishmentRequest recurring(Boolean recurring) {
    
    
    
    
    this.recurring = recurring;
    return this;
  }

   /**
   * Whether the garnishment should recur indefinitely.
   * @return recurring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the garnishment should recur indefinitely.")

  public Boolean getRecurring() {
    return recurring;
  }


  public void setRecurring(Boolean recurring) {
    
    
    
    this.recurring = recurring;
  }


  public GarnishmentsCreateGarnishmentRequest annualMaximum(Float annualMaximum) {
    
    
    
    
    this.annualMaximum = annualMaximum;
    return this;
  }

   /**
   * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. \&quot;200.00\&quot;.
   * @return annualMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. \"200.00\".")

  public Float getAnnualMaximum() {
    return annualMaximum;
  }


  public void setAnnualMaximum(Float annualMaximum) {
    
    
    
    this.annualMaximum = annualMaximum;
  }


  public GarnishmentsCreateGarnishmentRequest payPeriodMaximum(Float payPeriodMaximum) {
    
    
    
    
    this.payPeriodMaximum = payPeriodMaximum;
    return this;
  }

   /**
   * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. \&quot;16.00\&quot;.
   * @return payPeriodMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. \"16.00\".")

  public Float getPayPeriodMaximum() {
    return payPeriodMaximum;
  }


  public void setPayPeriodMaximum(Float payPeriodMaximum) {
    
    
    
    this.payPeriodMaximum = payPeriodMaximum;
  }


  public GarnishmentsCreateGarnishmentRequest deductAsPercentage(Boolean deductAsPercentage) {
    
    
    
    
    this.deductAsPercentage = deductAsPercentage;
    return this;
  }

   /**
   * Whether the amount should be treated as a percentage to be deducted per pay period.
   * @return deductAsPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the amount should be treated as a percentage to be deducted per pay period.")

  public Boolean getDeductAsPercentage() {
    return deductAsPercentage;
  }


  public void setDeductAsPercentage(Boolean deductAsPercentage) {
    
    
    
    this.deductAsPercentage = deductAsPercentage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GarnishmentsCreateGarnishmentRequest instance itself
   */
  public GarnishmentsCreateGarnishmentRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest = (GarnishmentsCreateGarnishmentRequest) o;
    return Objects.equals(this.description, garnishmentsCreateGarnishmentRequest.description) &&
        Objects.equals(this.active, garnishmentsCreateGarnishmentRequest.active) &&
        Objects.equals(this.amount, garnishmentsCreateGarnishmentRequest.amount) &&
        Objects.equals(this.courtOrdered, garnishmentsCreateGarnishmentRequest.courtOrdered) &&
        Objects.equals(this.times, garnishmentsCreateGarnishmentRequest.times) &&
        Objects.equals(this.recurring, garnishmentsCreateGarnishmentRequest.recurring) &&
        Objects.equals(this.annualMaximum, garnishmentsCreateGarnishmentRequest.annualMaximum) &&
        Objects.equals(this.payPeriodMaximum, garnishmentsCreateGarnishmentRequest.payPeriodMaximum) &&
        Objects.equals(this.deductAsPercentage, garnishmentsCreateGarnishmentRequest.deductAsPercentage)&&
        Objects.equals(this.additionalProperties, garnishmentsCreateGarnishmentRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, active, amount, courtOrdered, times, recurring, annualMaximum, payPeriodMaximum, deductAsPercentage, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GarnishmentsCreateGarnishmentRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    courtOrdered: ").append(toIndentedString(courtOrdered)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    annualMaximum: ").append(toIndentedString(annualMaximum)).append("\n");
    sb.append("    payPeriodMaximum: ").append(toIndentedString(payPeriodMaximum)).append("\n");
    sb.append("    deductAsPercentage: ").append(toIndentedString(deductAsPercentage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("active");
    openapiFields.add("amount");
    openapiFields.add("court_ordered");
    openapiFields.add("times");
    openapiFields.add("recurring");
    openapiFields.add("annual_maximum");
    openapiFields.add("pay_period_maximum");
    openapiFields.add("deduct_as_percentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("court_ordered");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GarnishmentsCreateGarnishmentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GarnishmentsCreateGarnishmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GarnishmentsCreateGarnishmentRequest is not found in the empty JSON string", GarnishmentsCreateGarnishmentRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GarnishmentsCreateGarnishmentRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("annual_maximum").isJsonNull() && (jsonObj.get("annual_maximum") != null && !jsonObj.get("annual_maximum").isJsonNull()) && !jsonObj.get("annual_maximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annual_maximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annual_maximum").toString()));
      }
      if (!jsonObj.get("pay_period_maximum").isJsonNull() && (jsonObj.get("pay_period_maximum") != null && !jsonObj.get("pay_period_maximum").isJsonNull()) && !jsonObj.get("pay_period_maximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pay_period_maximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pay_period_maximum").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GarnishmentsCreateGarnishmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GarnishmentsCreateGarnishmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GarnishmentsCreateGarnishmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GarnishmentsCreateGarnishmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GarnishmentsCreateGarnishmentRequest>() {
           @Override
           public void write(JsonWriter out, GarnishmentsCreateGarnishmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GarnishmentsCreateGarnishmentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GarnishmentsCreateGarnishmentRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GarnishmentsCreateGarnishmentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GarnishmentsCreateGarnishmentRequest
  * @throws IOException if the JSON string is invalid with respect to GarnishmentsCreateGarnishmentRequest
  */
  public static GarnishmentsCreateGarnishmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GarnishmentsCreateGarnishmentRequest.class);
  }

 /**
  * Convert an instance of GarnishmentsCreateGarnishmentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

