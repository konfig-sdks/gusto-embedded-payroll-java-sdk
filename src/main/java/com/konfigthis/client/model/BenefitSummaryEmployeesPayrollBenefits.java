/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BenefitSummaryEmployeesPayrollBenefitsPayPeriod;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BenefitSummaryEmployeesPayrollBenefits
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BenefitSummaryEmployeesPayrollBenefits {
  public static final String SERIALIZED_NAME_PAYROLL_UUID = "payroll_uuid";
  @SerializedName(SERIALIZED_NAME_PAYROLL_UUID)
  private String payrollUuid;

  public static final String SERIALIZED_NAME_PAYROLL_TYPE = "payroll_type";
  @SerializedName(SERIALIZED_NAME_PAYROLL_TYPE)
  private String payrollType;

  public static final String SERIALIZED_NAME_CHECK_DATE = "check_date";
  @SerializedName(SERIALIZED_NAME_CHECK_DATE)
  private String checkDate;

  public static final String SERIALIZED_NAME_GROSS_PAY = "gross_pay";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY)
  private String grossPay;

  public static final String SERIALIZED_NAME_COMPANY_BENEFIT_DEDUCTION = "company_benefit_deduction";
  @SerializedName(SERIALIZED_NAME_COMPANY_BENEFIT_DEDUCTION)
  private String companyBenefitDeduction;

  public static final String SERIALIZED_NAME_COMPANY_BENEFIT_CONTRIBUTION = "company_benefit_contribution";
  @SerializedName(SERIALIZED_NAME_COMPANY_BENEFIT_CONTRIBUTION)
  private String companyBenefitContribution;

  public static final String SERIALIZED_NAME_PAY_PERIOD = "pay_period";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD)
  private BenefitSummaryEmployeesPayrollBenefitsPayPeriod payPeriod;

  public BenefitSummaryEmployeesPayrollBenefits() {
  }

  public BenefitSummaryEmployeesPayrollBenefits payrollUuid(String payrollUuid) {
    
    
    
    
    this.payrollUuid = payrollUuid;
    return this;
  }

   /**
   * Get payrollUuid
   * @return payrollUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayrollUuid() {
    return payrollUuid;
  }


  public void setPayrollUuid(String payrollUuid) {
    
    
    
    this.payrollUuid = payrollUuid;
  }


  public BenefitSummaryEmployeesPayrollBenefits payrollType(String payrollType) {
    
    
    
    
    this.payrollType = payrollType;
    return this;
  }

   /**
   * Whether it is regular or bonus payroll
   * @return payrollType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether it is regular or bonus payroll")

  public String getPayrollType() {
    return payrollType;
  }


  public void setPayrollType(String payrollType) {
    
    
    
    this.payrollType = payrollType;
  }


  public BenefitSummaryEmployeesPayrollBenefits checkDate(String checkDate) {
    
    
    
    
    this.checkDate = checkDate;
    return this;
  }

   /**
   * Get checkDate
   * @return checkDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCheckDate() {
    return checkDate;
  }


  public void setCheckDate(String checkDate) {
    
    
    
    this.checkDate = checkDate;
  }


  public BenefitSummaryEmployeesPayrollBenefits grossPay(String grossPay) {
    
    
    
    
    this.grossPay = grossPay;
    return this;
  }

   /**
   * Get grossPay
   * @return grossPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGrossPay() {
    return grossPay;
  }


  public void setGrossPay(String grossPay) {
    
    
    
    this.grossPay = grossPay;
  }


  public BenefitSummaryEmployeesPayrollBenefits companyBenefitDeduction(String companyBenefitDeduction) {
    
    
    
    
    this.companyBenefitDeduction = companyBenefitDeduction;
    return this;
  }

   /**
   * Get companyBenefitDeduction
   * @return companyBenefitDeduction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyBenefitDeduction() {
    return companyBenefitDeduction;
  }


  public void setCompanyBenefitDeduction(String companyBenefitDeduction) {
    
    
    
    this.companyBenefitDeduction = companyBenefitDeduction;
  }


  public BenefitSummaryEmployeesPayrollBenefits companyBenefitContribution(String companyBenefitContribution) {
    
    
    
    
    this.companyBenefitContribution = companyBenefitContribution;
    return this;
  }

   /**
   * Get companyBenefitContribution
   * @return companyBenefitContribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyBenefitContribution() {
    return companyBenefitContribution;
  }


  public void setCompanyBenefitContribution(String companyBenefitContribution) {
    
    
    
    this.companyBenefitContribution = companyBenefitContribution;
  }


  public BenefitSummaryEmployeesPayrollBenefits payPeriod(BenefitSummaryEmployeesPayrollBenefitsPayPeriod payPeriod) {
    
    
    
    
    this.payPeriod = payPeriod;
    return this;
  }

   /**
   * Get payPeriod
   * @return payPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitSummaryEmployeesPayrollBenefitsPayPeriod getPayPeriod() {
    return payPeriod;
  }


  public void setPayPeriod(BenefitSummaryEmployeesPayrollBenefitsPayPeriod payPeriod) {
    
    
    
    this.payPeriod = payPeriod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BenefitSummaryEmployeesPayrollBenefits instance itself
   */
  public BenefitSummaryEmployeesPayrollBenefits putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BenefitSummaryEmployeesPayrollBenefits benefitSummaryEmployeesPayrollBenefits = (BenefitSummaryEmployeesPayrollBenefits) o;
    return Objects.equals(this.payrollUuid, benefitSummaryEmployeesPayrollBenefits.payrollUuid) &&
        Objects.equals(this.payrollType, benefitSummaryEmployeesPayrollBenefits.payrollType) &&
        Objects.equals(this.checkDate, benefitSummaryEmployeesPayrollBenefits.checkDate) &&
        Objects.equals(this.grossPay, benefitSummaryEmployeesPayrollBenefits.grossPay) &&
        Objects.equals(this.companyBenefitDeduction, benefitSummaryEmployeesPayrollBenefits.companyBenefitDeduction) &&
        Objects.equals(this.companyBenefitContribution, benefitSummaryEmployeesPayrollBenefits.companyBenefitContribution) &&
        Objects.equals(this.payPeriod, benefitSummaryEmployeesPayrollBenefits.payPeriod)&&
        Objects.equals(this.additionalProperties, benefitSummaryEmployeesPayrollBenefits.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrollUuid, payrollType, checkDate, grossPay, companyBenefitDeduction, companyBenefitContribution, payPeriod, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BenefitSummaryEmployeesPayrollBenefits {\n");
    sb.append("    payrollUuid: ").append(toIndentedString(payrollUuid)).append("\n");
    sb.append("    payrollType: ").append(toIndentedString(payrollType)).append("\n");
    sb.append("    checkDate: ").append(toIndentedString(checkDate)).append("\n");
    sb.append("    grossPay: ").append(toIndentedString(grossPay)).append("\n");
    sb.append("    companyBenefitDeduction: ").append(toIndentedString(companyBenefitDeduction)).append("\n");
    sb.append("    companyBenefitContribution: ").append(toIndentedString(companyBenefitContribution)).append("\n");
    sb.append("    payPeriod: ").append(toIndentedString(payPeriod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payroll_uuid");
    openapiFields.add("payroll_type");
    openapiFields.add("check_date");
    openapiFields.add("gross_pay");
    openapiFields.add("company_benefit_deduction");
    openapiFields.add("company_benefit_contribution");
    openapiFields.add("pay_period");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BenefitSummaryEmployeesPayrollBenefits
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BenefitSummaryEmployeesPayrollBenefits.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BenefitSummaryEmployeesPayrollBenefits is not found in the empty JSON string", BenefitSummaryEmployeesPayrollBenefits.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payroll_uuid") != null && !jsonObj.get("payroll_uuid").isJsonNull()) && !jsonObj.get("payroll_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payroll_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payroll_uuid").toString()));
      }
      if ((jsonObj.get("payroll_type") != null && !jsonObj.get("payroll_type").isJsonNull()) && !jsonObj.get("payroll_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payroll_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payroll_type").toString()));
      }
      if ((jsonObj.get("check_date") != null && !jsonObj.get("check_date").isJsonNull()) && !jsonObj.get("check_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_date").toString()));
      }
      if ((jsonObj.get("gross_pay") != null && !jsonObj.get("gross_pay").isJsonNull()) && !jsonObj.get("gross_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gross_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gross_pay").toString()));
      }
      if ((jsonObj.get("company_benefit_deduction") != null && !jsonObj.get("company_benefit_deduction").isJsonNull()) && !jsonObj.get("company_benefit_deduction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_benefit_deduction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_benefit_deduction").toString()));
      }
      if ((jsonObj.get("company_benefit_contribution") != null && !jsonObj.get("company_benefit_contribution").isJsonNull()) && !jsonObj.get("company_benefit_contribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_benefit_contribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_benefit_contribution").toString()));
      }
      // validate the optional field `pay_period`
      if (jsonObj.get("pay_period") != null && !jsonObj.get("pay_period").isJsonNull()) {
        BenefitSummaryEmployeesPayrollBenefitsPayPeriod.validateJsonObject(jsonObj.getAsJsonObject("pay_period"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BenefitSummaryEmployeesPayrollBenefits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BenefitSummaryEmployeesPayrollBenefits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BenefitSummaryEmployeesPayrollBenefits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BenefitSummaryEmployeesPayrollBenefits.class));

       return (TypeAdapter<T>) new TypeAdapter<BenefitSummaryEmployeesPayrollBenefits>() {
           @Override
           public void write(JsonWriter out, BenefitSummaryEmployeesPayrollBenefits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BenefitSummaryEmployeesPayrollBenefits read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BenefitSummaryEmployeesPayrollBenefits instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BenefitSummaryEmployeesPayrollBenefits given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BenefitSummaryEmployeesPayrollBenefits
  * @throws IOException if the JSON string is invalid with respect to BenefitSummaryEmployeesPayrollBenefits
  */
  public static BenefitSummaryEmployeesPayrollBenefits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BenefitSummaryEmployeesPayrollBenefits.class);
  }

 /**
  * Convert an instance of BenefitSummaryEmployeesPayrollBenefits to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

