/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FederalTaxDetails
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FederalTaxDetails {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_TAX_PAYER_TYPE = "tax_payer_type";
  @SerializedName(SERIALIZED_NAME_TAX_PAYER_TYPE)
  private String taxPayerType;

  public static final String SERIALIZED_NAME_TAXABLE_AS_SCORP = "taxable_as_scorp";
  @SerializedName(SERIALIZED_NAME_TAXABLE_AS_SCORP)
  private Boolean taxableAsScorp;

  public static final String SERIALIZED_NAME_FILING_FORM = "filing_form";
  @SerializedName(SERIALIZED_NAME_FILING_FORM)
  private String filingForm;

  public static final String SERIALIZED_NAME_HAS_EIN = "has_ein";
  @SerializedName(SERIALIZED_NAME_HAS_EIN)
  private Boolean hasEin;

  public static final String SERIALIZED_NAME_EIN_VERIFIED = "ein_verified";
  @SerializedName(SERIALIZED_NAME_EIN_VERIFIED)
  private Boolean einVerified;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legal_name";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public FederalTaxDetails() {
  }

  public FederalTaxDetails version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public FederalTaxDetails taxPayerType(String taxPayerType) {
    
    
    
    
    this.taxPayerType = taxPayerType;
    return this;
  }

   /**
   * What type of tax entity the company is. One of: - C-Corporation - S-Corporation - Sole proprietor - LLC - LLP - Limited partnership - Co-ownership - Association - Trusteeship - General partnership - Joint venture - Non-Profit
   * @return taxPayerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "What type of tax entity the company is. One of: - C-Corporation - S-Corporation - Sole proprietor - LLC - LLP - Limited partnership - Co-ownership - Association - Trusteeship - General partnership - Joint venture - Non-Profit")

  public String getTaxPayerType() {
    return taxPayerType;
  }


  public void setTaxPayerType(String taxPayerType) {
    
    
    
    this.taxPayerType = taxPayerType;
  }


  public FederalTaxDetails taxableAsScorp(Boolean taxableAsScorp) {
    
    
    
    
    this.taxableAsScorp = taxableAsScorp;
    return this;
  }

   /**
   * Whether the company is taxed as an S-Corporation. Tax payer types that may be taxed as an S-Corporation include: - S-Corporation - C-Corporation - LLC
   * @return taxableAsScorp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the company is taxed as an S-Corporation. Tax payer types that may be taxed as an S-Corporation include: - S-Corporation - C-Corporation - LLC")

  public Boolean getTaxableAsScorp() {
    return taxableAsScorp;
  }


  public void setTaxableAsScorp(Boolean taxableAsScorp) {
    
    
    
    this.taxableAsScorp = taxableAsScorp;
  }


  public FederalTaxDetails filingForm(String filingForm) {
    
    
    
    
    this.filingForm = filingForm;
    return this;
  }

   /**
   * The form used by the company for federal tax filing. One of: - 941 (Quarterly federal tax return form) - 944 (Annual federal tax return form)
   * @return filingForm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The form used by the company for federal tax filing. One of: - 941 (Quarterly federal tax return form) - 944 (Annual federal tax return form)")

  public String getFilingForm() {
    return filingForm;
  }


  public void setFilingForm(String filingForm) {
    
    
    
    this.filingForm = filingForm;
  }


  public FederalTaxDetails hasEin(Boolean hasEin) {
    
    
    
    
    this.hasEin = hasEin;
    return this;
  }

   /**
   * Whether company&#39;s Employer Identification Number (EIN) is present
   * @return hasEin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether company's Employer Identification Number (EIN) is present")

  public Boolean getHasEin() {
    return hasEin;
  }


  public void setHasEin(Boolean hasEin) {
    
    
    
    this.hasEin = hasEin;
  }


  public FederalTaxDetails einVerified(Boolean einVerified) {
    
    
    
    
    this.einVerified = einVerified;
    return this;
  }

   /**
   * Whether the EIN was able to be verified as a valid EIN with the IRS. 
   * @return einVerified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the EIN was able to be verified as a valid EIN with the IRS. ")

  public Boolean getEinVerified() {
    return einVerified;
  }


  public void setEinVerified(Boolean einVerified) {
    
    
    
    this.einVerified = einVerified;
  }


  public FederalTaxDetails legalName(String legalName) {
    
    
    
    
    this.legalName = legalName;
    return this;
  }

   /**
   * The legal name of the company
   * @return legalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The legal name of the company")

  public String getLegalName() {
    return legalName;
  }


  public void setLegalName(String legalName) {
    
    
    
    this.legalName = legalName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FederalTaxDetails instance itself
   */
  public FederalTaxDetails putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FederalTaxDetails federalTaxDetails = (FederalTaxDetails) o;
    return Objects.equals(this.version, federalTaxDetails.version) &&
        Objects.equals(this.taxPayerType, federalTaxDetails.taxPayerType) &&
        Objects.equals(this.taxableAsScorp, federalTaxDetails.taxableAsScorp) &&
        Objects.equals(this.filingForm, federalTaxDetails.filingForm) &&
        Objects.equals(this.hasEin, federalTaxDetails.hasEin) &&
        Objects.equals(this.einVerified, federalTaxDetails.einVerified) &&
        Objects.equals(this.legalName, federalTaxDetails.legalName)&&
        Objects.equals(this.additionalProperties, federalTaxDetails.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, taxPayerType, taxableAsScorp, filingForm, hasEin, einVerified, legalName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FederalTaxDetails {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    taxPayerType: ").append(toIndentedString(taxPayerType)).append("\n");
    sb.append("    taxableAsScorp: ").append(toIndentedString(taxableAsScorp)).append("\n");
    sb.append("    filingForm: ").append(toIndentedString(filingForm)).append("\n");
    sb.append("    hasEin: ").append(toIndentedString(hasEin)).append("\n");
    sb.append("    einVerified: ").append(toIndentedString(einVerified)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("tax_payer_type");
    openapiFields.add("taxable_as_scorp");
    openapiFields.add("filing_form");
    openapiFields.add("has_ein");
    openapiFields.add("ein_verified");
    openapiFields.add("legal_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FederalTaxDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FederalTaxDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FederalTaxDetails is not found in the empty JSON string", FederalTaxDetails.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("tax_payer_type") != null && !jsonObj.get("tax_payer_type").isJsonNull()) && !jsonObj.get("tax_payer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_payer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_payer_type").toString()));
      }
      if ((jsonObj.get("filing_form") != null && !jsonObj.get("filing_form").isJsonNull()) && !jsonObj.get("filing_form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_form").toString()));
      }
      if ((jsonObj.get("legal_name") != null && !jsonObj.get("legal_name").isJsonNull()) && !jsonObj.get("legal_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FederalTaxDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FederalTaxDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FederalTaxDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FederalTaxDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FederalTaxDetails>() {
           @Override
           public void write(JsonWriter out, FederalTaxDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FederalTaxDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FederalTaxDetails instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FederalTaxDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FederalTaxDetails
  * @throws IOException if the JSON string is invalid with respect to FederalTaxDetails
  */
  public static FederalTaxDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FederalTaxDetails.class);
  }

 /**
  * Convert an instance of FederalTaxDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

