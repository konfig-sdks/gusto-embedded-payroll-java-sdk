/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The company bank account
 */
@ApiModel(description = "The company bank account")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompanyBankAccount {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_COMPANY_UUID = "company_uuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_UUID)
  private String companyUuid;

  /**
   * Bank account type
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
 public enum AccountTypeEnum {
    CHECKING("Checking"),
    
    SAVINGS("Savings");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private AccountTypeEnum accountType;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_HIDDEN_ACCOUNT_NUMBER = "hidden_account_number";
  @SerializedName(SERIALIZED_NAME_HIDDEN_ACCOUNT_NUMBER)
  private String hiddenAccountNumber;

  /**
   * The verification status of the bank account.  &#39;awaiting_deposits&#39; means the bank account is just created and money is being transferred. &#39;ready_for_verification&#39; means the micro-deposits are completed and the verification process can begin by using the verify endpoint. &#39;verified&#39; means the bank account is verified.
   */
  @JsonAdapter(VerificationStatusEnum.Adapter.class)
 public enum VerificationStatusEnum {
    AWAITING_DEPOSITS("awaiting_deposits"),
    
    READY_FOR_VERIFICATION("ready_for_verification"),
    
    VERIFIED("verified");

    private String value;

    VerificationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerificationStatusEnum fromValue(String value) {
      for (VerificationStatusEnum b : VerificationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerificationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerificationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerificationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerificationStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERIFICATION_STATUS = "verification_status";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_STATUS)
  private VerificationStatusEnum verificationStatus;

  /**
   * The verification type of the bank account.  &#39;bank_deposits&#39; means the bank account is connected by entering routing and accounting numbers and verifying through micro-deposits. &#39;plaid&#39; means the bank account is connected through Plaid.
   */
  @JsonAdapter(VerificationTypeEnum.Adapter.class)
 public enum VerificationTypeEnum {
    BANK_DEPOSITS("bank_deposits"),
    
    PLAID("plaid"),
    
    PLAID_EXTERNAL("plaid_external");

    private String value;

    VerificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerificationTypeEnum fromValue(String value) {
      for (VerificationTypeEnum b : VerificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerificationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERIFICATION_TYPE = "verification_type";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TYPE)
  private VerificationTypeEnum verificationType;

  /**
   * The Plaid connection status of the bank account. Only applies when verification type is Plaid.
   */
  @JsonAdapter(PlaidStatusEnum.Adapter.class)
 public enum PlaidStatusEnum {
    CONNECTED("connected"),
    
    DISCONNECTED("disconnected");

    private String value;

    PlaidStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlaidStatusEnum fromValue(String value) {
      for (PlaidStatusEnum b : PlaidStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlaidStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaidStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaidStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlaidStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLAID_STATUS = "plaid_status";
  @SerializedName(SERIALIZED_NAME_PLAID_STATUS)
  private PlaidStatusEnum plaidStatus;

  public static final String SERIALIZED_NAME_LAST_CACHED_BALANCE = "last_cached_balance";
  @SerializedName(SERIALIZED_NAME_LAST_CACHED_BALANCE)
  private String lastCachedBalance;

  public static final String SERIALIZED_NAME_BALANCE_FETCHED_DATE = "balance_fetched_date";
  @SerializedName(SERIALIZED_NAME_BALANCE_FETCHED_DATE)
  private String balanceFetchedDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public CompanyBankAccount() {
  }

  public CompanyBankAccount uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID of the bank account
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1263eae5-4411-48d9-bd6d-18ed93082e65", value = "UUID of the bank account")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public CompanyBankAccount companyUuid(String companyUuid) {
    
    
    
    
    this.companyUuid = companyUuid;
    return this;
  }

   /**
   * UUID of the company
   * @return companyUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "e2c4c0ce-2986-48b9-86cf-ec27f6ed9a36", value = "UUID of the company")

  public String getCompanyUuid() {
    return companyUuid;
  }


  public void setCompanyUuid(String companyUuid) {
    
    
    
    this.companyUuid = companyUuid;
  }


  public CompanyBankAccount accountType(AccountTypeEnum accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Bank account type
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CHECKING", value = "Bank account type")

  public AccountTypeEnum getAccountType() {
    return accountType;
  }


  public void setAccountType(AccountTypeEnum accountType) {
    
    
    
    this.accountType = accountType;
  }


  public CompanyBankAccount routingNumber(String routingNumber) {
    
    
    
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * The bank account&#39;s routing number
   * @return routingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "851070439", value = "The bank account's routing number")

  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    
    
    
    this.routingNumber = routingNumber;
  }


  public CompanyBankAccount hiddenAccountNumber(String hiddenAccountNumber) {
    
    
    
    
    this.hiddenAccountNumber = hiddenAccountNumber;
    return this;
  }

   /**
   * Masked bank account number
   * @return hiddenAccountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "XXXX4087", value = "Masked bank account number")

  public String getHiddenAccountNumber() {
    return hiddenAccountNumber;
  }


  public void setHiddenAccountNumber(String hiddenAccountNumber) {
    
    
    
    this.hiddenAccountNumber = hiddenAccountNumber;
  }


  public CompanyBankAccount verificationStatus(VerificationStatusEnum verificationStatus) {
    
    
    
    
    this.verificationStatus = verificationStatus;
    return this;
  }

   /**
   * The verification status of the bank account.  &#39;awaiting_deposits&#39; means the bank account is just created and money is being transferred. &#39;ready_for_verification&#39; means the micro-deposits are completed and the verification process can begin by using the verify endpoint. &#39;verified&#39; means the bank account is verified.
   * @return verificationStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "VERIFIED", value = "The verification status of the bank account.  'awaiting_deposits' means the bank account is just created and money is being transferred. 'ready_for_verification' means the micro-deposits are completed and the verification process can begin by using the verify endpoint. 'verified' means the bank account is verified.")

  public VerificationStatusEnum getVerificationStatus() {
    return verificationStatus;
  }


  public void setVerificationStatus(VerificationStatusEnum verificationStatus) {
    
    
    
    this.verificationStatus = verificationStatus;
  }


  public CompanyBankAccount verificationType(VerificationTypeEnum verificationType) {
    
    
    
    
    this.verificationType = verificationType;
    return this;
  }

   /**
   * The verification type of the bank account.  &#39;bank_deposits&#39; means the bank account is connected by entering routing and accounting numbers and verifying through micro-deposits. &#39;plaid&#39; means the bank account is connected through Plaid.
   * @return verificationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BANK_DEPOSITS", value = "The verification type of the bank account.  'bank_deposits' means the bank account is connected by entering routing and accounting numbers and verifying through micro-deposits. 'plaid' means the bank account is connected through Plaid.")

  public VerificationTypeEnum getVerificationType() {
    return verificationType;
  }


  public void setVerificationType(VerificationTypeEnum verificationType) {
    
    
    
    this.verificationType = verificationType;
  }


  public CompanyBankAccount plaidStatus(PlaidStatusEnum plaidStatus) {
    
    
    
    
    this.plaidStatus = plaidStatus;
    return this;
  }

   /**
   * The Plaid connection status of the bank account. Only applies when verification type is Plaid.
   * @return plaidStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Plaid connection status of the bank account. Only applies when verification type is Plaid.")

  public PlaidStatusEnum getPlaidStatus() {
    return plaidStatus;
  }


  public void setPlaidStatus(PlaidStatusEnum plaidStatus) {
    
    
    
    this.plaidStatus = plaidStatus;
  }


  public CompanyBankAccount lastCachedBalance(String lastCachedBalance) {
    
    
    
    
    this.lastCachedBalance = lastCachedBalance;
    return this;
  }

   /**
   * The last fetch balance for the bank account. Please be aware that this amount does not reflect the most up-to-date balance and only applies when the verification type is Plaid.
   * @return lastCachedBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last fetch balance for the bank account. Please be aware that this amount does not reflect the most up-to-date balance and only applies when the verification type is Plaid.")

  public String getLastCachedBalance() {
    return lastCachedBalance;
  }


  public void setLastCachedBalance(String lastCachedBalance) {
    
    
    
    this.lastCachedBalance = lastCachedBalance;
  }


  public CompanyBankAccount balanceFetchedDate(String balanceFetchedDate) {
    
    
    
    
    this.balanceFetchedDate = balanceFetchedDate;
    return this;
  }

   /**
   * The balance fetch date associated with the last_cached_balance. Only applies when verification type is Plaid.
   * @return balanceFetchedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The balance fetch date associated with the last_cached_balance. Only applies when verification type is Plaid.")

  public String getBalanceFetchedDate() {
    return balanceFetchedDate;
  }


  public void setBalanceFetchedDate(String balanceFetchedDate) {
    
    
    
    this.balanceFetchedDate = balanceFetchedDate;
  }


  public CompanyBankAccount name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of bank account
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Employer Funding Account", value = "Name of bank account")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompanyBankAccount instance itself
   */
  public CompanyBankAccount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyBankAccount companyBankAccount = (CompanyBankAccount) o;
    return Objects.equals(this.uuid, companyBankAccount.uuid) &&
        Objects.equals(this.companyUuid, companyBankAccount.companyUuid) &&
        Objects.equals(this.accountType, companyBankAccount.accountType) &&
        Objects.equals(this.routingNumber, companyBankAccount.routingNumber) &&
        Objects.equals(this.hiddenAccountNumber, companyBankAccount.hiddenAccountNumber) &&
        Objects.equals(this.verificationStatus, companyBankAccount.verificationStatus) &&
        Objects.equals(this.verificationType, companyBankAccount.verificationType) &&
        Objects.equals(this.plaidStatus, companyBankAccount.plaidStatus) &&
        Objects.equals(this.lastCachedBalance, companyBankAccount.lastCachedBalance) &&
        Objects.equals(this.balanceFetchedDate, companyBankAccount.balanceFetchedDate) &&
        Objects.equals(this.name, companyBankAccount.name)&&
        Objects.equals(this.additionalProperties, companyBankAccount.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, companyUuid, accountType, routingNumber, hiddenAccountNumber, verificationStatus, verificationType, plaidStatus, lastCachedBalance, balanceFetchedDate, name, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyBankAccount {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    companyUuid: ").append(toIndentedString(companyUuid)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    hiddenAccountNumber: ").append(toIndentedString(hiddenAccountNumber)).append("\n");
    sb.append("    verificationStatus: ").append(toIndentedString(verificationStatus)).append("\n");
    sb.append("    verificationType: ").append(toIndentedString(verificationType)).append("\n");
    sb.append("    plaidStatus: ").append(toIndentedString(plaidStatus)).append("\n");
    sb.append("    lastCachedBalance: ").append(toIndentedString(lastCachedBalance)).append("\n");
    sb.append("    balanceFetchedDate: ").append(toIndentedString(balanceFetchedDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("company_uuid");
    openapiFields.add("account_type");
    openapiFields.add("routing_number");
    openapiFields.add("hidden_account_number");
    openapiFields.add("verification_status");
    openapiFields.add("verification_type");
    openapiFields.add("plaid_status");
    openapiFields.add("last_cached_balance");
    openapiFields.add("balance_fetched_date");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompanyBankAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompanyBankAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyBankAccount is not found in the empty JSON string", CompanyBankAccount.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("company_uuid") != null && !jsonObj.get("company_uuid").isJsonNull()) && !jsonObj.get("company_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_uuid").toString()));
      }
      if ((jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonNull()) && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("routing_number") != null && !jsonObj.get("routing_number").isJsonNull()) && !jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
      if ((jsonObj.get("hidden_account_number") != null && !jsonObj.get("hidden_account_number").isJsonNull()) && !jsonObj.get("hidden_account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hidden_account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hidden_account_number").toString()));
      }
      if ((jsonObj.get("verification_status") != null && !jsonObj.get("verification_status").isJsonNull()) && !jsonObj.get("verification_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_status").toString()));
      }
      if ((jsonObj.get("verification_type") != null && !jsonObj.get("verification_type").isJsonNull()) && !jsonObj.get("verification_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_type").toString()));
      }
      if ((jsonObj.get("plaid_status") != null && !jsonObj.get("plaid_status").isJsonNull()) && !jsonObj.get("plaid_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plaid_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plaid_status").toString()));
      }
      if ((jsonObj.get("last_cached_balance") != null && !jsonObj.get("last_cached_balance").isJsonNull()) && !jsonObj.get("last_cached_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_cached_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_cached_balance").toString()));
      }
      if ((jsonObj.get("balance_fetched_date") != null && !jsonObj.get("balance_fetched_date").isJsonNull()) && !jsonObj.get("balance_fetched_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balance_fetched_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balance_fetched_date").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyBankAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyBankAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyBankAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyBankAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyBankAccount>() {
           @Override
           public void write(JsonWriter out, CompanyBankAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyBankAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompanyBankAccount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompanyBankAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompanyBankAccount
  * @throws IOException if the JSON string is invalid with respect to CompanyBankAccount
  */
  public static CompanyBankAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyBankAccount.class);
  }

 /**
  * Convert an instance of CompanyBankAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

