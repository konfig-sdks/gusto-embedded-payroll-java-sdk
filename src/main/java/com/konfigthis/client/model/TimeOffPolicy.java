/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeOffPolicyEmployeesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Representation of a Time Off Policy
 */
@ApiModel(description = "Representation of a Time Off Policy")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffPolicy {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_COMPANY_UUID = "company_uuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_UUID)
  private String companyUuid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Type of the time off policy
   */
  @JsonAdapter(PolicyTypeEnum.Adapter.class)
 public enum PolicyTypeEnum {
    VACATION("vacation"),
    
    SICK("sick");

    private String value;

    PolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyTypeEnum fromValue(String value) {
      for (PolicyTypeEnum b : PolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policy_type";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private PolicyTypeEnum policyType;

  public static final String SERIALIZED_NAME_ACCRUAL_METHOD = "accrual_method";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_METHOD)
  private String accrualMethod;

  public static final String SERIALIZED_NAME_ACCRUAL_RATE = "accrual_rate";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_RATE)
  private Float accrualRate;

  public static final String SERIALIZED_NAME_ACCRUAL_RATE_UNIT = "accrual_rate_unit";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_RATE_UNIT)
  private Float accrualRateUnit;

  public static final String SERIALIZED_NAME_PAID_OUT_ON_TERMINATION = "paid_out_on_termination";
  @SerializedName(SERIALIZED_NAME_PAID_OUT_ON_TERMINATION)
  private Boolean paidOutOnTermination;

  public static final String SERIALIZED_NAME_ACCRUAL_WAITING_PERIOD_DAYS = "accrual_waiting_period_days";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_WAITING_PERIOD_DAYS)
  private Integer accrualWaitingPeriodDays;

  public static final String SERIALIZED_NAME_CARRYOVER_LIMIT_HOURS = "carryover_limit_hours";
  @SerializedName(SERIALIZED_NAME_CARRYOVER_LIMIT_HOURS)
  private Float carryoverLimitHours;

  public static final String SERIALIZED_NAME_MAX_ACCRUAL_HOURS_PER_YEAR = "max_accrual_hours_per_year";
  @SerializedName(SERIALIZED_NAME_MAX_ACCRUAL_HOURS_PER_YEAR)
  private Float maxAccrualHoursPerYear;

  public static final String SERIALIZED_NAME_MAX_HOURS = "max_hours";
  @SerializedName(SERIALIZED_NAME_MAX_HOURS)
  private Float maxHours;

  public static final String SERIALIZED_NAME_COMPLETE = "complete";
  @SerializedName(SERIALIZED_NAME_COMPLETE)
  private Boolean complete;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_EMPLOYEES = "employees";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES)
  private List<TimeOffPolicyEmployeesInner> employees = new ArrayList<>();

  public TimeOffPolicy() {
  }

  public TimeOffPolicy version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public TimeOffPolicy uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Unique identifier of a time off policy
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3f746cd0-dd08-408f-b712-8180c7c621e9", required = true, value = "Unique identifier of a time off policy")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public TimeOffPolicy companyUuid(String companyUuid) {
    
    
    
    
    this.companyUuid = companyUuid;
    return this;
  }

   /**
   * Unique identifier for the company owning the time off policy
   * @return companyUuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "de83cff2-8e7a-448e-a28c-14258a9971c3", required = true, value = "Unique identifier for the company owning the time off policy")

  public String getCompanyUuid() {
    return companyUuid;
  }


  public void setCompanyUuid(String companyUuid) {
    
    
    
    this.companyUuid = companyUuid;
  }


  public TimeOffPolicy name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the time off policy
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "test policy", required = true, value = "Name of the time off policy")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TimeOffPolicy policyType(PolicyTypeEnum policyType) {
    
    
    
    
    this.policyType = policyType;
    return this;
  }

   /**
   * Type of the time off policy
   * @return policyType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "VACATION", required = true, value = "Type of the time off policy")

  public PolicyTypeEnum getPolicyType() {
    return policyType;
  }


  public void setPolicyType(PolicyTypeEnum policyType) {
    
    
    
    this.policyType = policyType;
  }


  public TimeOffPolicy accrualMethod(String accrualMethod) {
    
    
    
    
    this.accrualMethod = accrualMethod;
    return this;
  }

   /**
   * Policy time off accrual method
   * @return accrualMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "unlimited", required = true, value = "Policy time off accrual method")

  public String getAccrualMethod() {
    return accrualMethod;
  }


  public void setAccrualMethod(String accrualMethod) {
    
    
    
    this.accrualMethod = accrualMethod;
  }


  public TimeOffPolicy accrualRate(Float accrualRate) {
    
    
    
    
    this.accrualRate = accrualRate;
    return this;
  }

   /**
   * The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. \&quot;40.0\&quot;.
   * @return accrualRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. \"40.0\".")

  public Float getAccrualRate() {
    return accrualRate;
  }


  public void setAccrualRate(Float accrualRate) {
    
    
    
    this.accrualRate = accrualRate;
  }


  public TimeOffPolicy accrualRateUnit(Float accrualRateUnit) {
    
    
    
    
    this.accrualRateUnit = accrualRateUnit;
    return this;
  }

   /**
   * The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. \&quot;40.0\&quot;.
   * @return accrualRateUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. \"40.0\".")

  public Float getAccrualRateUnit() {
    return accrualRateUnit;
  }


  public void setAccrualRateUnit(Float accrualRateUnit) {
    
    
    
    this.accrualRateUnit = accrualRateUnit;
  }


  public TimeOffPolicy paidOutOnTermination(Boolean paidOutOnTermination) {
    
    
    
    
    this.paidOutOnTermination = paidOutOnTermination;
    return this;
  }

   /**
   * Boolean representing if an employees accrued time off hours will be paid out on termination
   * @return paidOutOnTermination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean representing if an employees accrued time off hours will be paid out on termination")

  public Boolean getPaidOutOnTermination() {
    return paidOutOnTermination;
  }


  public void setPaidOutOnTermination(Boolean paidOutOnTermination) {
    
    
    
    this.paidOutOnTermination = paidOutOnTermination;
  }


  public TimeOffPolicy accrualWaitingPeriodDays(Integer accrualWaitingPeriodDays) {
    
    
    
    
    this.accrualWaitingPeriodDays = accrualWaitingPeriodDays;
    return this;
  }

   /**
   * Number of days before an employee on the policy will begin accruing time off hours
   * @return accrualWaitingPeriodDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of days before an employee on the policy will begin accruing time off hours")

  public Integer getAccrualWaitingPeriodDays() {
    return accrualWaitingPeriodDays;
  }


  public void setAccrualWaitingPeriodDays(Integer accrualWaitingPeriodDays) {
    
    
    
    this.accrualWaitingPeriodDays = accrualWaitingPeriodDays;
  }


  public TimeOffPolicy carryoverLimitHours(Float carryoverLimitHours) {
    
    
    
    
    this.carryoverLimitHours = carryoverLimitHours;
    return this;
  }

   /**
   * The max number of hours and employee can carryover from one year to the next
   * @return carryoverLimitHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The max number of hours and employee can carryover from one year to the next")

  public Float getCarryoverLimitHours() {
    return carryoverLimitHours;
  }


  public void setCarryoverLimitHours(Float carryoverLimitHours) {
    
    
    
    this.carryoverLimitHours = carryoverLimitHours;
  }


  public TimeOffPolicy maxAccrualHoursPerYear(Float maxAccrualHoursPerYear) {
    
    
    
    
    this.maxAccrualHoursPerYear = maxAccrualHoursPerYear;
    return this;
  }

   /**
   * The max number of hours and employee can accrue in a year
   * @return maxAccrualHoursPerYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The max number of hours and employee can accrue in a year")

  public Float getMaxAccrualHoursPerYear() {
    return maxAccrualHoursPerYear;
  }


  public void setMaxAccrualHoursPerYear(Float maxAccrualHoursPerYear) {
    
    
    
    this.maxAccrualHoursPerYear = maxAccrualHoursPerYear;
  }


  public TimeOffPolicy maxHours(Float maxHours) {
    
    
    
    
    this.maxHours = maxHours;
    return this;
  }

   /**
   * The max number of hours an employee can accrue
   * @return maxHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The max number of hours an employee can accrue")

  public Float getMaxHours() {
    return maxHours;
  }


  public void setMaxHours(Float maxHours) {
    
    
    
    this.maxHours = maxHours;
  }


  public TimeOffPolicy complete(Boolean complete) {
    
    
    
    
    this.complete = complete;
    return this;
  }

   /**
   * boolean representing if a policy has completed configuration
   * @return complete
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "boolean representing if a policy has completed configuration")

  public Boolean getComplete() {
    return complete;
  }


  public void setComplete(Boolean complete) {
    
    
    
    this.complete = complete;
  }


  public TimeOffPolicy isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * boolean representing if a policy is active or not
   * @return isActive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "boolean representing if a policy is active or not")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


  public TimeOffPolicy employees(List<TimeOffPolicyEmployeesInner> employees) {
    
    
    
    
    this.employees = employees;
    return this;
  }

  public TimeOffPolicy addEmployeesItem(TimeOffPolicyEmployeesInner employeesItem) {
    this.employees.add(employeesItem);
    return this;
  }

   /**
   * List of employee UUIDs under a time off policy
   * @return employees
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of employee UUIDs under a time off policy")

  public List<TimeOffPolicyEmployeesInner> getEmployees() {
    return employees;
  }


  public void setEmployees(List<TimeOffPolicyEmployeesInner> employees) {
    
    
    
    this.employees = employees;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffPolicy instance itself
   */
  public TimeOffPolicy putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffPolicy timeOffPolicy = (TimeOffPolicy) o;
    return Objects.equals(this.version, timeOffPolicy.version) &&
        Objects.equals(this.uuid, timeOffPolicy.uuid) &&
        Objects.equals(this.companyUuid, timeOffPolicy.companyUuid) &&
        Objects.equals(this.name, timeOffPolicy.name) &&
        Objects.equals(this.policyType, timeOffPolicy.policyType) &&
        Objects.equals(this.accrualMethod, timeOffPolicy.accrualMethod) &&
        Objects.equals(this.accrualRate, timeOffPolicy.accrualRate) &&
        Objects.equals(this.accrualRateUnit, timeOffPolicy.accrualRateUnit) &&
        Objects.equals(this.paidOutOnTermination, timeOffPolicy.paidOutOnTermination) &&
        Objects.equals(this.accrualWaitingPeriodDays, timeOffPolicy.accrualWaitingPeriodDays) &&
        Objects.equals(this.carryoverLimitHours, timeOffPolicy.carryoverLimitHours) &&
        Objects.equals(this.maxAccrualHoursPerYear, timeOffPolicy.maxAccrualHoursPerYear) &&
        Objects.equals(this.maxHours, timeOffPolicy.maxHours) &&
        Objects.equals(this.complete, timeOffPolicy.complete) &&
        Objects.equals(this.isActive, timeOffPolicy.isActive) &&
        Objects.equals(this.employees, timeOffPolicy.employees)&&
        Objects.equals(this.additionalProperties, timeOffPolicy.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, uuid, companyUuid, name, policyType, accrualMethod, accrualRate, accrualRateUnit, paidOutOnTermination, accrualWaitingPeriodDays, carryoverLimitHours, maxAccrualHoursPerYear, maxHours, complete, isActive, employees, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffPolicy {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    companyUuid: ").append(toIndentedString(companyUuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    accrualMethod: ").append(toIndentedString(accrualMethod)).append("\n");
    sb.append("    accrualRate: ").append(toIndentedString(accrualRate)).append("\n");
    sb.append("    accrualRateUnit: ").append(toIndentedString(accrualRateUnit)).append("\n");
    sb.append("    paidOutOnTermination: ").append(toIndentedString(paidOutOnTermination)).append("\n");
    sb.append("    accrualWaitingPeriodDays: ").append(toIndentedString(accrualWaitingPeriodDays)).append("\n");
    sb.append("    carryoverLimitHours: ").append(toIndentedString(carryoverLimitHours)).append("\n");
    sb.append("    maxAccrualHoursPerYear: ").append(toIndentedString(maxAccrualHoursPerYear)).append("\n");
    sb.append("    maxHours: ").append(toIndentedString(maxHours)).append("\n");
    sb.append("    complete: ").append(toIndentedString(complete)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    employees: ").append(toIndentedString(employees)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("uuid");
    openapiFields.add("company_uuid");
    openapiFields.add("name");
    openapiFields.add("policy_type");
    openapiFields.add("accrual_method");
    openapiFields.add("accrual_rate");
    openapiFields.add("accrual_rate_unit");
    openapiFields.add("paid_out_on_termination");
    openapiFields.add("accrual_waiting_period_days");
    openapiFields.add("carryover_limit_hours");
    openapiFields.add("max_accrual_hours_per_year");
    openapiFields.add("max_hours");
    openapiFields.add("complete");
    openapiFields.add("is_active");
    openapiFields.add("employees");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("company_uuid");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("policy_type");
    openapiRequiredFields.add("accrual_method");
    openapiRequiredFields.add("is_active");
    openapiRequiredFields.add("employees");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffPolicy
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffPolicy is not found in the empty JSON string", TimeOffPolicy.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeOffPolicy.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("company_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_uuid").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("policy_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_type").toString()));
      }
      if (!jsonObj.get("accrual_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrual_method").toString()));
      }
      if ((jsonObj.get("accrual_rate") != null && !jsonObj.get("accrual_rate").isJsonNull()) && !jsonObj.get("accrual_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrual_rate").toString()));
      }
      if ((jsonObj.get("accrual_rate_unit") != null && !jsonObj.get("accrual_rate_unit").isJsonNull()) && !jsonObj.get("accrual_rate_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_rate_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrual_rate_unit").toString()));
      }
      if ((jsonObj.get("carryover_limit_hours") != null && !jsonObj.get("carryover_limit_hours").isJsonNull()) && !jsonObj.get("carryover_limit_hours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carryover_limit_hours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carryover_limit_hours").toString()));
      }
      if ((jsonObj.get("max_accrual_hours_per_year") != null && !jsonObj.get("max_accrual_hours_per_year").isJsonNull()) && !jsonObj.get("max_accrual_hours_per_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_accrual_hours_per_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_accrual_hours_per_year").toString()));
      }
      if ((jsonObj.get("max_hours") != null && !jsonObj.get("max_hours").isJsonNull()) && !jsonObj.get("max_hours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_hours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_hours").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("employees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `employees` to be an array in the JSON string but got `%s`", jsonObj.get("employees").toString()));
      }

      JsonArray jsonArrayemployees = jsonObj.getAsJsonArray("employees");
      // validate the required field `employees` (array)
      for (int i = 0; i < jsonArrayemployees.size(); i++) {
        TimeOffPolicyEmployeesInner.validateJsonObject(jsonArrayemployees.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffPolicy>() {
           @Override
           public void write(JsonWriter out, TimeOffPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffPolicy read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffPolicy instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffPolicy given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffPolicy
  * @throws IOException if the JSON string is invalid with respect to TimeOffPolicy
  */
  public static TimeOffPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffPolicy.class);
  }

 /**
  * Convert an instance of TimeOffPolicy to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

