/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PayrollEmployeeCompensationsTypeInnerBenefitsInner;
import com.konfigthis.client.model.PayrollEmployeeCompensationsTypeInnerDeductionsInner;
import com.konfigthis.client.model.PayrollEmployeeCompensationsTypeInnerFixedCompensationsInner;
import com.konfigthis.client.model.PayrollEmployeeCompensationsTypeInnerHourlyCompensationsInner;
import com.konfigthis.client.model.PayrollEmployeeCompensationsTypeInnerPaidTimeOffInner;
import com.konfigthis.client.model.PayrollEmployeeCompensationsTypeInnerTaxesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PayrollEmployeeCompensationsTypeInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollEmployeeCompensationsTypeInner {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_EMPLOYEE_UUID = "employee_uuid";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_UUID)
  private String employeeUuid;

  public static final String SERIALIZED_NAME_EXCLUDED = "excluded";
  @SerializedName(SERIALIZED_NAME_EXCLUDED)
  private Boolean excluded;

  public static final String SERIALIZED_NAME_GROSS_PAY = "gross_pay";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY)
  private String grossPay;

  public static final String SERIALIZED_NAME_NET_PAY = "net_pay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private String netPay;

  public static final String SERIALIZED_NAME_CHECK_AMOUNT = "check_amount";
  @SerializedName(SERIALIZED_NAME_CHECK_AMOUNT)
  private String checkAmount;

  /**
   * The employee&#39;s compensation payment method.
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
 public enum PaymentMethodEnum {
    CHECK("Check"),
    
    DIRECT_DEPOSIT("Direct Deposit");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_FIXED_COMPENSATIONS = "fixed_compensations";
  @SerializedName(SERIALIZED_NAME_FIXED_COMPENSATIONS)
  private List<PayrollEmployeeCompensationsTypeInnerFixedCompensationsInner> fixedCompensations = null;

  public static final String SERIALIZED_NAME_HOURLY_COMPENSATIONS = "hourly_compensations";
  @SerializedName(SERIALIZED_NAME_HOURLY_COMPENSATIONS)
  private List<PayrollEmployeeCompensationsTypeInnerHourlyCompensationsInner> hourlyCompensations = null;

  public static final String SERIALIZED_NAME_PAID_TIME_OFF = "paid_time_off";
  @SerializedName(SERIALIZED_NAME_PAID_TIME_OFF)
  private List<PayrollEmployeeCompensationsTypeInnerPaidTimeOffInner> paidTimeOff = null;

  public static final String SERIALIZED_NAME_BENEFITS = "benefits";
  @SerializedName(SERIALIZED_NAME_BENEFITS)
  private List<PayrollEmployeeCompensationsTypeInnerBenefitsInner> benefits = null;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private List<PayrollEmployeeCompensationsTypeInnerDeductionsInner> deductions = null;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<PayrollEmployeeCompensationsTypeInnerTaxesInner> taxes = null;

  public PayrollEmployeeCompensationsTypeInner() {
  }

  
  public PayrollEmployeeCompensationsTypeInner(
     String employeeUuid, 
     Boolean excluded, 
     String grossPay, 
     String netPay, 
     String checkAmount, 
     String memo, 
     List<PayrollEmployeeCompensationsTypeInnerBenefitsInner> benefits, 
     List<PayrollEmployeeCompensationsTypeInnerDeductionsInner> deductions, 
     List<PayrollEmployeeCompensationsTypeInnerTaxesInner> taxes
  ) {
    this();
    this.employeeUuid = employeeUuid;
    this.excluded = excluded;
    this.grossPay = grossPay;
    this.netPay = netPay;
    this.checkAmount = checkAmount;
    this.memo = memo;
    this.benefits = benefits;
    this.deductions = deductions;
    this.taxes = taxes;
  }

  public PayrollEmployeeCompensationsTypeInner version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of this employee compensation. This field is only available for prepared payrolls. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current version of this employee compensation. This field is only available for prepared payrolls. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


   /**
   * The UUID of the employee.
   * @return employeeUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UUID of the employee.")

  public String getEmployeeUuid() {
    return employeeUuid;
  }




   /**
   * This employee will be excluded from payroll calculation and will not be paid for the payroll. Cancelling a payroll would reset all employees&#39; excluded back to false.
   * @return excluded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This employee will be excluded from payroll calculation and will not be paid for the payroll. Cancelling a payroll would reset all employees' excluded back to false.")

  public Boolean getExcluded() {
    return excluded;
  }




   /**
   * The employee&#39;s gross pay, equal to regular wages + cash tips + payroll tips + any other additional earnings, excluding imputed income. This value is only available for processed payrolls.
   * @return grossPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The employee's gross pay, equal to regular wages + cash tips + payroll tips + any other additional earnings, excluding imputed income. This value is only available for processed payrolls.")

  public String getGrossPay() {
    return grossPay;
  }




   /**
   * The employee&#39;s net pay, equal to gross_pay - employee taxes - employee deductions or garnishments - cash tips. This value is only available for processed payrolls.
   * @return netPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The employee's net pay, equal to gross_pay - employee taxes - employee deductions or garnishments - cash tips. This value is only available for processed payrolls.")

  public String getNetPay() {
    return netPay;
  }




   /**
   * The employee&#39;s check amount, equal to net_pay + reimbursements. This value is only available for processed payrolls.
   * @return checkAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The employee's check amount, equal to net_pay + reimbursements. This value is only available for processed payrolls.")

  public String getCheckAmount() {
    return checkAmount;
  }




  public PayrollEmployeeCompensationsTypeInner paymentMethod(PaymentMethodEnum paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * The employee&#39;s compensation payment method.
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The employee's compensation payment method.")

  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }


   /**
   * Custom text that will be printed as a personal note to the employee on a paystub.
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom text that will be printed as a personal note to the employee on a paystub.")

  public String getMemo() {
    return memo;
  }




  public PayrollEmployeeCompensationsTypeInner fixedCompensations(List<PayrollEmployeeCompensationsTypeInnerFixedCompensationsInner> fixedCompensations) {
    
    
    
    
    this.fixedCompensations = fixedCompensations;
    return this;
  }

  public PayrollEmployeeCompensationsTypeInner addFixedCompensationsItem(PayrollEmployeeCompensationsTypeInnerFixedCompensationsInner fixedCompensationsItem) {
    if (this.fixedCompensations == null) {
      this.fixedCompensations = new ArrayList<>();
    }
    this.fixedCompensations.add(fixedCompensationsItem);
    return this;
  }

   /**
   * An array of fixed compensations for the employee. Fixed compensations include tips, bonuses, and one time reimbursements. If this payroll has been processed, only fixed compensations with a value greater than 0.00 are returned. For an unprocessed payroll, all active fixed compensations are returned.
   * @return fixedCompensations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of fixed compensations for the employee. Fixed compensations include tips, bonuses, and one time reimbursements. If this payroll has been processed, only fixed compensations with a value greater than 0.00 are returned. For an unprocessed payroll, all active fixed compensations are returned.")

  public List<PayrollEmployeeCompensationsTypeInnerFixedCompensationsInner> getFixedCompensations() {
    return fixedCompensations;
  }


  public void setFixedCompensations(List<PayrollEmployeeCompensationsTypeInnerFixedCompensationsInner> fixedCompensations) {
    
    
    
    this.fixedCompensations = fixedCompensations;
  }


  public PayrollEmployeeCompensationsTypeInner hourlyCompensations(List<PayrollEmployeeCompensationsTypeInnerHourlyCompensationsInner> hourlyCompensations) {
    
    
    
    
    this.hourlyCompensations = hourlyCompensations;
    return this;
  }

  public PayrollEmployeeCompensationsTypeInner addHourlyCompensationsItem(PayrollEmployeeCompensationsTypeInnerHourlyCompensationsInner hourlyCompensationsItem) {
    if (this.hourlyCompensations == null) {
      this.hourlyCompensations = new ArrayList<>();
    }
    this.hourlyCompensations.add(hourlyCompensationsItem);
    return this;
  }

   /**
   * An array of hourly compensations for the employee. Hourly compensations include regular, overtime, and double overtime hours. If this payroll has been processed, only hourly compensations with a value greater than 0.00 are returned. For an unprocessed payroll, all active hourly compensations are returned.
   * @return hourlyCompensations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of hourly compensations for the employee. Hourly compensations include regular, overtime, and double overtime hours. If this payroll has been processed, only hourly compensations with a value greater than 0.00 are returned. For an unprocessed payroll, all active hourly compensations are returned.")

  public List<PayrollEmployeeCompensationsTypeInnerHourlyCompensationsInner> getHourlyCompensations() {
    return hourlyCompensations;
  }


  public void setHourlyCompensations(List<PayrollEmployeeCompensationsTypeInnerHourlyCompensationsInner> hourlyCompensations) {
    
    
    
    this.hourlyCompensations = hourlyCompensations;
  }


  public PayrollEmployeeCompensationsTypeInner paidTimeOff(List<PayrollEmployeeCompensationsTypeInnerPaidTimeOffInner> paidTimeOff) {
    
    
    
    
    this.paidTimeOff = paidTimeOff;
    return this;
  }

  public PayrollEmployeeCompensationsTypeInner addPaidTimeOffItem(PayrollEmployeeCompensationsTypeInnerPaidTimeOffInner paidTimeOffItem) {
    if (this.paidTimeOff == null) {
      this.paidTimeOff = new ArrayList<>();
    }
    this.paidTimeOff.add(paidTimeOffItem);
    return this;
  }

   /**
   * An array of all paid time off the employee is eligible for this pay period.
   * @return paidTimeOff
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of all paid time off the employee is eligible for this pay period.")

  public List<PayrollEmployeeCompensationsTypeInnerPaidTimeOffInner> getPaidTimeOff() {
    return paidTimeOff;
  }


  public void setPaidTimeOff(List<PayrollEmployeeCompensationsTypeInnerPaidTimeOffInner> paidTimeOff) {
    
    
    
    this.paidTimeOff = paidTimeOff;
  }


   /**
   * An array of employee benefits for the pay period. Benefits are only included for processed payroll when the include parameter is present.
   * @return benefits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of employee benefits for the pay period. Benefits are only included for processed payroll when the include parameter is present.")

  public List<PayrollEmployeeCompensationsTypeInnerBenefitsInner> getBenefits() {
    return benefits;
  }




   /**
   * An array of employee deductions for the pay period. Deductions are only included for processed payroll when the include parameter is present.
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of employee deductions for the pay period. Deductions are only included for processed payroll when the include parameter is present.")

  public List<PayrollEmployeeCompensationsTypeInnerDeductionsInner> getDeductions() {
    return deductions;
  }




   /**
   * An array of employer and employee taxes for the pay period. Only included for processed or calculated payrolls when &#x60;taxes&#x60; is present in the &#x60;include&#x60; parameter.
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of employer and employee taxes for the pay period. Only included for processed or calculated payrolls when `taxes` is present in the `include` parameter.")

  public List<PayrollEmployeeCompensationsTypeInnerTaxesInner> getTaxes() {
    return taxes;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollEmployeeCompensationsTypeInner instance itself
   */
  public PayrollEmployeeCompensationsTypeInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollEmployeeCompensationsTypeInner payrollEmployeeCompensationsTypeInner = (PayrollEmployeeCompensationsTypeInner) o;
    return Objects.equals(this.version, payrollEmployeeCompensationsTypeInner.version) &&
        Objects.equals(this.employeeUuid, payrollEmployeeCompensationsTypeInner.employeeUuid) &&
        Objects.equals(this.excluded, payrollEmployeeCompensationsTypeInner.excluded) &&
        Objects.equals(this.grossPay, payrollEmployeeCompensationsTypeInner.grossPay) &&
        Objects.equals(this.netPay, payrollEmployeeCompensationsTypeInner.netPay) &&
        Objects.equals(this.checkAmount, payrollEmployeeCompensationsTypeInner.checkAmount) &&
        Objects.equals(this.paymentMethod, payrollEmployeeCompensationsTypeInner.paymentMethod) &&
        Objects.equals(this.memo, payrollEmployeeCompensationsTypeInner.memo) &&
        Objects.equals(this.fixedCompensations, payrollEmployeeCompensationsTypeInner.fixedCompensations) &&
        Objects.equals(this.hourlyCompensations, payrollEmployeeCompensationsTypeInner.hourlyCompensations) &&
        Objects.equals(this.paidTimeOff, payrollEmployeeCompensationsTypeInner.paidTimeOff) &&
        Objects.equals(this.benefits, payrollEmployeeCompensationsTypeInner.benefits) &&
        Objects.equals(this.deductions, payrollEmployeeCompensationsTypeInner.deductions) &&
        Objects.equals(this.taxes, payrollEmployeeCompensationsTypeInner.taxes)&&
        Objects.equals(this.additionalProperties, payrollEmployeeCompensationsTypeInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, employeeUuid, excluded, grossPay, netPay, checkAmount, paymentMethod, memo, fixedCompensations, hourlyCompensations, paidTimeOff, benefits, deductions, taxes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollEmployeeCompensationsTypeInner {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    employeeUuid: ").append(toIndentedString(employeeUuid)).append("\n");
    sb.append("    excluded: ").append(toIndentedString(excluded)).append("\n");
    sb.append("    grossPay: ").append(toIndentedString(grossPay)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    checkAmount: ").append(toIndentedString(checkAmount)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    fixedCompensations: ").append(toIndentedString(fixedCompensations)).append("\n");
    sb.append("    hourlyCompensations: ").append(toIndentedString(hourlyCompensations)).append("\n");
    sb.append("    paidTimeOff: ").append(toIndentedString(paidTimeOff)).append("\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("employee_uuid");
    openapiFields.add("excluded");
    openapiFields.add("gross_pay");
    openapiFields.add("net_pay");
    openapiFields.add("check_amount");
    openapiFields.add("payment_method");
    openapiFields.add("memo");
    openapiFields.add("fixed_compensations");
    openapiFields.add("hourly_compensations");
    openapiFields.add("paid_time_off");
    openapiFields.add("benefits");
    openapiFields.add("deductions");
    openapiFields.add("taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollEmployeeCompensationsTypeInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollEmployeeCompensationsTypeInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollEmployeeCompensationsTypeInner is not found in the empty JSON string", PayrollEmployeeCompensationsTypeInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("employee_uuid") != null && !jsonObj.get("employee_uuid").isJsonNull()) && !jsonObj.get("employee_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_uuid").toString()));
      }
      if (!jsonObj.get("gross_pay").isJsonNull() && (jsonObj.get("gross_pay") != null && !jsonObj.get("gross_pay").isJsonNull()) && !jsonObj.get("gross_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gross_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gross_pay").toString()));
      }
      if (!jsonObj.get("net_pay").isJsonNull() && (jsonObj.get("net_pay") != null && !jsonObj.get("net_pay").isJsonNull()) && !jsonObj.get("net_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_pay").toString()));
      }
      if (!jsonObj.get("check_amount").isJsonNull() && (jsonObj.get("check_amount") != null && !jsonObj.get("check_amount").isJsonNull()) && !jsonObj.get("check_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_amount").toString()));
      }
      if (!jsonObj.get("payment_method").isJsonNull() && (jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      if (!jsonObj.get("memo").isJsonNull() && (jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if (jsonObj.get("fixed_compensations") != null && !jsonObj.get("fixed_compensations").isJsonNull()) {
        JsonArray jsonArrayfixedCompensations = jsonObj.getAsJsonArray("fixed_compensations");
        if (jsonArrayfixedCompensations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fixed_compensations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fixed_compensations` to be an array in the JSON string but got `%s`", jsonObj.get("fixed_compensations").toString()));
          }

          // validate the optional field `fixed_compensations` (array)
          for (int i = 0; i < jsonArrayfixedCompensations.size(); i++) {
            PayrollEmployeeCompensationsTypeInnerFixedCompensationsInner.validateJsonObject(jsonArrayfixedCompensations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("hourly_compensations") != null && !jsonObj.get("hourly_compensations").isJsonNull()) {
        JsonArray jsonArrayhourlyCompensations = jsonObj.getAsJsonArray("hourly_compensations");
        if (jsonArrayhourlyCompensations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hourly_compensations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hourly_compensations` to be an array in the JSON string but got `%s`", jsonObj.get("hourly_compensations").toString()));
          }

          // validate the optional field `hourly_compensations` (array)
          for (int i = 0; i < jsonArrayhourlyCompensations.size(); i++) {
            PayrollEmployeeCompensationsTypeInnerHourlyCompensationsInner.validateJsonObject(jsonArrayhourlyCompensations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("paid_time_off") != null && !jsonObj.get("paid_time_off").isJsonNull()) {
        JsonArray jsonArraypaidTimeOff = jsonObj.getAsJsonArray("paid_time_off");
        if (jsonArraypaidTimeOff != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paid_time_off").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paid_time_off` to be an array in the JSON string but got `%s`", jsonObj.get("paid_time_off").toString()));
          }

          // validate the optional field `paid_time_off` (array)
          for (int i = 0; i < jsonArraypaidTimeOff.size(); i++) {
            PayrollEmployeeCompensationsTypeInnerPaidTimeOffInner.validateJsonObject(jsonArraypaidTimeOff.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("benefits") != null && !jsonObj.get("benefits").isJsonNull()) {
        JsonArray jsonArraybenefits = jsonObj.getAsJsonArray("benefits");
        if (jsonArraybenefits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("benefits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `benefits` to be an array in the JSON string but got `%s`", jsonObj.get("benefits").toString()));
          }

          // validate the optional field `benefits` (array)
          for (int i = 0; i < jsonArraybenefits.size(); i++) {
            PayrollEmployeeCompensationsTypeInnerBenefitsInner.validateJsonObject(jsonArraybenefits.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("deductions") != null && !jsonObj.get("deductions").isJsonNull()) {
        JsonArray jsonArraydeductions = jsonObj.getAsJsonArray("deductions");
        if (jsonArraydeductions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deductions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deductions` to be an array in the JSON string but got `%s`", jsonObj.get("deductions").toString()));
          }

          // validate the optional field `deductions` (array)
          for (int i = 0; i < jsonArraydeductions.size(); i++) {
            PayrollEmployeeCompensationsTypeInnerDeductionsInner.validateJsonObject(jsonArraydeductions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            PayrollEmployeeCompensationsTypeInnerTaxesInner.validateJsonObject(jsonArraytaxes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollEmployeeCompensationsTypeInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollEmployeeCompensationsTypeInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollEmployeeCompensationsTypeInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollEmployeeCompensationsTypeInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollEmployeeCompensationsTypeInner>() {
           @Override
           public void write(JsonWriter out, PayrollEmployeeCompensationsTypeInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollEmployeeCompensationsTypeInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollEmployeeCompensationsTypeInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollEmployeeCompensationsTypeInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollEmployeeCompensationsTypeInner
  * @throws IOException if the JSON string is invalid with respect to PayrollEmployeeCompensationsTypeInner
  */
  public static PayrollEmployeeCompensationsTypeInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollEmployeeCompensationsTypeInner.class);
  }

 /**
  * Convert an instance of PayrollEmployeeCompensationsTypeInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

