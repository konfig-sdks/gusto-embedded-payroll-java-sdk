/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeOffRequestApprover;
import com.konfigthis.client.model.TimeOffRequestEmployee;
import com.konfigthis.client.model.TimeOffRequestInitiator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The representation of a time off request. 
 */
@ApiModel(description = "The representation of a time off request. ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  /**
   * The status of the time off request.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PENDING("pending"),
    
    APPROVED("approved"),
    
    DENIED("denied");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_EMPLOYEE_NOTE = "employee_note";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NOTE)
  private String employeeNote;

  public static final String SERIALIZED_NAME_EMPLOYER_NOTE = "employer_note";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NOTE)
  private String employerNote;

  /**
   * The type of time off request.
   */
  @JsonAdapter(RequestTypeEnum.Adapter.class)
 public enum RequestTypeEnum {
    VACATION("vacation"),
    
    SICK("sick");

    private String value;

    RequestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestTypeEnum fromValue(String value) {
      for (RequestTypeEnum b : RequestTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "request_type";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private RequestTypeEnum requestType;

  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private Object days;

  public static final String SERIALIZED_NAME_EMPLOYEE = "employee";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE)
  private TimeOffRequestEmployee employee;

  public static final String SERIALIZED_NAME_INITIATOR = "initiator";
  @SerializedName(SERIALIZED_NAME_INITIATOR)
  private TimeOffRequestInitiator initiator;

  public static final String SERIALIZED_NAME_APPROVER = "approver";
  @SerializedName(SERIALIZED_NAME_APPROVER)
  private TimeOffRequestApprover approver;

  public TimeOffRequest() {
  }

  
  public TimeOffRequest(
     Integer id, 
     StatusEnum status, 
     String employeeNote, 
     String employerNote, 
     RequestTypeEnum requestType, 
     Object days
  ) {
    this();
    this.id = id;
    this.status = status;
    this.employeeNote = employeeNote;
    this.employerNote = employerNote;
    this.requestType = requestType;
    this.days = days;
  }

   /**
   * The ID of the time off request.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The ID of the time off request.")

  public Integer getId() {
    return id;
  }




   /**
   * The status of the time off request.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "APPROVED", value = "The status of the time off request.")

  public StatusEnum getStatus() {
    return status;
  }




   /**
   * A note about the time off request, from the employee to the employer.
   * @return employeeNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vacation at Disney World!", value = "A note about the time off request, from the employee to the employer.")

  public String getEmployeeNote() {
    return employeeNote;
  }




   /**
   * A note about the time off request, from the employer to the employee.
   * @return employerNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "But Universal has Harry Potter World...", value = "A note about the time off request, from the employer to the employee.")

  public String getEmployerNote() {
    return employerNote;
  }




   /**
   * The type of time off request.
   * @return requestType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "VACATION", value = "The type of time off request.")

  public RequestTypeEnum getRequestType() {
    return requestType;
  }




   /**
   * An object that represents the days in the time off request. The keys of the object are the dates, formatted as a YYYY-MM-DD string. The values of the object are the number of hours requested off for each day, formatted as a string representation of a numeric decimal to the thousands place.
   * @return days
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An object that represents the days in the time off request. The keys of the object are the dates, formatted as a YYYY-MM-DD string. The values of the object are the number of hours requested off for each day, formatted as a string representation of a numeric decimal to the thousands place.")

  public Object getDays() {
    return days;
  }




  public TimeOffRequest employee(TimeOffRequestEmployee employee) {
    
    
    
    
    this.employee = employee;
    return this;
  }

   /**
   * Get employee
   * @return employee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeOffRequestEmployee getEmployee() {
    return employee;
  }


  public void setEmployee(TimeOffRequestEmployee employee) {
    
    
    
    this.employee = employee;
  }


  public TimeOffRequest initiator(TimeOffRequestInitiator initiator) {
    
    
    
    
    this.initiator = initiator;
    return this;
  }

   /**
   * Get initiator
   * @return initiator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeOffRequestInitiator getInitiator() {
    return initiator;
  }


  public void setInitiator(TimeOffRequestInitiator initiator) {
    
    
    
    this.initiator = initiator;
  }


  public TimeOffRequest approver(TimeOffRequestApprover approver) {
    
    
    
    
    this.approver = approver;
    return this;
  }

   /**
   * Get approver
   * @return approver
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeOffRequestApprover getApprover() {
    return approver;
  }


  public void setApprover(TimeOffRequestApprover approver) {
    
    
    
    this.approver = approver;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffRequest instance itself
   */
  public TimeOffRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffRequest timeOffRequest = (TimeOffRequest) o;
    return Objects.equals(this.id, timeOffRequest.id) &&
        Objects.equals(this.status, timeOffRequest.status) &&
        Objects.equals(this.employeeNote, timeOffRequest.employeeNote) &&
        Objects.equals(this.employerNote, timeOffRequest.employerNote) &&
        Objects.equals(this.requestType, timeOffRequest.requestType) &&
        Objects.equals(this.days, timeOffRequest.days) &&
        Objects.equals(this.employee, timeOffRequest.employee) &&
        Objects.equals(this.initiator, timeOffRequest.initiator) &&
        Objects.equals(this.approver, timeOffRequest.approver)&&
        Objects.equals(this.additionalProperties, timeOffRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, employeeNote, employerNote, requestType, days, employee, initiator, approver, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    employeeNote: ").append(toIndentedString(employeeNote)).append("\n");
    sb.append("    employerNote: ").append(toIndentedString(employerNote)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("    approver: ").append(toIndentedString(approver)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("employee_note");
    openapiFields.add("employer_note");
    openapiFields.add("request_type");
    openapiFields.add("days");
    openapiFields.add("employee");
    openapiFields.add("initiator");
    openapiFields.add("approver");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffRequest is not found in the empty JSON string", TimeOffRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("employee_note") != null && !jsonObj.get("employee_note").isJsonNull()) && !jsonObj.get("employee_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_note").toString()));
      }
      if ((jsonObj.get("employer_note") != null && !jsonObj.get("employer_note").isJsonNull()) && !jsonObj.get("employer_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_note").toString()));
      }
      if ((jsonObj.get("request_type") != null && !jsonObj.get("request_type").isJsonNull()) && !jsonObj.get("request_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_type").toString()));
      }
      // validate the optional field `employee`
      if (jsonObj.get("employee") != null && !jsonObj.get("employee").isJsonNull()) {
        TimeOffRequestEmployee.validateJsonObject(jsonObj.getAsJsonObject("employee"));
      }
      // validate the optional field `initiator`
      if (jsonObj.get("initiator") != null && !jsonObj.get("initiator").isJsonNull()) {
        TimeOffRequestInitiator.validateJsonObject(jsonObj.getAsJsonObject("initiator"));
      }
      // validate the optional field `approver`
      if (jsonObj.get("approver") != null && !jsonObj.get("approver").isJsonNull()) {
        TimeOffRequestApprover.validateJsonObject(jsonObj.getAsJsonObject("approver"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffRequest>() {
           @Override
           public void write(JsonWriter out, TimeOffRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffRequest
  * @throws IOException if the JSON string is invalid with respect to TimeOffRequest
  */
  public static TimeOffRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffRequest.class);
  }

 /**
  * Convert an instance of TimeOffRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

