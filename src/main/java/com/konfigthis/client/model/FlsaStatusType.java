/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The FLSA status for this compensation. Salaried (&#39;Exempt&#39;) employees are paid a fixed salary every pay period. Salaried with overtime (&#39;Salaried Nonexempt&#39;) employees are paid a fixed salary every pay period, and receive overtime pay when applicable. Hourly (&#39;Nonexempt&#39;) employees are paid for the hours they work, and receive overtime pay when applicable. Commissioned employees (&#39;Commission Only Exempt&#39;) earn wages based only on commission. Commissioned with overtime (&#39;Commission Only Nonexempt&#39;) earn wages based on commission, and receive overtime pay when applicable. Owners (&#39;Owner&#39;) are employees that own at least twenty percent of the company. 
 */
@JsonAdapter(FlsaStatusType.Adapter.class)public enum FlsaStatusType {
  
  EXEMPT("Exempt"),
  
  SALARIED_NONEXEMPT("Salaried Nonexempt"),
  
  NONEXEMPT("Nonexempt"),
  
  OWNER("Owner"),
  
  COMMISSION_ONLY_EXEMPT("Commission Only Exempt"),
  
  COMMISSION_ONLY_NONEXEMPT("Commission Only Nonexempt");

  private String value;

  FlsaStatusType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FlsaStatusType fromValue(String value) {
    for (FlsaStatusType b : FlsaStatusType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FlsaStatusType> {
    @Override
    public void write(final JsonWriter jsonWriter, final FlsaStatusType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FlsaStatusType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FlsaStatusType.fromValue(value);
    }
  }
}

