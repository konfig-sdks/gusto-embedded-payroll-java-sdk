/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the payroll for the pay period.
 */
@ApiModel(description = "Information about the payroll for the pay period.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayPeriodPayroll {
  public static final String SERIALIZED_NAME_PAYROLL_UUID = "payroll_uuid";
  @SerializedName(SERIALIZED_NAME_PAYROLL_UUID)
  private String payrollUuid;

  public static final String SERIALIZED_NAME_CHECK_DATE = "check_date";
  @SerializedName(SERIALIZED_NAME_CHECK_DATE)
  private String checkDate;

  public static final String SERIALIZED_NAME_PROCESSED = "processed";
  @SerializedName(SERIALIZED_NAME_PROCESSED)
  private Boolean processed;

  public static final String SERIALIZED_NAME_PAYROLL_DEADLINE = "payroll_deadline";
  @SerializedName(SERIALIZED_NAME_PAYROLL_DEADLINE)
  private OffsetDateTime payrollDeadline;

  /**
   * Whether it is regular pay period or transition pay period.
   */
  @JsonAdapter(PayrollTypeEnum.Adapter.class)
 public enum PayrollTypeEnum {
    REGULAR("regular"),
    
    TRANSITION("transition");

    private String value;

    PayrollTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayrollTypeEnum fromValue(String value) {
      for (PayrollTypeEnum b : PayrollTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayrollTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayrollTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayrollTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayrollTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYROLL_TYPE = "payroll_type";
  @SerializedName(SERIALIZED_NAME_PAYROLL_TYPE)
  private PayrollTypeEnum payrollType;

  public PayPeriodPayroll() {
  }

  
  public PayPeriodPayroll(
     String payrollUuid, 
     String checkDate, 
     Boolean processed, 
     OffsetDateTime payrollDeadline, 
     PayrollTypeEnum payrollType
  ) {
    this();
    this.payrollUuid = payrollUuid;
    this.checkDate = checkDate;
    this.processed = processed;
    this.payrollDeadline = payrollDeadline;
    this.payrollType = payrollType;
  }

   /**
   * The UUID of the payroll for this pay period.
   * @return payrollUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UUID of the payroll for this pay period.")

  public String getPayrollUuid() {
    return payrollUuid;
  }




   /**
   * The date on which employees will be paid for the payroll if the payroll is submitted on time.
   * @return checkDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date on which employees will be paid for the payroll if the payroll is submitted on time.")

  public String getCheckDate() {
    return checkDate;
  }




   /**
   * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
   * @return processed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.")

  public Boolean getProcessed() {
    return processed;
  }




   /**
   * The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.
   * @return payrollDeadline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.")

  public OffsetDateTime getPayrollDeadline() {
    return payrollDeadline;
  }




   /**
   * Whether it is regular pay period or transition pay period.
   * @return payrollType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether it is regular pay period or transition pay period.")

  public PayrollTypeEnum getPayrollType() {
    return payrollType;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayPeriodPayroll instance itself
   */
  public PayPeriodPayroll putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayPeriodPayroll payPeriodPayroll = (PayPeriodPayroll) o;
    return Objects.equals(this.payrollUuid, payPeriodPayroll.payrollUuid) &&
        Objects.equals(this.checkDate, payPeriodPayroll.checkDate) &&
        Objects.equals(this.processed, payPeriodPayroll.processed) &&
        Objects.equals(this.payrollDeadline, payPeriodPayroll.payrollDeadline) &&
        Objects.equals(this.payrollType, payPeriodPayroll.payrollType)&&
        Objects.equals(this.additionalProperties, payPeriodPayroll.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrollUuid, checkDate, processed, payrollDeadline, payrollType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayPeriodPayroll {\n");
    sb.append("    payrollUuid: ").append(toIndentedString(payrollUuid)).append("\n");
    sb.append("    checkDate: ").append(toIndentedString(checkDate)).append("\n");
    sb.append("    processed: ").append(toIndentedString(processed)).append("\n");
    sb.append("    payrollDeadline: ").append(toIndentedString(payrollDeadline)).append("\n");
    sb.append("    payrollType: ").append(toIndentedString(payrollType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payroll_uuid");
    openapiFields.add("check_date");
    openapiFields.add("processed");
    openapiFields.add("payroll_deadline");
    openapiFields.add("payroll_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayPeriodPayroll
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayPeriodPayroll.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayPeriodPayroll is not found in the empty JSON string", PayPeriodPayroll.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payroll_uuid") != null && !jsonObj.get("payroll_uuid").isJsonNull()) && !jsonObj.get("payroll_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payroll_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payroll_uuid").toString()));
      }
      if ((jsonObj.get("check_date") != null && !jsonObj.get("check_date").isJsonNull()) && !jsonObj.get("check_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_date").toString()));
      }
      if ((jsonObj.get("payroll_type") != null && !jsonObj.get("payroll_type").isJsonNull()) && !jsonObj.get("payroll_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payroll_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payroll_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayPeriodPayroll.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayPeriodPayroll' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayPeriodPayroll> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayPeriodPayroll.class));

       return (TypeAdapter<T>) new TypeAdapter<PayPeriodPayroll>() {
           @Override
           public void write(JsonWriter out, PayPeriodPayroll value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayPeriodPayroll read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayPeriodPayroll instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayPeriodPayroll given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayPeriodPayroll
  * @throws IOException if the JSON string is invalid with respect to PayPeriodPayroll
  */
  public static PayPeriodPayroll fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayPeriodPayroll.class);
  }

 /**
  * Convert an instance of PayPeriodPayroll to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

