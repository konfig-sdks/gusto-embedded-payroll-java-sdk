/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The representation of a company benefit.
 */
@ApiModel(description = "The representation of a company benefit.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompanyBenefit {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_BENEFIT_TYPE = "benefit_type";
  @SerializedName(SERIALIZED_NAME_BENEFIT_TYPE)
  private Double benefitType;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_DELETABLE = "deletable";
  @SerializedName(SERIALIZED_NAME_DELETABLE)
  private Boolean deletable;

  public static final String SERIALIZED_NAME_SUPPORTS_PERCENTAGE_AMOUNTS = "supports_percentage_amounts";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_PERCENTAGE_AMOUNTS)
  private Boolean supportsPercentageAmounts;

  public static final String SERIALIZED_NAME_RESPONSIBLE_FOR_EMPLOYER_TAXES = "responsible_for_employer_taxes";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_FOR_EMPLOYER_TAXES)
  private Boolean responsibleForEmployerTaxes;

  public static final String SERIALIZED_NAME_RESPONSIBLE_FOR_EMPLOYEE_W2 = "responsible_for_employee_w2";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_FOR_EMPLOYEE_W2)
  private Boolean responsibleForEmployeeW2;

  public CompanyBenefit() {
  }

  
  public CompanyBenefit(
     String uuid, 
     Double benefitType, 
     Boolean supportsPercentageAmounts
  ) {
    this();
    this.uuid = uuid;
    this.benefitType = benefitType;
    this.supportsPercentageAmounts = supportsPercentageAmounts;
  }

  public CompanyBenefit description(String description) {
    
    
    if (description != null && description.length() < 1) {
      throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
    }
    
    this.description = description;
    return this;
  }

   /**
   * The description of the company benefit.For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Kaiser Permanente", value = "The description of the company benefit.For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    if (description != null && description.length() < 1) {
      throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
    }
    this.description = description;
  }


  public CompanyBenefit version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872", value = "The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


   /**
   * The UUID of the company benefit.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "54e37c27-43e6-4ae5-a5b2-e29895a133be", value = "The UUID of the company benefit.")

  public String getUuid() {
    return uuid;
  }




   /**
   * The type of the benefit to which the company benefit belongs.
   * @return benefitType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The type of the benefit to which the company benefit belongs.")

  public Double getBenefitType() {
    return benefitType;
  }




  public CompanyBenefit active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Whether this benefit is active for employee participation. Company benefits may only be deactivated if no employees are actively participating.
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether this benefit is active for employee participation. Company benefits may only be deactivated if no employees are actively participating.")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public CompanyBenefit deletable(Boolean deletable) {
    
    
    
    
    this.deletable = deletable;
    return this;
  }

   /**
   * Whether this company benefit can be deleted. Deletable will be set to true if the benefit has not been used in payroll, has no employee benefits associated, and the benefit is not owned by Gusto or a Partner
   * @return deletable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether this company benefit can be deleted. Deletable will be set to true if the benefit has not been used in payroll, has no employee benefits associated, and the benefit is not owned by Gusto or a Partner")

  public Boolean getDeletable() {
    return deletable;
  }


  public void setDeletable(Boolean deletable) {
    
    
    
    this.deletable = deletable;
  }


   /**
   * Whether employee deductions and company contributions can be set as percentages of payroll for an individual employee. This is determined by the type of benefit and is not configurable by the company.
   * @return supportsPercentageAmounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether employee deductions and company contributions can be set as percentages of payroll for an individual employee. This is determined by the type of benefit and is not configurable by the company.")

  public Boolean getSupportsPercentageAmounts() {
    return supportsPercentageAmounts;
  }




  public CompanyBenefit responsibleForEmployerTaxes(Boolean responsibleForEmployerTaxes) {
    
    
    
    
    this.responsibleForEmployerTaxes = responsibleForEmployerTaxes;
    return this;
  }

   /**
   * Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.
   * @return responsibleForEmployerTaxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.")

  public Boolean getResponsibleForEmployerTaxes() {
    return responsibleForEmployerTaxes;
  }


  public void setResponsibleForEmployerTaxes(Boolean responsibleForEmployerTaxes) {
    
    
    
    this.responsibleForEmployerTaxes = responsibleForEmployerTaxes;
  }


  public CompanyBenefit responsibleForEmployeeW2(Boolean responsibleForEmployeeW2) {
    
    
    
    
    this.responsibleForEmployeeW2 = responsibleForEmployeeW2;
    return this;
  }

   /**
   * Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.
   * @return responsibleForEmployeeW2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.")

  public Boolean getResponsibleForEmployeeW2() {
    return responsibleForEmployeeW2;
  }


  public void setResponsibleForEmployeeW2(Boolean responsibleForEmployeeW2) {
    
    
    
    this.responsibleForEmployeeW2 = responsibleForEmployeeW2;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompanyBenefit instance itself
   */
  public CompanyBenefit putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyBenefit companyBenefit = (CompanyBenefit) o;
    return Objects.equals(this.description, companyBenefit.description) &&
        Objects.equals(this.version, companyBenefit.version) &&
        Objects.equals(this.uuid, companyBenefit.uuid) &&
        Objects.equals(this.benefitType, companyBenefit.benefitType) &&
        Objects.equals(this.active, companyBenefit.active) &&
        Objects.equals(this.deletable, companyBenefit.deletable) &&
        Objects.equals(this.supportsPercentageAmounts, companyBenefit.supportsPercentageAmounts) &&
        Objects.equals(this.responsibleForEmployerTaxes, companyBenefit.responsibleForEmployerTaxes) &&
        Objects.equals(this.responsibleForEmployeeW2, companyBenefit.responsibleForEmployeeW2)&&
        Objects.equals(this.additionalProperties, companyBenefit.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, version, uuid, benefitType, active, deletable, supportsPercentageAmounts, responsibleForEmployerTaxes, responsibleForEmployeeW2, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyBenefit {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    benefitType: ").append(toIndentedString(benefitType)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    deletable: ").append(toIndentedString(deletable)).append("\n");
    sb.append("    supportsPercentageAmounts: ").append(toIndentedString(supportsPercentageAmounts)).append("\n");
    sb.append("    responsibleForEmployerTaxes: ").append(toIndentedString(responsibleForEmployerTaxes)).append("\n");
    sb.append("    responsibleForEmployeeW2: ").append(toIndentedString(responsibleForEmployeeW2)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("version");
    openapiFields.add("uuid");
    openapiFields.add("benefit_type");
    openapiFields.add("active");
    openapiFields.add("deletable");
    openapiFields.add("supports_percentage_amounts");
    openapiFields.add("responsible_for_employer_taxes");
    openapiFields.add("responsible_for_employee_w2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompanyBenefit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompanyBenefit.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyBenefit is not found in the empty JSON string", CompanyBenefit.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyBenefit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyBenefit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyBenefit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyBenefit.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyBenefit>() {
           @Override
           public void write(JsonWriter out, CompanyBenefit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyBenefit read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompanyBenefit instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompanyBenefit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompanyBenefit
  * @throws IOException if the JSON string is invalid with respect to CompanyBenefit
  */
  public static CompanyBenefit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyBenefit.class);
  }

 /**
  * Convert an instance of CompanyBenefit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

