/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PayrollsCreateOffCyclePayrollRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollsCreateOffCyclePayrollRequest {
  public static final String SERIALIZED_NAME_OFF_CYCLE = "off_cycle";
  @SerializedName(SERIALIZED_NAME_OFF_CYCLE)
  private Boolean offCycle;

  /**
   * An off cycle payroll reason. Select one from the following list.
   */
  @JsonAdapter(OffCycleReasonEnum.Adapter.class)
 public enum OffCycleReasonEnum {
    BONUS("Bonus"),
    
    CORRECTION("Correction"),
    
    DISMISSED_EMPLOYEE("Dismissed employee"),
    
    TRANSITION_FROM_OLD_PAY_SCHEDULE("Transition from old pay schedule");

    private String value;

    OffCycleReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OffCycleReasonEnum fromValue(String value) {
      for (OffCycleReasonEnum b : OffCycleReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OffCycleReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OffCycleReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OffCycleReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OffCycleReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OFF_CYCLE_REASON = "off_cycle_reason";
  @SerializedName(SERIALIZED_NAME_OFF_CYCLE_REASON)
  private OffCycleReasonEnum offCycleReason;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_PAY_SCHEDULE_UUID = "pay_schedule_uuid";
  @SerializedName(SERIALIZED_NAME_PAY_SCHEDULE_UUID)
  private String payScheduleUuid;

  public static final String SERIALIZED_NAME_EMPLOYEE_UUIDS = "employee_uuids";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_UUIDS)
  private List<String> employeeUuids = null;

  public static final String SERIALIZED_NAME_CHECK_DATE = "check_date";
  @SerializedName(SERIALIZED_NAME_CHECK_DATE)
  private String checkDate;

  /**
   * The payment schedule tax rate the payroll is based on
   */
  @JsonAdapter(WithholdingPayPeriodEnum.Adapter.class)
 public enum WithholdingPayPeriodEnum {
    EVERY_WEEK("Every week"),
    
    EVERY_OTHER_WEEK("Every other week"),
    
    TWICE_PER_MONTH("Twice per month"),
    
    MONTHLY("Monthly"),
    
    QUARTERLY("Quarterly"),
    
    SEMIANNUALLY("Semiannually"),
    
    ANNUALLY("Annually");

    private String value;

    WithholdingPayPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WithholdingPayPeriodEnum fromValue(String value) {
      for (WithholdingPayPeriodEnum b : WithholdingPayPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WithholdingPayPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WithholdingPayPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WithholdingPayPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WithholdingPayPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WITHHOLDING_PAY_PERIOD = "withholding_pay_period";
  @SerializedName(SERIALIZED_NAME_WITHHOLDING_PAY_PERIOD)
  private WithholdingPayPeriodEnum withholdingPayPeriod;

  public static final String SERIALIZED_NAME_SKIP_REGULAR_DEDUCTIONS = "skip_regular_deductions";
  @SerializedName(SERIALIZED_NAME_SKIP_REGULAR_DEDUCTIONS)
  private Boolean skipRegularDeductions;

  public static final String SERIALIZED_NAME_FIXED_WITHHOLDING_RATE = "fixed_withholding_rate";
  @SerializedName(SERIALIZED_NAME_FIXED_WITHHOLDING_RATE)
  private Boolean fixedWithholdingRate;

  public PayrollsCreateOffCyclePayrollRequest() {
  }

  public PayrollsCreateOffCyclePayrollRequest offCycle(Boolean offCycle) {
    
    
    
    
    this.offCycle = offCycle;
    return this;
  }

   /**
   * Whether it is an off cycle payroll.
   * @return offCycle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether it is an off cycle payroll.")

  public Boolean getOffCycle() {
    return offCycle;
  }


  public void setOffCycle(Boolean offCycle) {
    
    
    
    this.offCycle = offCycle;
  }


  public PayrollsCreateOffCyclePayrollRequest offCycleReason(OffCycleReasonEnum offCycleReason) {
    
    
    
    
    this.offCycleReason = offCycleReason;
    return this;
  }

   /**
   * An off cycle payroll reason. Select one from the following list.
   * @return offCycleReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An off cycle payroll reason. Select one from the following list.")

  public OffCycleReasonEnum getOffCycleReason() {
    return offCycleReason;
  }


  public void setOffCycleReason(OffCycleReasonEnum offCycleReason) {
    
    
    
    this.offCycleReason = offCycleReason;
  }


  public PayrollsCreateOffCyclePayrollRequest startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Pay period start date.
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Pay period start date.")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public PayrollsCreateOffCyclePayrollRequest endDate(String endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Pay period end date.
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Pay period end date.")

  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    
    
    
    this.endDate = endDate;
  }


  public PayrollsCreateOffCyclePayrollRequest payScheduleUuid(String payScheduleUuid) {
    
    
    
    
    this.payScheduleUuid = payScheduleUuid;
    return this;
  }

   /**
   * A pay schedule is required for Transition from old pay schedule payroll to identify the matching transition pay period.
   * @return payScheduleUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A pay schedule is required for Transition from old pay schedule payroll to identify the matching transition pay period.")

  public String getPayScheduleUuid() {
    return payScheduleUuid;
  }


  public void setPayScheduleUuid(String payScheduleUuid) {
    
    
    
    this.payScheduleUuid = payScheduleUuid;
  }


  public PayrollsCreateOffCyclePayrollRequest employeeUuids(List<String> employeeUuids) {
    
    
    
    
    this.employeeUuids = employeeUuids;
    return this;
  }

  public PayrollsCreateOffCyclePayrollRequest addEmployeeUuidsItem(String employeeUuidsItem) {
    if (this.employeeUuids == null) {
      this.employeeUuids = new ArrayList<>();
    }
    this.employeeUuids.add(employeeUuidsItem);
    return this;
  }

   /**
   * A list of employee uuids to include on the payroll.
   * @return employeeUuids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of employee uuids to include on the payroll.")

  public List<String> getEmployeeUuids() {
    return employeeUuids;
  }


  public void setEmployeeUuids(List<String> employeeUuids) {
    
    
    
    this.employeeUuids = employeeUuids;
  }


  public PayrollsCreateOffCyclePayrollRequest checkDate(String checkDate) {
    
    
    
    
    this.checkDate = checkDate;
    return this;
  }

   /**
   * Payment date.
   * @return checkDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment date.")

  public String getCheckDate() {
    return checkDate;
  }


  public void setCheckDate(String checkDate) {
    
    
    
    this.checkDate = checkDate;
  }


  public PayrollsCreateOffCyclePayrollRequest withholdingPayPeriod(WithholdingPayPeriodEnum withholdingPayPeriod) {
    
    
    
    
    this.withholdingPayPeriod = withholdingPayPeriod;
    return this;
  }

   /**
   * The payment schedule tax rate the payroll is based on
   * @return withholdingPayPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payment schedule tax rate the payroll is based on")

  public WithholdingPayPeriodEnum getWithholdingPayPeriod() {
    return withholdingPayPeriod;
  }


  public void setWithholdingPayPeriod(WithholdingPayPeriodEnum withholdingPayPeriod) {
    
    
    
    this.withholdingPayPeriod = withholdingPayPeriod;
  }


  public PayrollsCreateOffCyclePayrollRequest skipRegularDeductions(Boolean skipRegularDeductions) {
    
    
    
    
    this.skipRegularDeductions = skipRegularDeductions;
    return this;
  }

   /**
   * Block regular deductions and contributions for this payroll.
   * @return skipRegularDeductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Block regular deductions and contributions for this payroll.")

  public Boolean getSkipRegularDeductions() {
    return skipRegularDeductions;
  }


  public void setSkipRegularDeductions(Boolean skipRegularDeductions) {
    
    
    
    this.skipRegularDeductions = skipRegularDeductions;
  }


  public PayrollsCreateOffCyclePayrollRequest fixedWithholdingRate(Boolean fixedWithholdingRate) {
    
    
    
    
    this.fixedWithholdingRate = fixedWithholdingRate;
    return this;
  }

   /**
   * Enable taxes to be withheld at the IRS&#39;s required rate of 22% for federal income taxes. State income taxes will be taxed at the state&#39;s supplemental tax rate. Otherwise, we&#39;ll sum the entirety of the employee&#39;s wages and withhold taxes on the entire amount at the rate for regular wages.
   * @return fixedWithholdingRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.")

  public Boolean getFixedWithholdingRate() {
    return fixedWithholdingRate;
  }


  public void setFixedWithholdingRate(Boolean fixedWithholdingRate) {
    
    
    
    this.fixedWithholdingRate = fixedWithholdingRate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollsCreateOffCyclePayrollRequest instance itself
   */
  public PayrollsCreateOffCyclePayrollRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest = (PayrollsCreateOffCyclePayrollRequest) o;
    return Objects.equals(this.offCycle, payrollsCreateOffCyclePayrollRequest.offCycle) &&
        Objects.equals(this.offCycleReason, payrollsCreateOffCyclePayrollRequest.offCycleReason) &&
        Objects.equals(this.startDate, payrollsCreateOffCyclePayrollRequest.startDate) &&
        Objects.equals(this.endDate, payrollsCreateOffCyclePayrollRequest.endDate) &&
        Objects.equals(this.payScheduleUuid, payrollsCreateOffCyclePayrollRequest.payScheduleUuid) &&
        Objects.equals(this.employeeUuids, payrollsCreateOffCyclePayrollRequest.employeeUuids) &&
        Objects.equals(this.checkDate, payrollsCreateOffCyclePayrollRequest.checkDate) &&
        Objects.equals(this.withholdingPayPeriod, payrollsCreateOffCyclePayrollRequest.withholdingPayPeriod) &&
        Objects.equals(this.skipRegularDeductions, payrollsCreateOffCyclePayrollRequest.skipRegularDeductions) &&
        Objects.equals(this.fixedWithholdingRate, payrollsCreateOffCyclePayrollRequest.fixedWithholdingRate)&&
        Objects.equals(this.additionalProperties, payrollsCreateOffCyclePayrollRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offCycle, offCycleReason, startDate, endDate, payScheduleUuid, employeeUuids, checkDate, withholdingPayPeriod, skipRegularDeductions, fixedWithholdingRate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollsCreateOffCyclePayrollRequest {\n");
    sb.append("    offCycle: ").append(toIndentedString(offCycle)).append("\n");
    sb.append("    offCycleReason: ").append(toIndentedString(offCycleReason)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    payScheduleUuid: ").append(toIndentedString(payScheduleUuid)).append("\n");
    sb.append("    employeeUuids: ").append(toIndentedString(employeeUuids)).append("\n");
    sb.append("    checkDate: ").append(toIndentedString(checkDate)).append("\n");
    sb.append("    withholdingPayPeriod: ").append(toIndentedString(withholdingPayPeriod)).append("\n");
    sb.append("    skipRegularDeductions: ").append(toIndentedString(skipRegularDeductions)).append("\n");
    sb.append("    fixedWithholdingRate: ").append(toIndentedString(fixedWithholdingRate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("off_cycle");
    openapiFields.add("off_cycle_reason");
    openapiFields.add("start_date");
    openapiFields.add("end_date");
    openapiFields.add("pay_schedule_uuid");
    openapiFields.add("employee_uuids");
    openapiFields.add("check_date");
    openapiFields.add("withholding_pay_period");
    openapiFields.add("skip_regular_deductions");
    openapiFields.add("fixed_withholding_rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("off_cycle");
    openapiRequiredFields.add("off_cycle_reason");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("end_date");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollsCreateOffCyclePayrollRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollsCreateOffCyclePayrollRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollsCreateOffCyclePayrollRequest is not found in the empty JSON string", PayrollsCreateOffCyclePayrollRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayrollsCreateOffCyclePayrollRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("off_cycle_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `off_cycle_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("off_cycle_reason").toString()));
      }
      if (!jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if (!jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if ((jsonObj.get("pay_schedule_uuid") != null && !jsonObj.get("pay_schedule_uuid").isJsonNull()) && !jsonObj.get("pay_schedule_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pay_schedule_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pay_schedule_uuid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("employee_uuids") != null && !jsonObj.get("employee_uuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_uuids` to be an array in the JSON string but got `%s`", jsonObj.get("employee_uuids").toString()));
      }
      if ((jsonObj.get("check_date") != null && !jsonObj.get("check_date").isJsonNull()) && !jsonObj.get("check_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_date").toString()));
      }
      if ((jsonObj.get("withholding_pay_period") != null && !jsonObj.get("withholding_pay_period").isJsonNull()) && !jsonObj.get("withholding_pay_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `withholding_pay_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("withholding_pay_period").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollsCreateOffCyclePayrollRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollsCreateOffCyclePayrollRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollsCreateOffCyclePayrollRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollsCreateOffCyclePayrollRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollsCreateOffCyclePayrollRequest>() {
           @Override
           public void write(JsonWriter out, PayrollsCreateOffCyclePayrollRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollsCreateOffCyclePayrollRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollsCreateOffCyclePayrollRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollsCreateOffCyclePayrollRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollsCreateOffCyclePayrollRequest
  * @throws IOException if the JSON string is invalid with respect to PayrollsCreateOffCyclePayrollRequest
  */
  public static PayrollsCreateOffCyclePayrollRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollsCreateOffCyclePayrollRequest.class);
  }

 /**
  * Convert an instance of PayrollsCreateOffCyclePayrollRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

