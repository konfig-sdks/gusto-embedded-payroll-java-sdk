/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeTaxSetupUpdateFederalTaxesRequest {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_FILING_STATUS = "filing_status";
  @SerializedName(SERIALIZED_NAME_FILING_STATUS)
  private String filingStatus;

  public static final String SERIALIZED_NAME_EXTRA_WITHHOLDING = "extra_withholding";
  @SerializedName(SERIALIZED_NAME_EXTRA_WITHHOLDING)
  private String extraWithholding;

  public static final String SERIALIZED_NAME_TWO_JOBS = "two_jobs";
  @SerializedName(SERIALIZED_NAME_TWO_JOBS)
  private Boolean twoJobs;

  public static final String SERIALIZED_NAME_DEPENDENTS_AMOUNT = "dependents_amount";
  @SerializedName(SERIALIZED_NAME_DEPENDENTS_AMOUNT)
  private String dependentsAmount;

  public static final String SERIALIZED_NAME_OTHER_INCOME = "other_income";
  @SerializedName(SERIALIZED_NAME_OTHER_INCOME)
  private String otherIncome;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private String deductions;

  public static final String SERIALIZED_NAME_W4_DATA_TYPE = "w4_data_type";
  @SerializedName(SERIALIZED_NAME_W4_DATA_TYPE)
  private String w4DataType;

  public EmployeeTaxSetupUpdateFederalTaxesRequest() {
  }

  public EmployeeTaxSetupUpdateFederalTaxesRequest version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public EmployeeTaxSetupUpdateFederalTaxesRequest filingStatus(String filingStatus) {
    
    
    
    
    this.filingStatus = filingStatus;
    return this;
  }

   /**
   * Get filingStatus
   * @return filingStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFilingStatus() {
    return filingStatus;
  }


  public void setFilingStatus(String filingStatus) {
    
    
    
    this.filingStatus = filingStatus;
  }


  public EmployeeTaxSetupUpdateFederalTaxesRequest extraWithholding(String extraWithholding) {
    
    
    
    
    this.extraWithholding = extraWithholding;
    return this;
  }

   /**
   * Get extraWithholding
   * @return extraWithholding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtraWithholding() {
    return extraWithholding;
  }


  public void setExtraWithholding(String extraWithholding) {
    
    
    
    this.extraWithholding = extraWithholding;
  }


  public EmployeeTaxSetupUpdateFederalTaxesRequest twoJobs(Boolean twoJobs) {
    
    
    
    
    this.twoJobs = twoJobs;
    return this;
  }

   /**
   * Get twoJobs
   * @return twoJobs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTwoJobs() {
    return twoJobs;
  }


  public void setTwoJobs(Boolean twoJobs) {
    
    
    
    this.twoJobs = twoJobs;
  }


  public EmployeeTaxSetupUpdateFederalTaxesRequest dependentsAmount(String dependentsAmount) {
    
    
    
    
    this.dependentsAmount = dependentsAmount;
    return this;
  }

   /**
   * Get dependentsAmount
   * @return dependentsAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDependentsAmount() {
    return dependentsAmount;
  }


  public void setDependentsAmount(String dependentsAmount) {
    
    
    
    this.dependentsAmount = dependentsAmount;
  }


  public EmployeeTaxSetupUpdateFederalTaxesRequest otherIncome(String otherIncome) {
    
    
    
    
    this.otherIncome = otherIncome;
    return this;
  }

   /**
   * Get otherIncome
   * @return otherIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOtherIncome() {
    return otherIncome;
  }


  public void setOtherIncome(String otherIncome) {
    
    
    
    this.otherIncome = otherIncome;
  }


  public EmployeeTaxSetupUpdateFederalTaxesRequest deductions(String deductions) {
    
    
    
    
    this.deductions = deductions;
    return this;
  }

   /**
   * Get deductions
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeductions() {
    return deductions;
  }


  public void setDeductions(String deductions) {
    
    
    
    this.deductions = deductions;
  }


  public EmployeeTaxSetupUpdateFederalTaxesRequest w4DataType(String w4DataType) {
    
    
    
    
    this.w4DataType = w4DataType;
    return this;
  }

   /**
   * Get w4DataType
   * @return w4DataType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getW4DataType() {
    return w4DataType;
  }


  public void setW4DataType(String w4DataType) {
    
    
    
    this.w4DataType = w4DataType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeTaxSetupUpdateFederalTaxesRequest instance itself
   */
  public EmployeeTaxSetupUpdateFederalTaxesRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest = (EmployeeTaxSetupUpdateFederalTaxesRequest) o;
    return Objects.equals(this.version, employeeTaxSetupUpdateFederalTaxesRequest.version) &&
        Objects.equals(this.filingStatus, employeeTaxSetupUpdateFederalTaxesRequest.filingStatus) &&
        Objects.equals(this.extraWithholding, employeeTaxSetupUpdateFederalTaxesRequest.extraWithholding) &&
        Objects.equals(this.twoJobs, employeeTaxSetupUpdateFederalTaxesRequest.twoJobs) &&
        Objects.equals(this.dependentsAmount, employeeTaxSetupUpdateFederalTaxesRequest.dependentsAmount) &&
        Objects.equals(this.otherIncome, employeeTaxSetupUpdateFederalTaxesRequest.otherIncome) &&
        Objects.equals(this.deductions, employeeTaxSetupUpdateFederalTaxesRequest.deductions) &&
        Objects.equals(this.w4DataType, employeeTaxSetupUpdateFederalTaxesRequest.w4DataType)&&
        Objects.equals(this.additionalProperties, employeeTaxSetupUpdateFederalTaxesRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, filingStatus, extraWithholding, twoJobs, dependentsAmount, otherIncome, deductions, w4DataType, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeTaxSetupUpdateFederalTaxesRequest {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    filingStatus: ").append(toIndentedString(filingStatus)).append("\n");
    sb.append("    extraWithholding: ").append(toIndentedString(extraWithholding)).append("\n");
    sb.append("    twoJobs: ").append(toIndentedString(twoJobs)).append("\n");
    sb.append("    dependentsAmount: ").append(toIndentedString(dependentsAmount)).append("\n");
    sb.append("    otherIncome: ").append(toIndentedString(otherIncome)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    w4DataType: ").append(toIndentedString(w4DataType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("filing_status");
    openapiFields.add("extra_withholding");
    openapiFields.add("two_jobs");
    openapiFields.add("dependents_amount");
    openapiFields.add("other_income");
    openapiFields.add("deductions");
    openapiFields.add("w4_data_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeTaxSetupUpdateFederalTaxesRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeTaxSetupUpdateFederalTaxesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeTaxSetupUpdateFederalTaxesRequest is not found in the empty JSON string", EmployeeTaxSetupUpdateFederalTaxesRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeeTaxSetupUpdateFederalTaxesRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("filing_status") != null && !jsonObj.get("filing_status").isJsonNull()) && !jsonObj.get("filing_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filing_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filing_status").toString()));
      }
      if (!jsonObj.get("extra_withholding").isJsonNull() && (jsonObj.get("extra_withholding") != null && !jsonObj.get("extra_withholding").isJsonNull()) && !jsonObj.get("extra_withholding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra_withholding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra_withholding").toString()));
      }
      if ((jsonObj.get("dependents_amount") != null && !jsonObj.get("dependents_amount").isJsonNull()) && !jsonObj.get("dependents_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependents_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependents_amount").toString()));
      }
      if ((jsonObj.get("other_income") != null && !jsonObj.get("other_income").isJsonNull()) && !jsonObj.get("other_income").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `other_income` to be a primitive type in the JSON string but got `%s`", jsonObj.get("other_income").toString()));
      }
      if ((jsonObj.get("deductions") != null && !jsonObj.get("deductions").isJsonNull()) && !jsonObj.get("deductions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deductions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deductions").toString()));
      }
      if ((jsonObj.get("w4_data_type") != null && !jsonObj.get("w4_data_type").isJsonNull()) && !jsonObj.get("w4_data_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `w4_data_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("w4_data_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeTaxSetupUpdateFederalTaxesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeTaxSetupUpdateFederalTaxesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeTaxSetupUpdateFederalTaxesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeTaxSetupUpdateFederalTaxesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeTaxSetupUpdateFederalTaxesRequest>() {
           @Override
           public void write(JsonWriter out, EmployeeTaxSetupUpdateFederalTaxesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeTaxSetupUpdateFederalTaxesRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeTaxSetupUpdateFederalTaxesRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeTaxSetupUpdateFederalTaxesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeTaxSetupUpdateFederalTaxesRequest
  * @throws IOException if the JSON string is invalid with respect to EmployeeTaxSetupUpdateFederalTaxesRequest
  */
  public static EmployeeTaxSetupUpdateFederalTaxesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeTaxSetupUpdateFederalTaxesRequest.class);
  }

 /**
  * Convert an instance of EmployeeTaxSetupUpdateFederalTaxesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

