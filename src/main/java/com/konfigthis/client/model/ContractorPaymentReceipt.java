/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContractorPaymentReceiptContractorPaymentsInner;
import com.konfigthis.client.model.ContractorPaymentReceiptLicensee;
import com.konfigthis.client.model.ContractorPaymentReceiptTotals;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ContractorPaymentReceipt
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContractorPaymentReceipt {
  public static final String SERIALIZED_NAME_CONTRACTOR_PAYMENT_UUID = "contractor_payment_uuid";
  @SerializedName(SERIALIZED_NAME_CONTRACTOR_PAYMENT_UUID)
  private String contractorPaymentUuid;

  public static final String SERIALIZED_NAME_COMPANY_UUID = "company_uuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_UUID)
  private String companyUuid;

  public static final String SERIALIZED_NAME_NAME_OF_SENDER = "name_of_sender";
  @SerializedName(SERIALIZED_NAME_NAME_OF_SENDER)
  private String nameOfSender;

  public static final String SERIALIZED_NAME_NAME_OF_RECIPIENT = "name_of_recipient";
  @SerializedName(SERIALIZED_NAME_NAME_OF_RECIPIENT)
  private String nameOfRecipient;

  public static final String SERIALIZED_NAME_DEBIT_DATE = "debit_date";
  @SerializedName(SERIALIZED_NAME_DEBIT_DATE)
  private LocalDate debitDate;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_LICENSE_URI = "license_uri";
  @SerializedName(SERIALIZED_NAME_LICENSE_URI)
  private String licenseUri;

  public static final String SERIALIZED_NAME_RIGHT_TO_REFUND = "right_to_refund";
  @SerializedName(SERIALIZED_NAME_RIGHT_TO_REFUND)
  private String rightToRefund;

  public static final String SERIALIZED_NAME_LIABILITY_OF_LICENSEE = "liability_of_licensee";
  @SerializedName(SERIALIZED_NAME_LIABILITY_OF_LICENSEE)
  private String liabilityOfLicensee;

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private ContractorPaymentReceiptTotals totals;

  public static final String SERIALIZED_NAME_CONTRACTOR_PAYMENTS = "contractor_payments";
  @SerializedName(SERIALIZED_NAME_CONTRACTOR_PAYMENTS)
  private List<ContractorPaymentReceiptContractorPaymentsInner> contractorPayments = null;

  public static final String SERIALIZED_NAME_LICENSEE = "licensee";
  @SerializedName(SERIALIZED_NAME_LICENSEE)
  private ContractorPaymentReceiptLicensee licensee;

  public ContractorPaymentReceipt() {
  }

  public ContractorPaymentReceipt contractorPaymentUuid(String contractorPaymentUuid) {
    
    
    
    
    this.contractorPaymentUuid = contractorPaymentUuid;
    return this;
  }

   /**
   * A unique identifier of the contractor payment receipt.
   * @return contractorPaymentUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "afccb970-357e-4013-81f5-85dafc74f9b6", value = "A unique identifier of the contractor payment receipt.")

  public String getContractorPaymentUuid() {
    return contractorPaymentUuid;
  }


  public void setContractorPaymentUuid(String contractorPaymentUuid) {
    
    
    
    this.contractorPaymentUuid = contractorPaymentUuid;
  }


  public ContractorPaymentReceipt companyUuid(String companyUuid) {
    
    
    
    
    this.companyUuid = companyUuid;
    return this;
  }

   /**
   * A unique identifier of the company making the contractor payment.
   * @return companyUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "c827aa0d-3928-4d5a-ab1f-400641a7d2b8", value = "A unique identifier of the company making the contractor payment.")

  public String getCompanyUuid() {
    return companyUuid;
  }


  public void setCompanyUuid(String companyUuid) {
    
    
    
    this.companyUuid = companyUuid;
  }


  public ContractorPaymentReceipt nameOfSender(String nameOfSender) {
    
    
    
    
    this.nameOfSender = nameOfSender;
    return this;
  }

   /**
   * The name of the company making the contractor payment.
   * @return nameOfSender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Torp and Sons and Sons", value = "The name of the company making the contractor payment.")

  public String getNameOfSender() {
    return nameOfSender;
  }


  public void setNameOfSender(String nameOfSender) {
    
    
    
    this.nameOfSender = nameOfSender;
  }


  public ContractorPaymentReceipt nameOfRecipient(String nameOfRecipient) {
    
    
    
    
    this.nameOfRecipient = nameOfRecipient;
    return this;
  }

   /**
   * The individual or company name of the contractor receiving payment.
   * @return nameOfRecipient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Patricia Hamill", value = "The individual or company name of the contractor receiving payment.")

  public String getNameOfRecipient() {
    return nameOfRecipient;
  }


  public void setNameOfRecipient(String nameOfRecipient) {
    
    
    
    this.nameOfRecipient = nameOfRecipient;
  }


  public ContractorPaymentReceipt debitDate(LocalDate debitDate) {
    
    
    
    
    this.debitDate = debitDate;
    return this;
  }

   /**
   * The debit date for the contractor payment.
   * @return debitDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sun May 29 17:00:00 PDT 2022", value = "The debit date for the contractor payment.")

  public LocalDate getDebitDate() {
    return debitDate;
  }


  public void setDebitDate(LocalDate debitDate) {
    
    
    
    this.debitDate = debitDate;
  }


  public ContractorPaymentReceipt license(String license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * Always the fixed string \&quot;ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page.\&quot;
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page.", value = "Always the fixed string \"ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page.\"")

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    
    
    
    this.license = license;
  }


  public ContractorPaymentReceipt licenseUri(String licenseUri) {
    
    
    
    
    this.licenseUri = licenseUri;
    return this;
  }

   /**
   * URL for the license information for the licensed payroll processor. Always the fixed string \&quot;https://gusto.com/about/licenses\&quot;
   * @return licenseUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gusto.com/about/licenses", value = "URL for the license information for the licensed payroll processor. Always the fixed string \"https://gusto.com/about/licenses\"")

  public String getLicenseUri() {
    return licenseUri;
  }


  public void setLicenseUri(String licenseUri) {
    
    
    
    this.licenseUri = licenseUri;
  }


  public ContractorPaymentReceipt rightToRefund(String rightToRefund) {
    
    
    
    
    this.rightToRefund = rightToRefund;
    return this;
  }

   /**
   * URL for information related to right to refund. Always the fixed string \&quot;https://gusto.com/about/licenses\&quot;
   * @return rightToRefund
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gusto.com/about/licenses", value = "URL for information related to right to refund. Always the fixed string \"https://gusto.com/about/licenses\"")

  public String getRightToRefund() {
    return rightToRefund;
  }


  public void setRightToRefund(String rightToRefund) {
    
    
    
    this.rightToRefund = rightToRefund;
  }


  public ContractorPaymentReceipt liabilityOfLicensee(String liabilityOfLicensee) {
    
    
    
    
    this.liabilityOfLicensee = liabilityOfLicensee;
    return this;
  }

   /**
   * URL for information related to right to liability of licensee. Always the fixed string \&quot;https://gusto.com/about/licenses\&quot;
   * @return liabilityOfLicensee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gusto.com/about/licenses", value = "URL for information related to right to liability of licensee. Always the fixed string \"https://gusto.com/about/licenses\"")

  public String getLiabilityOfLicensee() {
    return liabilityOfLicensee;
  }


  public void setLiabilityOfLicensee(String liabilityOfLicensee) {
    
    
    
    this.liabilityOfLicensee = liabilityOfLicensee;
  }


  public ContractorPaymentReceipt totals(ContractorPaymentReceiptTotals totals) {
    
    
    
    
    this.totals = totals;
    return this;
  }

   /**
   * Get totals
   * @return totals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContractorPaymentReceiptTotals getTotals() {
    return totals;
  }


  public void setTotals(ContractorPaymentReceiptTotals totals) {
    
    
    
    this.totals = totals;
  }


  public ContractorPaymentReceipt contractorPayments(List<ContractorPaymentReceiptContractorPaymentsInner> contractorPayments) {
    
    
    
    
    this.contractorPayments = contractorPayments;
    return this;
  }

  public ContractorPaymentReceipt addContractorPaymentsItem(ContractorPaymentReceiptContractorPaymentsInner contractorPaymentsItem) {
    if (this.contractorPayments == null) {
      this.contractorPayments = new ArrayList<>();
    }
    this.contractorPayments.add(contractorPaymentsItem);
    return this;
  }

   /**
   * An array of contractor payments for this contractor payment.
   * @return contractorPayments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of contractor payments for this contractor payment.")

  public List<ContractorPaymentReceiptContractorPaymentsInner> getContractorPayments() {
    return contractorPayments;
  }


  public void setContractorPayments(List<ContractorPaymentReceiptContractorPaymentsInner> contractorPayments) {
    
    
    
    this.contractorPayments = contractorPayments;
  }


  public ContractorPaymentReceipt licensee(ContractorPaymentReceiptLicensee licensee) {
    
    
    
    
    this.licensee = licensee;
    return this;
  }

   /**
   * Get licensee
   * @return licensee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContractorPaymentReceiptLicensee getLicensee() {
    return licensee;
  }


  public void setLicensee(ContractorPaymentReceiptLicensee licensee) {
    
    
    
    this.licensee = licensee;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContractorPaymentReceipt instance itself
   */
  public ContractorPaymentReceipt putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractorPaymentReceipt contractorPaymentReceipt = (ContractorPaymentReceipt) o;
    return Objects.equals(this.contractorPaymentUuid, contractorPaymentReceipt.contractorPaymentUuid) &&
        Objects.equals(this.companyUuid, contractorPaymentReceipt.companyUuid) &&
        Objects.equals(this.nameOfSender, contractorPaymentReceipt.nameOfSender) &&
        Objects.equals(this.nameOfRecipient, contractorPaymentReceipt.nameOfRecipient) &&
        Objects.equals(this.debitDate, contractorPaymentReceipt.debitDate) &&
        Objects.equals(this.license, contractorPaymentReceipt.license) &&
        Objects.equals(this.licenseUri, contractorPaymentReceipt.licenseUri) &&
        Objects.equals(this.rightToRefund, contractorPaymentReceipt.rightToRefund) &&
        Objects.equals(this.liabilityOfLicensee, contractorPaymentReceipt.liabilityOfLicensee) &&
        Objects.equals(this.totals, contractorPaymentReceipt.totals) &&
        Objects.equals(this.contractorPayments, contractorPaymentReceipt.contractorPayments) &&
        Objects.equals(this.licensee, contractorPaymentReceipt.licensee)&&
        Objects.equals(this.additionalProperties, contractorPaymentReceipt.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractorPaymentUuid, companyUuid, nameOfSender, nameOfRecipient, debitDate, license, licenseUri, rightToRefund, liabilityOfLicensee, totals, contractorPayments, licensee, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractorPaymentReceipt {\n");
    sb.append("    contractorPaymentUuid: ").append(toIndentedString(contractorPaymentUuid)).append("\n");
    sb.append("    companyUuid: ").append(toIndentedString(companyUuid)).append("\n");
    sb.append("    nameOfSender: ").append(toIndentedString(nameOfSender)).append("\n");
    sb.append("    nameOfRecipient: ").append(toIndentedString(nameOfRecipient)).append("\n");
    sb.append("    debitDate: ").append(toIndentedString(debitDate)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    licenseUri: ").append(toIndentedString(licenseUri)).append("\n");
    sb.append("    rightToRefund: ").append(toIndentedString(rightToRefund)).append("\n");
    sb.append("    liabilityOfLicensee: ").append(toIndentedString(liabilityOfLicensee)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("    contractorPayments: ").append(toIndentedString(contractorPayments)).append("\n");
    sb.append("    licensee: ").append(toIndentedString(licensee)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractor_payment_uuid");
    openapiFields.add("company_uuid");
    openapiFields.add("name_of_sender");
    openapiFields.add("name_of_recipient");
    openapiFields.add("debit_date");
    openapiFields.add("license");
    openapiFields.add("license_uri");
    openapiFields.add("right_to_refund");
    openapiFields.add("liability_of_licensee");
    openapiFields.add("totals");
    openapiFields.add("contractor_payments");
    openapiFields.add("licensee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContractorPaymentReceipt
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContractorPaymentReceipt.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractorPaymentReceipt is not found in the empty JSON string", ContractorPaymentReceipt.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("contractor_payment_uuid") != null && !jsonObj.get("contractor_payment_uuid").isJsonNull()) && !jsonObj.get("contractor_payment_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractor_payment_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractor_payment_uuid").toString()));
      }
      if ((jsonObj.get("company_uuid") != null && !jsonObj.get("company_uuid").isJsonNull()) && !jsonObj.get("company_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_uuid").toString()));
      }
      if ((jsonObj.get("name_of_sender") != null && !jsonObj.get("name_of_sender").isJsonNull()) && !jsonObj.get("name_of_sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_of_sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_of_sender").toString()));
      }
      if ((jsonObj.get("name_of_recipient") != null && !jsonObj.get("name_of_recipient").isJsonNull()) && !jsonObj.get("name_of_recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_of_recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_of_recipient").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("license_uri") != null && !jsonObj.get("license_uri").isJsonNull()) && !jsonObj.get("license_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_uri").toString()));
      }
      if ((jsonObj.get("right_to_refund") != null && !jsonObj.get("right_to_refund").isJsonNull()) && !jsonObj.get("right_to_refund").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `right_to_refund` to be a primitive type in the JSON string but got `%s`", jsonObj.get("right_to_refund").toString()));
      }
      if ((jsonObj.get("liability_of_licensee") != null && !jsonObj.get("liability_of_licensee").isJsonNull()) && !jsonObj.get("liability_of_licensee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liability_of_licensee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liability_of_licensee").toString()));
      }
      // validate the optional field `totals`
      if (jsonObj.get("totals") != null && !jsonObj.get("totals").isJsonNull()) {
        ContractorPaymentReceiptTotals.validateJsonObject(jsonObj.getAsJsonObject("totals"));
      }
      if (jsonObj.get("contractor_payments") != null && !jsonObj.get("contractor_payments").isJsonNull()) {
        JsonArray jsonArraycontractorPayments = jsonObj.getAsJsonArray("contractor_payments");
        if (jsonArraycontractorPayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contractor_payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contractor_payments` to be an array in the JSON string but got `%s`", jsonObj.get("contractor_payments").toString()));
          }

          // validate the optional field `contractor_payments` (array)
          for (int i = 0; i < jsonArraycontractorPayments.size(); i++) {
            ContractorPaymentReceiptContractorPaymentsInner.validateJsonObject(jsonArraycontractorPayments.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `licensee`
      if (jsonObj.get("licensee") != null && !jsonObj.get("licensee").isJsonNull()) {
        ContractorPaymentReceiptLicensee.validateJsonObject(jsonObj.getAsJsonObject("licensee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractorPaymentReceipt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractorPaymentReceipt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractorPaymentReceipt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractorPaymentReceipt.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractorPaymentReceipt>() {
           @Override
           public void write(JsonWriter out, ContractorPaymentReceipt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractorPaymentReceipt read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContractorPaymentReceipt instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContractorPaymentReceipt given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContractorPaymentReceipt
  * @throws IOException if the JSON string is invalid with respect to ContractorPaymentReceipt
  */
  public static ContractorPaymentReceipt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractorPaymentReceipt.class);
  }

 /**
  * Convert an instance of ContractorPaymentReceipt to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

