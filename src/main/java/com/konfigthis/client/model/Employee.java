/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeeCustomField;
import com.konfigthis.client.model.Garnishment;
import com.konfigthis.client.model.Job;
import com.konfigthis.client.model.PaidTimeOff;
import com.konfigthis.client.model.Termination;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The representation of an employee in Gusto.
 */
@ApiModel(description = "The representation of an employee in Gusto.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Employee {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_INITIAL = "middle_initial";
  @SerializedName(SERIALIZED_NAME_MIDDLE_INITIAL)
  private String middleInitial;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_COMPANY_UUID = "company_uuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_UUID)
  private String companyUuid;

  public static final String SERIALIZED_NAME_MANAGER_UUID = "manager_uuid";
  @SerializedName(SERIALIZED_NAME_MANAGER_UUID)
  private String managerUuid;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_TERMINATED = "terminated";
  @SerializedName(SERIALIZED_NAME_TERMINATED)
  private Boolean terminated;

  public static final String SERIALIZED_NAME_TWO_PERCENT_SHAREHOLDER = "two_percent_shareholder";
  @SerializedName(SERIALIZED_NAME_TWO_PERCENT_SHAREHOLDER)
  private Boolean twoPercentShareholder;

  public static final String SERIALIZED_NAME_ONBOARDED = "onboarded";
  @SerializedName(SERIALIZED_NAME_ONBOARDED)
  private Boolean onboarded;

  /**
   * The current onboarding status of the employee
   */
  @JsonAdapter(OnboardingStatusEnum.Adapter.class)
 public enum OnboardingStatusEnum {
    ONBOARDING_COMPLETED("onboarding_completed"),
    
    ADMIN_ONBOARDING_INCOMPLETE("admin_onboarding_incomplete"),
    
    SELF_ONBOARDING_PENDING_INVITE("self_onboarding_pending_invite"),
    
    SELF_ONBOARDING_INVITED("self_onboarding_invited"),
    
    SELF_ONBOARDING_INVITED_STARTED("self_onboarding_invited_started"),
    
    SELF_ONBOARDING_INVITED_OVERDUE("self_onboarding_invited_overdue"),
    
    SELF_ONBOARDING_COMPLETED_BY_EMPLOYEE("self_onboarding_completed_by_employee"),
    
    SELF_ONBOARDING_AWAITING_ADMIN_REVIEW("self_onboarding_awaiting_admin_review");

    private String value;

    OnboardingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnboardingStatusEnum fromValue(String value) {
      for (OnboardingStatusEnum b : OnboardingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OnboardingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnboardingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnboardingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OnboardingStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ONBOARDING_STATUS = "onboarding_status";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_STATUS)
  private OnboardingStatusEnum onboardingStatus;

  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<Job> jobs = null;

  public static final String SERIALIZED_NAME_ELIGIBLE_PAID_TIME_OFF = "eligible_paid_time_off";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_PAID_TIME_OFF)
  private List<PaidTimeOff> eligiblePaidTimeOff = null;

  public static final String SERIALIZED_NAME_TERMINATIONS = "terminations";
  @SerializedName(SERIALIZED_NAME_TERMINATIONS)
  private List<Termination> terminations = null;

  public static final String SERIALIZED_NAME_GARNISHMENTS = "garnishments";
  @SerializedName(SERIALIZED_NAME_GARNISHMENTS)
  private List<Garnishment> garnishments = null;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<EmployeeCustomField> customFields = null;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "date_of_birth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_HAS_SSN = "has_ssn";
  @SerializedName(SERIALIZED_NAME_HAS_SSN)
  private Boolean hasSsn;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private String ssn;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PREFERRED_FIRST_NAME = "preferred_first_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_FIRST_NAME)
  private String preferredFirstName;

  /**
   * The employee&#39;s payment method
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
 public enum PaymentMethodEnum {
    DIRECT_DEPOSIT("Direct Deposit"),
    
    CHECK("Check");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod = PaymentMethodEnum.CHECK;

  public static final String SERIALIZED_NAME_WORK_EMAIL = "work_email";
  @SerializedName(SERIALIZED_NAME_WORK_EMAIL)
  private String workEmail;

  /**
   * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
   */
  @JsonAdapter(CurrentEmploymentStatusEnum.Adapter.class)
 public enum CurrentEmploymentStatusEnum {
    FULL_TIME("full_time"),
    
    PART_TIME_UNDER_TWENTY_HOURS("part_time_under_twenty_hours"),
    
    PART_TIME_TWENTY_PLUS_HOURS("part_time_twenty_plus_hours"),
    
    VARIABLE("variable"),
    
    SEASONAL("seasonal");

    private String value;

    CurrentEmploymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentEmploymentStatusEnum fromValue(String value) {
      for (CurrentEmploymentStatusEnum b : CurrentEmploymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CurrentEmploymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentEmploymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentEmploymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentEmploymentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_EMPLOYMENT_STATUS = "current_employment_status";
  @SerializedName(SERIALIZED_NAME_CURRENT_EMPLOYMENT_STATUS)
  private CurrentEmploymentStatusEnum currentEmploymentStatus;

  public Employee() {
  }

  
  public Employee(
     String version, 
     String uuid, 
     String companyUuid, 
     String managerUuid, 
     String department, 
     Boolean terminated, 
     Boolean onboarded, 
     OnboardingStatusEnum onboardingStatus, 
     String dateOfBirth, 
     CurrentEmploymentStatusEnum currentEmploymentStatus
  ) {
    this();
    this.version = version;
    this.uuid = uuid;
    this.companyUuid = companyUuid;
    this.managerUuid = managerUuid;
    this.department = department;
    this.terminated = terminated;
    this.onboarded = onboarded;
    this.onboardingStatus = onboardingStatus;
    this.dateOfBirth = dateOfBirth;
    this.currentEmploymentStatus = currentEmploymentStatus;
  }

   /**
   * The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "414dedaca594b77135e0b8d2f398516d", value = "The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.")

  public String getVersion() {
    return version;
  }




   /**
   * The UUID of the employee in Gusto.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9779767c-6044-48e0-bf68-aeb370b9a2e7", value = "The UUID of the employee in Gusto.")

  public String getUuid() {
    return uuid;
  }




  public Employee firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Nicole", value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public Employee middleInitial(String middleInitial) {
    
    
    
    
    this.middleInitial = middleInitial;
    return this;
  }

   /**
   * Get middleInitial
   * @return middleInitial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "M", value = "")

  public String getMiddleInitial() {
    return middleInitial;
  }


  public void setMiddleInitial(String middleInitial) {
    
    
    
    this.middleInitial = middleInitial;
  }


  public Employee lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Boehm", value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public Employee email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "kory7757869450111548@barton-hermiston.io", value = "The email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


   /**
   * The UUID of the company the employee is employed by.
   * @return companyUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "c44d66dc-c41b-4a60-9e25-5e93ff8583f2", value = "The UUID of the company the employee is employed by.")

  public String getCompanyUuid() {
    return companyUuid;
  }




   /**
   * The UUID of the employee&#39;s manager.
   * @return managerUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5e53e257-c8d6-45aa-aa8a-ec99283a3acd", value = "The UUID of the employee's manager.")

  public String getManagerUuid() {
    return managerUuid;
  }




   /**
   * The employee&#39;s department in the company.
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The employee's department in the company.")

  public String getDepartment() {
    return department;
  }




   /**
   * Whether the employee is terminated.
   * @return terminated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the employee is terminated.")

  public Boolean getTerminated() {
    return terminated;
  }




  public Employee twoPercentShareholder(Boolean twoPercentShareholder) {
    
    
    
    
    this.twoPercentShareholder = twoPercentShareholder;
    return this;
  }

   /**
   * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
   * @return twoPercentShareholder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.")

  public Boolean getTwoPercentShareholder() {
    return twoPercentShareholder;
  }


  public void setTwoPercentShareholder(Boolean twoPercentShareholder) {
    
    
    
    this.twoPercentShareholder = twoPercentShareholder;
  }


   /**
   * Whether the employee has completed onboarding.
   * @return onboarded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the employee has completed onboarding.")

  public Boolean getOnboarded() {
    return onboarded;
  }




   /**
   * The current onboarding status of the employee
   * @return onboardingStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ONBOARDING_COMPLETED", value = "The current onboarding status of the employee")

  public OnboardingStatusEnum getOnboardingStatus() {
    return onboardingStatus;
  }




  public Employee jobs(List<Job> jobs) {
    
    
    
    
    this.jobs = jobs;
    return this;
  }

  public Employee addJobsItem(Job jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

   /**
   * Get jobs
   * @return jobs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Job> getJobs() {
    return jobs;
  }


  public void setJobs(List<Job> jobs) {
    
    
    
    this.jobs = jobs;
  }


  public Employee eligiblePaidTimeOff(List<PaidTimeOff> eligiblePaidTimeOff) {
    
    
    
    
    this.eligiblePaidTimeOff = eligiblePaidTimeOff;
    return this;
  }

  public Employee addEligiblePaidTimeOffItem(PaidTimeOff eligiblePaidTimeOffItem) {
    if (this.eligiblePaidTimeOff == null) {
      this.eligiblePaidTimeOff = new ArrayList<>();
    }
    this.eligiblePaidTimeOff.add(eligiblePaidTimeOffItem);
    return this;
  }

   /**
   * Get eligiblePaidTimeOff
   * @return eligiblePaidTimeOff
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PaidTimeOff> getEligiblePaidTimeOff() {
    return eligiblePaidTimeOff;
  }


  public void setEligiblePaidTimeOff(List<PaidTimeOff> eligiblePaidTimeOff) {
    
    
    
    this.eligiblePaidTimeOff = eligiblePaidTimeOff;
  }


  public Employee terminations(List<Termination> terminations) {
    
    
    
    
    this.terminations = terminations;
    return this;
  }

  public Employee addTerminationsItem(Termination terminationsItem) {
    if (this.terminations == null) {
      this.terminations = new ArrayList<>();
    }
    this.terminations.add(terminationsItem);
    return this;
  }

   /**
   * Get terminations
   * @return terminations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Termination> getTerminations() {
    return terminations;
  }


  public void setTerminations(List<Termination> terminations) {
    
    
    
    this.terminations = terminations;
  }


  public Employee garnishments(List<Garnishment> garnishments) {
    
    
    
    
    this.garnishments = garnishments;
    return this;
  }

  public Employee addGarnishmentsItem(Garnishment garnishmentsItem) {
    if (this.garnishments == null) {
      this.garnishments = new ArrayList<>();
    }
    this.garnishments.add(garnishmentsItem);
    return this;
  }

   /**
   * Get garnishments
   * @return garnishments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Garnishment> getGarnishments() {
    return garnishments;
  }


  public void setGarnishments(List<Garnishment> garnishments) {
    
    
    
    this.garnishments = garnishments;
  }


  public Employee customFields(List<EmployeeCustomField> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public Employee addCustomFieldsItem(EmployeeCustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Custom fields are only included for the employee if the include param has the custom_fields value set
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom fields are only included for the employee if the include param has the custom_fields value set")

  public List<EmployeeCustomField> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<EmployeeCustomField> customFields) {
    
    
    
    this.customFields = customFields;
  }


   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1996-05-08", value = "")

  public String getDateOfBirth() {
    return dateOfBirth;
  }




  public Employee hasSsn(Boolean hasSsn) {
    
    
    
    
    this.hasSsn = hasSsn;
    return this;
  }

   /**
   * Indicates whether the employee has an SSN in Gusto.
   * @return hasSsn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates whether the employee has an SSN in Gusto.")

  public Boolean getHasSsn() {
    return hasSsn;
  }


  public void setHasSsn(Boolean hasSsn) {
    
    
    
    this.hasSsn = hasSsn;
  }


  public Employee ssn(String ssn) {
    
    
    
    
    this.ssn = ssn;
    return this;
  }

   /**
   * Deprecated. This field always returns an empty string.
   * @return ssn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "Deprecated. This field always returns an empty string.")

  public String getSsn() {
    return ssn;
  }


  public void setSsn(String ssn) {
    
    
    
    this.ssn = ssn;
  }


  public Employee phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234567890", value = "")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public Employee preferredFirstName(String preferredFirstName) {
    
    
    
    
    this.preferredFirstName = preferredFirstName;
    return this;
  }

   /**
   * 
   * @return preferredFirstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vanessa", value = "")

  public String getPreferredFirstName() {
    return preferredFirstName;
  }


  public void setPreferredFirstName(String preferredFirstName) {
    
    
    
    this.preferredFirstName = preferredFirstName;
  }


  public Employee paymentMethod(PaymentMethodEnum paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * The employee&#39;s payment method
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CHECK", value = "The employee's payment method")

  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }


  public Employee workEmail(String workEmail) {
    
    
    
    
    this.workEmail = workEmail;
    return this;
  }

   /**
   * The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
   * @return workEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "vanessa.boehm@example.com", value = "The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).")

  public String getWorkEmail() {
    return workEmail;
  }


  public void setWorkEmail(String workEmail) {
    
    
    
    this.workEmail = workEmail;
  }


   /**
   * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
   * @return currentEmploymentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.")

  public CurrentEmploymentStatusEnum getCurrentEmploymentStatus() {
    return currentEmploymentStatus;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Employee instance itself
   */
  public Employee putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Employee employee = (Employee) o;
    return Objects.equals(this.version, employee.version) &&
        Objects.equals(this.uuid, employee.uuid) &&
        Objects.equals(this.firstName, employee.firstName) &&
        Objects.equals(this.middleInitial, employee.middleInitial) &&
        Objects.equals(this.lastName, employee.lastName) &&
        Objects.equals(this.email, employee.email) &&
        Objects.equals(this.companyUuid, employee.companyUuid) &&
        Objects.equals(this.managerUuid, employee.managerUuid) &&
        Objects.equals(this.department, employee.department) &&
        Objects.equals(this.terminated, employee.terminated) &&
        Objects.equals(this.twoPercentShareholder, employee.twoPercentShareholder) &&
        Objects.equals(this.onboarded, employee.onboarded) &&
        Objects.equals(this.onboardingStatus, employee.onboardingStatus) &&
        Objects.equals(this.jobs, employee.jobs) &&
        Objects.equals(this.eligiblePaidTimeOff, employee.eligiblePaidTimeOff) &&
        Objects.equals(this.terminations, employee.terminations) &&
        Objects.equals(this.garnishments, employee.garnishments) &&
        Objects.equals(this.customFields, employee.customFields) &&
        Objects.equals(this.dateOfBirth, employee.dateOfBirth) &&
        Objects.equals(this.hasSsn, employee.hasSsn) &&
        Objects.equals(this.ssn, employee.ssn) &&
        Objects.equals(this.phone, employee.phone) &&
        Objects.equals(this.preferredFirstName, employee.preferredFirstName) &&
        Objects.equals(this.paymentMethod, employee.paymentMethod) &&
        Objects.equals(this.workEmail, employee.workEmail) &&
        Objects.equals(this.currentEmploymentStatus, employee.currentEmploymentStatus)&&
        Objects.equals(this.additionalProperties, employee.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, uuid, firstName, middleInitial, lastName, email, companyUuid, managerUuid, department, terminated, twoPercentShareholder, onboarded, onboardingStatus, jobs, eligiblePaidTimeOff, terminations, garnishments, customFields, dateOfBirth, hasSsn, ssn, phone, preferredFirstName, paymentMethod, workEmail, currentEmploymentStatus, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Employee {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleInitial: ").append(toIndentedString(middleInitial)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    companyUuid: ").append(toIndentedString(companyUuid)).append("\n");
    sb.append("    managerUuid: ").append(toIndentedString(managerUuid)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    terminated: ").append(toIndentedString(terminated)).append("\n");
    sb.append("    twoPercentShareholder: ").append(toIndentedString(twoPercentShareholder)).append("\n");
    sb.append("    onboarded: ").append(toIndentedString(onboarded)).append("\n");
    sb.append("    onboardingStatus: ").append(toIndentedString(onboardingStatus)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    eligiblePaidTimeOff: ").append(toIndentedString(eligiblePaidTimeOff)).append("\n");
    sb.append("    terminations: ").append(toIndentedString(terminations)).append("\n");
    sb.append("    garnishments: ").append(toIndentedString(garnishments)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    hasSsn: ").append(toIndentedString(hasSsn)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    preferredFirstName: ").append(toIndentedString(preferredFirstName)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    workEmail: ").append(toIndentedString(workEmail)).append("\n");
    sb.append("    currentEmploymentStatus: ").append(toIndentedString(currentEmploymentStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("uuid");
    openapiFields.add("first_name");
    openapiFields.add("middle_initial");
    openapiFields.add("last_name");
    openapiFields.add("email");
    openapiFields.add("company_uuid");
    openapiFields.add("manager_uuid");
    openapiFields.add("department");
    openapiFields.add("terminated");
    openapiFields.add("two_percent_shareholder");
    openapiFields.add("onboarded");
    openapiFields.add("onboarding_status");
    openapiFields.add("jobs");
    openapiFields.add("eligible_paid_time_off");
    openapiFields.add("terminations");
    openapiFields.add("garnishments");
    openapiFields.add("custom_fields");
    openapiFields.add("date_of_birth");
    openapiFields.add("has_ssn");
    openapiFields.add("ssn");
    openapiFields.add("phone");
    openapiFields.add("preferred_first_name");
    openapiFields.add("payment_method");
    openapiFields.add("work_email");
    openapiFields.add("current_employment_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Employee
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Employee.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Employee is not found in the empty JSON string", Employee.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("middle_initial").isJsonNull() && (jsonObj.get("middle_initial") != null && !jsonObj.get("middle_initial").isJsonNull()) && !jsonObj.get("middle_initial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middle_initial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middle_initial").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (!jsonObj.get("email").isJsonNull() && (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("company_uuid") != null && !jsonObj.get("company_uuid").isJsonNull()) && !jsonObj.get("company_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_uuid").toString()));
      }
      if ((jsonObj.get("manager_uuid") != null && !jsonObj.get("manager_uuid").isJsonNull()) && !jsonObj.get("manager_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manager_uuid").toString()));
      }
      if (!jsonObj.get("department").isJsonNull() && (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("onboarding_status") != null && !jsonObj.get("onboarding_status").isJsonNull()) && !jsonObj.get("onboarding_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onboarding_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onboarding_status").toString()));
      }
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull()) {
        JsonArray jsonArrayjobs = jsonObj.getAsJsonArray("jobs");
        if (jsonArrayjobs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
          }

          // validate the optional field `jobs` (array)
          for (int i = 0; i < jsonArrayjobs.size(); i++) {
            Job.validateJsonObject(jsonArrayjobs.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("eligible_paid_time_off") != null && !jsonObj.get("eligible_paid_time_off").isJsonNull()) {
        JsonArray jsonArrayeligiblePaidTimeOff = jsonObj.getAsJsonArray("eligible_paid_time_off");
        if (jsonArrayeligiblePaidTimeOff != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eligible_paid_time_off").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eligible_paid_time_off` to be an array in the JSON string but got `%s`", jsonObj.get("eligible_paid_time_off").toString()));
          }

          // validate the optional field `eligible_paid_time_off` (array)
          for (int i = 0; i < jsonArrayeligiblePaidTimeOff.size(); i++) {
            PaidTimeOff.validateJsonObject(jsonArrayeligiblePaidTimeOff.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("terminations") != null && !jsonObj.get("terminations").isJsonNull()) {
        JsonArray jsonArrayterminations = jsonObj.getAsJsonArray("terminations");
        if (jsonArrayterminations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("terminations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `terminations` to be an array in the JSON string but got `%s`", jsonObj.get("terminations").toString()));
          }

          // validate the optional field `terminations` (array)
          for (int i = 0; i < jsonArrayterminations.size(); i++) {
            Termination.validateJsonObject(jsonArrayterminations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("garnishments") != null && !jsonObj.get("garnishments").isJsonNull()) {
        JsonArray jsonArraygarnishments = jsonObj.getAsJsonArray("garnishments");
        if (jsonArraygarnishments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("garnishments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `garnishments` to be an array in the JSON string but got `%s`", jsonObj.get("garnishments").toString()));
          }

          // validate the optional field `garnishments` (array)
          for (int i = 0; i < jsonArraygarnishments.size(); i++) {
            Garnishment.validateJsonObject(jsonArraygarnishments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            EmployeeCustomField.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("date_of_birth").isJsonNull() && (jsonObj.get("date_of_birth") != null && !jsonObj.get("date_of_birth").isJsonNull()) && !jsonObj.get("date_of_birth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_of_birth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_of_birth").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("preferred_first_name") != null && !jsonObj.get("preferred_first_name").isJsonNull()) && !jsonObj.get("preferred_first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_first_name").toString()));
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      if (!jsonObj.get("work_email").isJsonNull() && (jsonObj.get("work_email") != null && !jsonObj.get("work_email").isJsonNull()) && !jsonObj.get("work_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_email").toString()));
      }
      if (!jsonObj.get("current_employment_status").isJsonNull() && (jsonObj.get("current_employment_status") != null && !jsonObj.get("current_employment_status").isJsonNull()) && !jsonObj.get("current_employment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_employment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_employment_status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Employee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Employee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Employee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Employee.class));

       return (TypeAdapter<T>) new TypeAdapter<Employee>() {
           @Override
           public void write(JsonWriter out, Employee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Employee read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Employee instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Employee given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Employee
  * @throws IOException if the JSON string is invalid with respect to Employee
  */
  public static Employee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Employee.class);
  }

 /**
  * Convert an instance of Employee to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

