/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Compensation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The representation of a job in Gusto.
 */
@ApiModel(description = "The representation of a job in Gusto.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Job {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_EMPLOYEE_UUID = "employee_uuid";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_UUID)
  private String employeeUuid;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hire_date";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private String hireDate;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_PAYMENT_UNIT = "payment_unit";
  @SerializedName(SERIALIZED_NAME_PAYMENT_UNIT)
  private String paymentUnit;

  public static final String SERIALIZED_NAME_CURRENT_COMPENSATION_UUID = "current_compensation_uuid";
  @SerializedName(SERIALIZED_NAME_CURRENT_COMPENSATION_UUID)
  private String currentCompensationUuid;

  public static final String SERIALIZED_NAME_TWO_PERCENT_SHAREHOLDER = "two_percent_shareholder";
  @SerializedName(SERIALIZED_NAME_TWO_PERCENT_SHAREHOLDER)
  private Boolean twoPercentShareholder;

  public static final String SERIALIZED_NAME_STATE_WC_COVERED = "state_wc_covered";
  @SerializedName(SERIALIZED_NAME_STATE_WC_COVERED)
  private Boolean stateWcCovered;

  public static final String SERIALIZED_NAME_STATE_WC_CLASS_CODE = "state_wc_class_code";
  @SerializedName(SERIALIZED_NAME_STATE_WC_CLASS_CODE)
  private String stateWcClassCode;

  public static final String SERIALIZED_NAME_COMPENSATIONS = "compensations";
  @SerializedName(SERIALIZED_NAME_COMPENSATIONS)
  private List<Compensation> compensations = null;

  public Job() {
  }

  
  public Job(
     String uuid, 
     String employeeUuid, 
     Boolean primary, 
     String rate, 
     String paymentUnit, 
     String currentCompensationUuid, 
     List<Compensation> compensations
  ) {
    this();
    this.uuid = uuid;
    this.employeeUuid = employeeUuid;
    this.primary = primary;
    this.rate = rate;
    this.paymentUnit = paymentUnit;
    this.currentCompensationUuid = currentCompensationUuid;
    this.compensations = compensations;
  }

  public Job title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The title for the job.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The title for the job.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Job version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "d0e719137f89ca3dd334dd4cc248ffbb", value = "The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


   /**
   * The UUID of the job.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "d6d1035e-8a21-4e1d-89d5-fa894f9aff97", value = "The UUID of the job.")

  public String getUuid() {
    return uuid;
  }




   /**
   * The UUID of the employee to which the job belongs.
   * @return employeeUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "948daac8-4355-4ece-9e2a-229898accb22", value = "The UUID of the employee to which the job belongs.")

  public String getEmployeeUuid() {
    return employeeUuid;
  }




  public Job hireDate(String hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * The date when the employee was hired or rehired for the job.
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-20", value = "The date when the employee was hired or rehired for the job.")

  public String getHireDate() {
    return hireDate;
  }


  public void setHireDate(String hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


   /**
   * Whether this is the employee&#39;s primary job. The value will be set to true unless an existing job exists for the employee.
   * @return primary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether this is the employee's primary job. The value will be set to true unless an existing job exists for the employee.")

  public Boolean getPrimary() {
    return primary;
  }




   /**
   * The current compensation rate of the job.
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "78000.00", value = "The current compensation rate of the job.")

  public String getRate() {
    return rate;
  }




   /**
   * The payment unit of the current compensation for the job.
   * @return paymentUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Year", value = "The payment unit of the current compensation for the job.")

  public String getPaymentUnit() {
    return paymentUnit;
  }




   /**
   * The UUID of the current compensation of the job.
   * @return currentCompensationUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ea8b0b90-1112-4f9d-bb93-bf029bc8537a", value = "The UUID of the current compensation of the job.")

  public String getCurrentCompensationUuid() {
    return currentCompensationUuid;
  }




  public Job twoPercentShareholder(Boolean twoPercentShareholder) {
    
    
    
    
    this.twoPercentShareholder = twoPercentShareholder;
    return this;
  }

   /**
   * Whether the employee owns at least 2% of the company.
   * @return twoPercentShareholder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the employee owns at least 2% of the company.")

  public Boolean getTwoPercentShareholder() {
    return twoPercentShareholder;
  }


  public void setTwoPercentShareholder(Boolean twoPercentShareholder) {
    
    
    
    this.twoPercentShareholder = twoPercentShareholder;
  }


  public Job stateWcCovered(Boolean stateWcCovered) {
    
    
    
    
    this.stateWcCovered = stateWcCovered;
    return this;
  }

   /**
   * Whether this job is eligible for workers&#39; compensation coverage in the state of Washington (WA).
   * @return stateWcCovered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this job is eligible for workers' compensation coverage in the state of Washington (WA).")

  public Boolean getStateWcCovered() {
    return stateWcCovered;
  }


  public void setStateWcCovered(Boolean stateWcCovered) {
    
    
    
    this.stateWcCovered = stateWcCovered;
  }


  public Job stateWcClassCode(String stateWcClassCode) {
    
    
    
    
    this.stateWcClassCode = stateWcClassCode;
    return this;
  }

   /**
   * The risk class code for workers&#39; compensation in Washington state. Please visit [Washington state&#39;s Risk Class page](https://www.lni.wa.gov/insurance/rates-risk-classes/risk-classes-for-workers-compensation/risk-class-lookup#/) to learn more.
   * @return stateWcClassCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The risk class code for workers' compensation in Washington state. Please visit [Washington state's Risk Class page](https://www.lni.wa.gov/insurance/rates-risk-classes/risk-classes-for-workers-compensation/risk-class-lookup#/) to learn more.")

  public String getStateWcClassCode() {
    return stateWcClassCode;
  }


  public void setStateWcClassCode(String stateWcClassCode) {
    
    
    
    this.stateWcClassCode = stateWcClassCode;
  }


   /**
   * Get compensations
   * @return compensations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Compensation> getCompensations() {
    return compensations;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Job instance itself
   */
  public Job putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.title, job.title) &&
        Objects.equals(this.version, job.version) &&
        Objects.equals(this.uuid, job.uuid) &&
        Objects.equals(this.employeeUuid, job.employeeUuid) &&
        Objects.equals(this.hireDate, job.hireDate) &&
        Objects.equals(this.primary, job.primary) &&
        Objects.equals(this.rate, job.rate) &&
        Objects.equals(this.paymentUnit, job.paymentUnit) &&
        Objects.equals(this.currentCompensationUuid, job.currentCompensationUuid) &&
        Objects.equals(this.twoPercentShareholder, job.twoPercentShareholder) &&
        Objects.equals(this.stateWcCovered, job.stateWcCovered) &&
        Objects.equals(this.stateWcClassCode, job.stateWcClassCode) &&
        Objects.equals(this.compensations, job.compensations)&&
        Objects.equals(this.additionalProperties, job.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, version, uuid, employeeUuid, hireDate, primary, rate, paymentUnit, currentCompensationUuid, twoPercentShareholder, stateWcCovered, stateWcClassCode, compensations, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    employeeUuid: ").append(toIndentedString(employeeUuid)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    paymentUnit: ").append(toIndentedString(paymentUnit)).append("\n");
    sb.append("    currentCompensationUuid: ").append(toIndentedString(currentCompensationUuid)).append("\n");
    sb.append("    twoPercentShareholder: ").append(toIndentedString(twoPercentShareholder)).append("\n");
    sb.append("    stateWcCovered: ").append(toIndentedString(stateWcCovered)).append("\n");
    sb.append("    stateWcClassCode: ").append(toIndentedString(stateWcClassCode)).append("\n");
    sb.append("    compensations: ").append(toIndentedString(compensations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("version");
    openapiFields.add("uuid");
    openapiFields.add("employee_uuid");
    openapiFields.add("hire_date");
    openapiFields.add("primary");
    openapiFields.add("rate");
    openapiFields.add("payment_unit");
    openapiFields.add("current_compensation_uuid");
    openapiFields.add("two_percent_shareholder");
    openapiFields.add("state_wc_covered");
    openapiFields.add("state_wc_class_code");
    openapiFields.add("compensations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Job
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonNull() && (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("employee_uuid") != null && !jsonObj.get("employee_uuid").isJsonNull()) && !jsonObj.get("employee_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_uuid").toString()));
      }
      if ((jsonObj.get("hire_date") != null && !jsonObj.get("hire_date").isJsonNull()) && !jsonObj.get("hire_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hire_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hire_date").toString()));
      }
      if ((jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) && !jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
      if ((jsonObj.get("payment_unit") != null && !jsonObj.get("payment_unit").isJsonNull()) && !jsonObj.get("payment_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_unit").toString()));
      }
      if ((jsonObj.get("current_compensation_uuid") != null && !jsonObj.get("current_compensation_uuid").isJsonNull()) && !jsonObj.get("current_compensation_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_compensation_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_compensation_uuid").toString()));
      }
      if ((jsonObj.get("state_wc_class_code") != null && !jsonObj.get("state_wc_class_code").isJsonNull()) && !jsonObj.get("state_wc_class_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_wc_class_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_wc_class_code").toString()));
      }
      if (jsonObj.get("compensations") != null && !jsonObj.get("compensations").isJsonNull()) {
        JsonArray jsonArraycompensations = jsonObj.getAsJsonArray("compensations");
        if (jsonArraycompensations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compensations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compensations` to be an array in the JSON string but got `%s`", jsonObj.get("compensations").toString()));
          }

          // validate the optional field `compensations` (array)
          for (int i = 0; i < jsonArraycompensations.size(); i++) {
            Compensation.validateJsonObject(jsonArraycompensations.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Job instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Job given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Job
  * @throws IOException if the JSON string is invalid with respect to Job
  */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

 /**
  * Convert an instance of Job to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

