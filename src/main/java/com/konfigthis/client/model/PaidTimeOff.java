/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The representation of paid time off in Gusto.
 */
@ApiModel(description = "The representation of paid time off in Gusto.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaidTimeOff {
  /**
   * The name of the paid time off type.
   */
  @JsonAdapter(NameEnum.Adapter.class)
 public enum NameEnum {
    VACATION_HOURS("Vacation Hours"),
    
    SICK_HOURS("Sick Hours"),
    
    HOLIDAY_HOURS("Holiday Hours");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policy_name";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_POLICY_UUID = "policy_uuid";
  @SerializedName(SERIALIZED_NAME_POLICY_UUID)
  private String policyUuid;

  public static final String SERIALIZED_NAME_ACCRUAL_UNIT = "accrual_unit";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_UNIT)
  private String accrualUnit;

  public static final String SERIALIZED_NAME_ACCRUAL_RATE = "accrual_rate";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_RATE)
  private String accrualRate;

  public static final String SERIALIZED_NAME_ACCRUAL_METHOD = "accrual_method";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_METHOD)
  private String accrualMethod;

  public static final String SERIALIZED_NAME_ACCRUAL_PERIOD = "accrual_period";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_PERIOD)
  private String accrualPeriod;

  public static final String SERIALIZED_NAME_ACCRUAL_BALANCE = "accrual_balance";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_BALANCE)
  private String accrualBalance;

  public static final String SERIALIZED_NAME_MAXIMUM_ACCRUAL_BALANCE = "maximum_accrual_balance";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_ACCRUAL_BALANCE)
  private String maximumAccrualBalance;

  public static final String SERIALIZED_NAME_PAID_AT_TERMINATION = "paid_at_termination";
  @SerializedName(SERIALIZED_NAME_PAID_AT_TERMINATION)
  private Boolean paidAtTermination;

  public PaidTimeOff() {
  }

  
  public PaidTimeOff(
     NameEnum name, 
     String policyName, 
     String policyUuid, 
     String accrualUnit, 
     String accrualRate, 
     String accrualMethod, 
     String accrualPeriod, 
     String accrualBalance, 
     String maximumAccrualBalance, 
     Boolean paidAtTermination
  ) {
    this();
    this.name = name;
    this.policyName = policyName;
    this.policyUuid = policyUuid;
    this.accrualUnit = accrualUnit;
    this.accrualRate = accrualRate;
    this.accrualMethod = accrualMethod;
    this.accrualPeriod = accrualPeriod;
    this.accrualBalance = accrualBalance;
    this.maximumAccrualBalance = maximumAccrualBalance;
    this.paidAtTermination = paidAtTermination;
  }

   /**
   * The name of the paid time off type.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SICK_HOURS", value = "The name of the paid time off type.")

  public NameEnum getName() {
    return name;
  }




   /**
   * The name of the time off policy.
   * @return policyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sick Policy", value = "The name of the time off policy.")

  public String getPolicyName() {
    return policyName;
  }




   /**
   * The UUID of the time off policy.
   * @return policyUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8dc8f324-3c03-4b42-8602-02476fa21c1b", value = "The UUID of the time off policy.")

  public String getPolicyUuid() {
    return policyUuid;
  }




   /**
   * The unit the PTO type is accrued in.
   * @return accrualUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hour", value = "The unit the PTO type is accrued in.")

  public String getAccrualUnit() {
    return accrualUnit;
  }




   /**
   * The number of accrual units accrued per accrual period.
   * @return accrualRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "208.0", value = "The number of accrual units accrued per accrual period.")

  public String getAccrualRate() {
    return accrualRate;
  }




   /**
   * The accrual method of the time off policy
   * @return accrualMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "unlimited", value = "The accrual method of the time off policy")

  public String getAccrualMethod() {
    return accrualMethod;
  }




   /**
   * The frequency at which the PTO type is accrued.
   * @return accrualPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Year", value = "The frequency at which the PTO type is accrued.")

  public String getAccrualPeriod() {
    return accrualPeriod;
  }




   /**
   * The number of accrual units accrued.
   * @return accrualBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "64.0", value = "The number of accrual units accrued.")

  public String getAccrualBalance() {
    return accrualBalance;
  }




   /**
   * The maximum number of accrual units allowed. A null value signifies no maximum.
   * @return maximumAccrualBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "240.0", value = "The maximum number of accrual units allowed. A null value signifies no maximum.")

  public String getMaximumAccrualBalance() {
    return maximumAccrualBalance;
  }




   /**
   * Whether the accrual balance is paid to the employee upon termination.
   * @return paidAtTermination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the accrual balance is paid to the employee upon termination.")

  public Boolean getPaidAtTermination() {
    return paidAtTermination;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaidTimeOff instance itself
   */
  public PaidTimeOff putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaidTimeOff paidTimeOff = (PaidTimeOff) o;
    return Objects.equals(this.name, paidTimeOff.name) &&
        Objects.equals(this.policyName, paidTimeOff.policyName) &&
        Objects.equals(this.policyUuid, paidTimeOff.policyUuid) &&
        Objects.equals(this.accrualUnit, paidTimeOff.accrualUnit) &&
        Objects.equals(this.accrualRate, paidTimeOff.accrualRate) &&
        Objects.equals(this.accrualMethod, paidTimeOff.accrualMethod) &&
        Objects.equals(this.accrualPeriod, paidTimeOff.accrualPeriod) &&
        Objects.equals(this.accrualBalance, paidTimeOff.accrualBalance) &&
        Objects.equals(this.maximumAccrualBalance, paidTimeOff.maximumAccrualBalance) &&
        Objects.equals(this.paidAtTermination, paidTimeOff.paidAtTermination)&&
        Objects.equals(this.additionalProperties, paidTimeOff.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, policyName, policyUuid, accrualUnit, accrualRate, accrualMethod, accrualPeriod, accrualBalance, maximumAccrualBalance, paidAtTermination, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaidTimeOff {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyUuid: ").append(toIndentedString(policyUuid)).append("\n");
    sb.append("    accrualUnit: ").append(toIndentedString(accrualUnit)).append("\n");
    sb.append("    accrualRate: ").append(toIndentedString(accrualRate)).append("\n");
    sb.append("    accrualMethod: ").append(toIndentedString(accrualMethod)).append("\n");
    sb.append("    accrualPeriod: ").append(toIndentedString(accrualPeriod)).append("\n");
    sb.append("    accrualBalance: ").append(toIndentedString(accrualBalance)).append("\n");
    sb.append("    maximumAccrualBalance: ").append(toIndentedString(maximumAccrualBalance)).append("\n");
    sb.append("    paidAtTermination: ").append(toIndentedString(paidAtTermination)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("policy_name");
    openapiFields.add("policy_uuid");
    openapiFields.add("accrual_unit");
    openapiFields.add("accrual_rate");
    openapiFields.add("accrual_method");
    openapiFields.add("accrual_period");
    openapiFields.add("accrual_balance");
    openapiFields.add("maximum_accrual_balance");
    openapiFields.add("paid_at_termination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaidTimeOff
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaidTimeOff.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaidTimeOff is not found in the empty JSON string", PaidTimeOff.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("policy_name") != null && !jsonObj.get("policy_name").isJsonNull()) && !jsonObj.get("policy_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_name").toString()));
      }
      if ((jsonObj.get("policy_uuid") != null && !jsonObj.get("policy_uuid").isJsonNull()) && !jsonObj.get("policy_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_uuid").toString()));
      }
      if ((jsonObj.get("accrual_unit") != null && !jsonObj.get("accrual_unit").isJsonNull()) && !jsonObj.get("accrual_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrual_unit").toString()));
      }
      if ((jsonObj.get("accrual_rate") != null && !jsonObj.get("accrual_rate").isJsonNull()) && !jsonObj.get("accrual_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrual_rate").toString()));
      }
      if ((jsonObj.get("accrual_method") != null && !jsonObj.get("accrual_method").isJsonNull()) && !jsonObj.get("accrual_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrual_method").toString()));
      }
      if ((jsonObj.get("accrual_period") != null && !jsonObj.get("accrual_period").isJsonNull()) && !jsonObj.get("accrual_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrual_period").toString()));
      }
      if ((jsonObj.get("accrual_balance") != null && !jsonObj.get("accrual_balance").isJsonNull()) && !jsonObj.get("accrual_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrual_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrual_balance").toString()));
      }
      if (!jsonObj.get("maximum_accrual_balance").isJsonNull() && (jsonObj.get("maximum_accrual_balance") != null && !jsonObj.get("maximum_accrual_balance").isJsonNull()) && !jsonObj.get("maximum_accrual_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximum_accrual_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximum_accrual_balance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaidTimeOff.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaidTimeOff' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaidTimeOff> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaidTimeOff.class));

       return (TypeAdapter<T>) new TypeAdapter<PaidTimeOff>() {
           @Override
           public void write(JsonWriter out, PaidTimeOff value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaidTimeOff read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaidTimeOff instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaidTimeOff given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaidTimeOff
  * @throws IOException if the JSON string is invalid with respect to PaidTimeOff
  */
  public static PaidTimeOff fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaidTimeOff.class);
  }

 /**
  * Convert an instance of PaidTimeOff to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

