/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.HolidayPayPolicyFederalHolidaysInner;
import com.konfigthis.client.model.TimeOffPolicyEmployeesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Representation of a Holiday Pay Policy
 */
@ApiModel(description = "Representation of a Holiday Pay Policy")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class HolidayPayPolicy {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_COMPANY_UUID = "company_uuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_UUID)
  private String companyUuid;

  public static final String SERIALIZED_NAME_FEDERAL_HOLIDAYS = "federal_holidays";
  @SerializedName(SERIALIZED_NAME_FEDERAL_HOLIDAYS)
  private List<HolidayPayPolicyFederalHolidaysInner> federalHolidays = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMPLOYEES = "employees";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES)
  private List<TimeOffPolicyEmployeesInner> employees = new ArrayList<>();

  public HolidayPayPolicy() {
  }

  public HolidayPayPolicy version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1b37938b017c7fd7116bada007072290", required = true, value = "The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public HolidayPayPolicy companyUuid(String companyUuid) {
    
    
    
    
    this.companyUuid = companyUuid;
    return this;
  }

   /**
   * A unique identifier for the company owning the holiday pay policy
   * @return companyUuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "b7845189-f12b-4378-918a-d2b9de3dc4ea", required = true, value = "A unique identifier for the company owning the holiday pay policy")

  public String getCompanyUuid() {
    return companyUuid;
  }


  public void setCompanyUuid(String companyUuid) {
    
    
    
    this.companyUuid = companyUuid;
  }


  public HolidayPayPolicy federalHolidays(List<HolidayPayPolicyFederalHolidaysInner> federalHolidays) {
    
    
    
    
    this.federalHolidays = federalHolidays;
    return this;
  }

  public HolidayPayPolicy addFederalHolidaysItem(HolidayPayPolicyFederalHolidaysInner federalHolidaysItem) {
    this.federalHolidays.add(federalHolidaysItem);
    return this;
  }

   /**
   * List of the eleven supported federal holidays and their details
   * @return federalHolidays
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of the eleven supported federal holidays and their details")

  public List<HolidayPayPolicyFederalHolidaysInner> getFederalHolidays() {
    return federalHolidays;
  }


  public void setFederalHolidays(List<HolidayPayPolicyFederalHolidaysInner> federalHolidays) {
    
    
    
    this.federalHolidays = federalHolidays;
  }


  public HolidayPayPolicy employees(List<TimeOffPolicyEmployeesInner> employees) {
    
    
    
    
    this.employees = employees;
    return this;
  }

  public HolidayPayPolicy addEmployeesItem(TimeOffPolicyEmployeesInner employeesItem) {
    this.employees.add(employeesItem);
    return this;
  }

   /**
   * List of employee uuids under a time off policy
   * @return employees
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of employee uuids under a time off policy")

  public List<TimeOffPolicyEmployeesInner> getEmployees() {
    return employees;
  }


  public void setEmployees(List<TimeOffPolicyEmployeesInner> employees) {
    
    
    
    this.employees = employees;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the HolidayPayPolicy instance itself
   */
  public HolidayPayPolicy putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HolidayPayPolicy holidayPayPolicy = (HolidayPayPolicy) o;
    return Objects.equals(this.version, holidayPayPolicy.version) &&
        Objects.equals(this.companyUuid, holidayPayPolicy.companyUuid) &&
        Objects.equals(this.federalHolidays, holidayPayPolicy.federalHolidays) &&
        Objects.equals(this.employees, holidayPayPolicy.employees)&&
        Objects.equals(this.additionalProperties, holidayPayPolicy.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, companyUuid, federalHolidays, employees, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HolidayPayPolicy {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    companyUuid: ").append(toIndentedString(companyUuid)).append("\n");
    sb.append("    federalHolidays: ").append(toIndentedString(federalHolidays)).append("\n");
    sb.append("    employees: ").append(toIndentedString(employees)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("company_uuid");
    openapiFields.add("federal_holidays");
    openapiFields.add("employees");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("company_uuid");
    openapiRequiredFields.add("federal_holidays");
    openapiRequiredFields.add("employees");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HolidayPayPolicy
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HolidayPayPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HolidayPayPolicy is not found in the empty JSON string", HolidayPayPolicy.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HolidayPayPolicy.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("company_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_uuid").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("federal_holidays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `federal_holidays` to be an array in the JSON string but got `%s`", jsonObj.get("federal_holidays").toString()));
      }

      JsonArray jsonArrayfederalHolidays = jsonObj.getAsJsonArray("federal_holidays");
      // validate the required field `federal_holidays` (array)
      for (int i = 0; i < jsonArrayfederalHolidays.size(); i++) {
        HolidayPayPolicyFederalHolidaysInner.validateJsonObject(jsonArrayfederalHolidays.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("employees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `employees` to be an array in the JSON string but got `%s`", jsonObj.get("employees").toString()));
      }

      JsonArray jsonArrayemployees = jsonObj.getAsJsonArray("employees");
      // validate the required field `employees` (array)
      for (int i = 0; i < jsonArrayemployees.size(); i++) {
        TimeOffPolicyEmployeesInner.validateJsonObject(jsonArrayemployees.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HolidayPayPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HolidayPayPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HolidayPayPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HolidayPayPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<HolidayPayPolicy>() {
           @Override
           public void write(JsonWriter out, HolidayPayPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public HolidayPayPolicy read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             HolidayPayPolicy instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HolidayPayPolicy given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HolidayPayPolicy
  * @throws IOException if the JSON string is invalid with respect to HolidayPayPolicy
  */
  public static HolidayPayPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HolidayPayPolicy.class);
  }

 /**
  * Convert an instance of HolidayPayPolicy to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

