/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The subtotals for the payroll.
 */
@ApiModel(description = "The subtotals for the payroll.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollTotalsType {
  public static final String SERIALIZED_NAME_COMPANY_DEBIT = "company_debit";
  @SerializedName(SERIALIZED_NAME_COMPANY_DEBIT)
  private String companyDebit;

  public static final String SERIALIZED_NAME_NET_PAY_DEBIT = "net_pay_debit";
  @SerializedName(SERIALIZED_NAME_NET_PAY_DEBIT)
  private String netPayDebit;

  public static final String SERIALIZED_NAME_TAX_DEBIT = "tax_debit";
  @SerializedName(SERIALIZED_NAME_TAX_DEBIT)
  private String taxDebit;

  public static final String SERIALIZED_NAME_REIMBURSEMENT_DEBIT = "reimbursement_debit";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_DEBIT)
  private String reimbursementDebit;

  public static final String SERIALIZED_NAME_CHILD_SUPPORT_DEBIT = "child_support_debit";
  @SerializedName(SERIALIZED_NAME_CHILD_SUPPORT_DEBIT)
  private String childSupportDebit;

  public static final String SERIALIZED_NAME_REIMBURSEMENTS = "reimbursements";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENTS)
  private String reimbursements;

  public static final String SERIALIZED_NAME_NET_PAY = "net_pay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private String netPay;

  public static final String SERIALIZED_NAME_GROSS_PAY = "gross_pay";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY)
  private String grossPay;

  public static final String SERIALIZED_NAME_EMPLOYEE_BONUSES = "employee_bonuses";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_BONUSES)
  private String employeeBonuses;

  public static final String SERIALIZED_NAME_EMPLOYEE_COMMISSIONS = "employee_commissions";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_COMMISSIONS)
  private String employeeCommissions;

  public static final String SERIALIZED_NAME_EMPLOYEE_CASH_TIPS = "employee_cash_tips";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_CASH_TIPS)
  private String employeeCashTips;

  public static final String SERIALIZED_NAME_EMPLOYEE_PAYCHECK_TIPS = "employee_paycheck_tips";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_PAYCHECK_TIPS)
  private String employeePaycheckTips;

  public static final String SERIALIZED_NAME_ADDITIONAL_EARNINGS = "additional_earnings";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EARNINGS)
  private String additionalEarnings;

  public static final String SERIALIZED_NAME_OWNERS_DRAW = "owners_draw";
  @SerializedName(SERIALIZED_NAME_OWNERS_DRAW)
  private String ownersDraw;

  public static final String SERIALIZED_NAME_CHECK_AMOUNT = "check_amount";
  @SerializedName(SERIALIZED_NAME_CHECK_AMOUNT)
  private String checkAmount;

  public static final String SERIALIZED_NAME_EMPLOYER_TAXES = "employer_taxes";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_TAXES)
  private String employerTaxes;

  public static final String SERIALIZED_NAME_EMPLOYEE_TAXES = "employee_taxes";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_TAXES)
  private String employeeTaxes;

  public static final String SERIALIZED_NAME_BENEFITS = "benefits";
  @SerializedName(SERIALIZED_NAME_BENEFITS)
  private String benefits;

  public static final String SERIALIZED_NAME_EMPLOYEE_BENEFITS_DEDUCTIONS = "employee_benefits_deductions";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_BENEFITS_DEDUCTIONS)
  private String employeeBenefitsDeductions;

  public static final String SERIALIZED_NAME_DEFERRED_PAYROLL_TAXES = "deferred_payroll_taxes";
  @SerializedName(SERIALIZED_NAME_DEFERRED_PAYROLL_TAXES)
  private String deferredPayrollTaxes;

  public PayrollTotalsType() {
  }

  
  public PayrollTotalsType(
     String companyDebit, 
     String taxDebit, 
     String reimbursementDebit, 
     String childSupportDebit, 
     String reimbursements, 
     String netPay, 
     String grossPay, 
     String employeeBonuses, 
     String employeeCommissions, 
     String employeeCashTips, 
     String employeePaycheckTips, 
     String additionalEarnings, 
     String ownersDraw, 
     String checkAmount, 
     String employerTaxes, 
     String employeeTaxes, 
     String benefits, 
     String employeeBenefitsDeductions, 
     String deferredPayrollTaxes
  ) {
    this();
    this.companyDebit = companyDebit;
    this.taxDebit = taxDebit;
    this.reimbursementDebit = reimbursementDebit;
    this.childSupportDebit = childSupportDebit;
    this.reimbursements = reimbursements;
    this.netPay = netPay;
    this.grossPay = grossPay;
    this.employeeBonuses = employeeBonuses;
    this.employeeCommissions = employeeCommissions;
    this.employeeCashTips = employeeCashTips;
    this.employeePaycheckTips = employeePaycheckTips;
    this.additionalEarnings = additionalEarnings;
    this.ownersDraw = ownersDraw;
    this.checkAmount = checkAmount;
    this.employerTaxes = employerTaxes;
    this.employeeTaxes = employeeTaxes;
    this.benefits = benefits;
    this.employeeBenefitsDeductions = employeeBenefitsDeductions;
    this.deferredPayrollTaxes = deferredPayrollTaxes;
  }

   /**
   * The total company debit for the payroll.
   * @return companyDebit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total company debit for the payroll.")

  public String getCompanyDebit() {
    return companyDebit;
  }




  public PayrollTotalsType netPayDebit(String netPayDebit) {
    
    
    if (netPayDebit != null && netPayDebit.length() < 1) {
      throw new IllegalArgumentException("Invalid value for netPayDebit. Length must be greater than or equal to 1.");
    }
    
    this.netPayDebit = netPayDebit;
    return this;
  }

   /**
   * The total company net pay for the payroll.
   * @return netPayDebit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total company net pay for the payroll.")

  public String getNetPayDebit() {
    return netPayDebit;
  }


  public void setNetPayDebit(String netPayDebit) {
    
    
    if (netPayDebit != null && netPayDebit.length() < 1) {
      throw new IllegalArgumentException("Invalid value for netPayDebit. Length must be greater than or equal to 1.");
    }
    this.netPayDebit = netPayDebit;
  }


   /**
   * The total tax debit for the payroll.
   * @return taxDebit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total tax debit for the payroll.")

  public String getTaxDebit() {
    return taxDebit;
  }




   /**
   * The total reimbursement debit for the payroll.
   * @return reimbursementDebit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total reimbursement debit for the payroll.")

  public String getReimbursementDebit() {
    return reimbursementDebit;
  }




   /**
   * The total child support debit for the payroll.
   * @return childSupportDebit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total child support debit for the payroll.")

  public String getChildSupportDebit() {
    return childSupportDebit;
  }




   /**
   * The total reimbursements for the payroll.
   * @return reimbursements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total reimbursements for the payroll.")

  public String getReimbursements() {
    return reimbursements;
  }




   /**
   * The net pay amount for the payroll.
   * @return netPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The net pay amount for the payroll.")

  public String getNetPay() {
    return netPay;
  }




   /**
   * The gross pay amount for the payroll.
   * @return grossPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The gross pay amount for the payroll.")

  public String getGrossPay() {
    return grossPay;
  }




   /**
   * The total employee bonuses amount for the payroll.
   * @return employeeBonuses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total employee bonuses amount for the payroll.")

  public String getEmployeeBonuses() {
    return employeeBonuses;
  }




   /**
   * The total employee commissions amount for the payroll.
   * @return employeeCommissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total employee commissions amount for the payroll.")

  public String getEmployeeCommissions() {
    return employeeCommissions;
  }




   /**
   * The total employee cash tips amount for the payroll.
   * @return employeeCashTips
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total employee cash tips amount for the payroll.")

  public String getEmployeeCashTips() {
    return employeeCashTips;
  }




   /**
   * The total employee paycheck tips amount for the payroll.
   * @return employeePaycheckTips
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total employee paycheck tips amount for the payroll.")

  public String getEmployeePaycheckTips() {
    return employeePaycheckTips;
  }




   /**
   * The total additional earnings amount for the payroll.
   * @return additionalEarnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total additional earnings amount for the payroll.")

  public String getAdditionalEarnings() {
    return additionalEarnings;
  }




   /**
   * The total owner&#39;s draw for the payroll.
   * @return ownersDraw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total owner's draw for the payroll.")

  public String getOwnersDraw() {
    return ownersDraw;
  }




   /**
   * The total check amount for the payroll.
   * @return checkAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total check amount for the payroll.")

  public String getCheckAmount() {
    return checkAmount;
  }




   /**
   * The total amount of employer paid taxes for the payroll.
   * @return employerTaxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of employer paid taxes for the payroll.")

  public String getEmployerTaxes() {
    return employerTaxes;
  }




   /**
   * The total amount of employee paid taxes for the payroll.
   * @return employeeTaxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of employee paid taxes for the payroll.")

  public String getEmployeeTaxes() {
    return employeeTaxes;
  }




   /**
   * The total amount of company contributed benefits for the payroll.
   * @return benefits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of company contributed benefits for the payroll.")

  public String getBenefits() {
    return benefits;
  }




   /**
   * The total amount of employee deducted benefits for the payroll.
   * @return employeeBenefitsDeductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of employee deducted benefits for the payroll.")

  public String getEmployeeBenefitsDeductions() {
    return employeeBenefitsDeductions;
  }




   /**
   * The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.
   * @return deferredPayrollTaxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.")

  public String getDeferredPayrollTaxes() {
    return deferredPayrollTaxes;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollTotalsType instance itself
   */
  public PayrollTotalsType putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollTotalsType payrollTotalsType = (PayrollTotalsType) o;
    return Objects.equals(this.companyDebit, payrollTotalsType.companyDebit) &&
        Objects.equals(this.netPayDebit, payrollTotalsType.netPayDebit) &&
        Objects.equals(this.taxDebit, payrollTotalsType.taxDebit) &&
        Objects.equals(this.reimbursementDebit, payrollTotalsType.reimbursementDebit) &&
        Objects.equals(this.childSupportDebit, payrollTotalsType.childSupportDebit) &&
        Objects.equals(this.reimbursements, payrollTotalsType.reimbursements) &&
        Objects.equals(this.netPay, payrollTotalsType.netPay) &&
        Objects.equals(this.grossPay, payrollTotalsType.grossPay) &&
        Objects.equals(this.employeeBonuses, payrollTotalsType.employeeBonuses) &&
        Objects.equals(this.employeeCommissions, payrollTotalsType.employeeCommissions) &&
        Objects.equals(this.employeeCashTips, payrollTotalsType.employeeCashTips) &&
        Objects.equals(this.employeePaycheckTips, payrollTotalsType.employeePaycheckTips) &&
        Objects.equals(this.additionalEarnings, payrollTotalsType.additionalEarnings) &&
        Objects.equals(this.ownersDraw, payrollTotalsType.ownersDraw) &&
        Objects.equals(this.checkAmount, payrollTotalsType.checkAmount) &&
        Objects.equals(this.employerTaxes, payrollTotalsType.employerTaxes) &&
        Objects.equals(this.employeeTaxes, payrollTotalsType.employeeTaxes) &&
        Objects.equals(this.benefits, payrollTotalsType.benefits) &&
        Objects.equals(this.employeeBenefitsDeductions, payrollTotalsType.employeeBenefitsDeductions) &&
        Objects.equals(this.deferredPayrollTaxes, payrollTotalsType.deferredPayrollTaxes)&&
        Objects.equals(this.additionalProperties, payrollTotalsType.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyDebit, netPayDebit, taxDebit, reimbursementDebit, childSupportDebit, reimbursements, netPay, grossPay, employeeBonuses, employeeCommissions, employeeCashTips, employeePaycheckTips, additionalEarnings, ownersDraw, checkAmount, employerTaxes, employeeTaxes, benefits, employeeBenefitsDeductions, deferredPayrollTaxes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollTotalsType {\n");
    sb.append("    companyDebit: ").append(toIndentedString(companyDebit)).append("\n");
    sb.append("    netPayDebit: ").append(toIndentedString(netPayDebit)).append("\n");
    sb.append("    taxDebit: ").append(toIndentedString(taxDebit)).append("\n");
    sb.append("    reimbursementDebit: ").append(toIndentedString(reimbursementDebit)).append("\n");
    sb.append("    childSupportDebit: ").append(toIndentedString(childSupportDebit)).append("\n");
    sb.append("    reimbursements: ").append(toIndentedString(reimbursements)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    grossPay: ").append(toIndentedString(grossPay)).append("\n");
    sb.append("    employeeBonuses: ").append(toIndentedString(employeeBonuses)).append("\n");
    sb.append("    employeeCommissions: ").append(toIndentedString(employeeCommissions)).append("\n");
    sb.append("    employeeCashTips: ").append(toIndentedString(employeeCashTips)).append("\n");
    sb.append("    employeePaycheckTips: ").append(toIndentedString(employeePaycheckTips)).append("\n");
    sb.append("    additionalEarnings: ").append(toIndentedString(additionalEarnings)).append("\n");
    sb.append("    ownersDraw: ").append(toIndentedString(ownersDraw)).append("\n");
    sb.append("    checkAmount: ").append(toIndentedString(checkAmount)).append("\n");
    sb.append("    employerTaxes: ").append(toIndentedString(employerTaxes)).append("\n");
    sb.append("    employeeTaxes: ").append(toIndentedString(employeeTaxes)).append("\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    employeeBenefitsDeductions: ").append(toIndentedString(employeeBenefitsDeductions)).append("\n");
    sb.append("    deferredPayrollTaxes: ").append(toIndentedString(deferredPayrollTaxes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("company_debit");
    openapiFields.add("net_pay_debit");
    openapiFields.add("tax_debit");
    openapiFields.add("reimbursement_debit");
    openapiFields.add("child_support_debit");
    openapiFields.add("reimbursements");
    openapiFields.add("net_pay");
    openapiFields.add("gross_pay");
    openapiFields.add("employee_bonuses");
    openapiFields.add("employee_commissions");
    openapiFields.add("employee_cash_tips");
    openapiFields.add("employee_paycheck_tips");
    openapiFields.add("additional_earnings");
    openapiFields.add("owners_draw");
    openapiFields.add("check_amount");
    openapiFields.add("employer_taxes");
    openapiFields.add("employee_taxes");
    openapiFields.add("benefits");
    openapiFields.add("employee_benefits_deductions");
    openapiFields.add("deferred_payroll_taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollTotalsType
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollTotalsType.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollTotalsType is not found in the empty JSON string", PayrollTotalsType.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("company_debit") != null && !jsonObj.get("company_debit").isJsonNull()) && !jsonObj.get("company_debit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_debit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_debit").toString()));
      }
      if ((jsonObj.get("net_pay_debit") != null && !jsonObj.get("net_pay_debit").isJsonNull()) && !jsonObj.get("net_pay_debit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_pay_debit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_pay_debit").toString()));
      }
      if ((jsonObj.get("tax_debit") != null && !jsonObj.get("tax_debit").isJsonNull()) && !jsonObj.get("tax_debit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_debit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_debit").toString()));
      }
      if ((jsonObj.get("reimbursement_debit") != null && !jsonObj.get("reimbursement_debit").isJsonNull()) && !jsonObj.get("reimbursement_debit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reimbursement_debit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reimbursement_debit").toString()));
      }
      if ((jsonObj.get("child_support_debit") != null && !jsonObj.get("child_support_debit").isJsonNull()) && !jsonObj.get("child_support_debit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `child_support_debit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("child_support_debit").toString()));
      }
      if ((jsonObj.get("reimbursements") != null && !jsonObj.get("reimbursements").isJsonNull()) && !jsonObj.get("reimbursements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reimbursements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reimbursements").toString()));
      }
      if ((jsonObj.get("net_pay") != null && !jsonObj.get("net_pay").isJsonNull()) && !jsonObj.get("net_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_pay").toString()));
      }
      if ((jsonObj.get("gross_pay") != null && !jsonObj.get("gross_pay").isJsonNull()) && !jsonObj.get("gross_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gross_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gross_pay").toString()));
      }
      if ((jsonObj.get("employee_bonuses") != null && !jsonObj.get("employee_bonuses").isJsonNull()) && !jsonObj.get("employee_bonuses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_bonuses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_bonuses").toString()));
      }
      if ((jsonObj.get("employee_commissions") != null && !jsonObj.get("employee_commissions").isJsonNull()) && !jsonObj.get("employee_commissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_commissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_commissions").toString()));
      }
      if ((jsonObj.get("employee_cash_tips") != null && !jsonObj.get("employee_cash_tips").isJsonNull()) && !jsonObj.get("employee_cash_tips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_cash_tips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_cash_tips").toString()));
      }
      if ((jsonObj.get("employee_paycheck_tips") != null && !jsonObj.get("employee_paycheck_tips").isJsonNull()) && !jsonObj.get("employee_paycheck_tips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_paycheck_tips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_paycheck_tips").toString()));
      }
      if ((jsonObj.get("additional_earnings") != null && !jsonObj.get("additional_earnings").isJsonNull()) && !jsonObj.get("additional_earnings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_earnings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_earnings").toString()));
      }
      if ((jsonObj.get("owners_draw") != null && !jsonObj.get("owners_draw").isJsonNull()) && !jsonObj.get("owners_draw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owners_draw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owners_draw").toString()));
      }
      if ((jsonObj.get("check_amount") != null && !jsonObj.get("check_amount").isJsonNull()) && !jsonObj.get("check_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_amount").toString()));
      }
      if ((jsonObj.get("employer_taxes") != null && !jsonObj.get("employer_taxes").isJsonNull()) && !jsonObj.get("employer_taxes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_taxes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_taxes").toString()));
      }
      if ((jsonObj.get("employee_taxes") != null && !jsonObj.get("employee_taxes").isJsonNull()) && !jsonObj.get("employee_taxes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_taxes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_taxes").toString()));
      }
      if ((jsonObj.get("benefits") != null && !jsonObj.get("benefits").isJsonNull()) && !jsonObj.get("benefits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefits").toString()));
      }
      if ((jsonObj.get("employee_benefits_deductions") != null && !jsonObj.get("employee_benefits_deductions").isJsonNull()) && !jsonObj.get("employee_benefits_deductions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_benefits_deductions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_benefits_deductions").toString()));
      }
      if ((jsonObj.get("deferred_payroll_taxes") != null && !jsonObj.get("deferred_payroll_taxes").isJsonNull()) && !jsonObj.get("deferred_payroll_taxes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deferred_payroll_taxes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deferred_payroll_taxes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollTotalsType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollTotalsType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollTotalsType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollTotalsType.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollTotalsType>() {
           @Override
           public void write(JsonWriter out, PayrollTotalsType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollTotalsType read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollTotalsType instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollTotalsType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollTotalsType
  * @throws IOException if the JSON string is invalid with respect to PayrollTotalsType
  */
  public static PayrollTotalsType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollTotalsType.class);
  }

 /**
  * Convert an instance of PayrollTotalsType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

