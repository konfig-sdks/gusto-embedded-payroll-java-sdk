/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The representation of a single contractor payment.
 */
@ApiModel(description = "The representation of a single contractor payment.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContractorPayment {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_CONTRACTOR_UUID = "contractor_uuid";
  @SerializedName(SERIALIZED_NAME_CONTRACTOR_UUID)
  private String contractorUuid;

  public static final String SERIALIZED_NAME_BONUS = "bonus";
  @SerializedName(SERIALIZED_NAME_BONUS)
  private String bonus;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private String hours;

  /**
   * The payment method.
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
 public enum PaymentMethodEnum {
    DIRECT_DEPOSIT("Direct Deposit"),
    
    CHECK("Check"),
    
    HISTORICAL_PAYMENT("Historical Payment"),
    
    CORRECTION_PAYMENT("Correction Payment");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_REIMBURSEMENT = "reimbursement";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT)
  private String reimbursement;

  /**
   * Contractor payment status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    FUNDED("Funded"),
    
    UNFUNDED("Unfunded");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_HOURLY_RATE = "hourly_rate";
  @SerializedName(SERIALIZED_NAME_HOURLY_RATE)
  private String hourlyRate;

  public static final String SERIALIZED_NAME_MAY_CANCEL = "may_cancel";
  @SerializedName(SERIALIZED_NAME_MAY_CANCEL)
  private Boolean mayCancel;

  public static final String SERIALIZED_NAME_WAGE = "wage";
  @SerializedName(SERIALIZED_NAME_WAGE)
  private String wage;

  /**
   * The wage type for the payment.
   */
  @JsonAdapter(WageTypeEnum.Adapter.class)
 public enum WageTypeEnum {
    HOURLY("Hourly"),
    
    FIXED("Fixed");

    private String value;

    WageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WageTypeEnum fromValue(String value) {
      for (WageTypeEnum b : WageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WAGE_TYPE = "wage_type";
  @SerializedName(SERIALIZED_NAME_WAGE_TYPE)
  private WageTypeEnum wageType;

  public static final String SERIALIZED_NAME_WAGE_TOTAL = "wage_total";
  @SerializedName(SERIALIZED_NAME_WAGE_TOTAL)
  private String wageTotal;

  public ContractorPayment() {
  }

  
  public ContractorPayment(
     String uuid, 
     String contractorUuid, 
     String bonus, 
     String date, 
     String hours, 
     PaymentMethodEnum paymentMethod, 
     String reimbursement, 
     String hourlyRate, 
     Boolean mayCancel, 
     String wage, 
     WageTypeEnum wageType, 
     String wageTotal
  ) {
    this();
    this.uuid = uuid;
    this.contractorUuid = contractorUuid;
    this.bonus = bonus;
    this.date = date;
    this.hours = hours;
    this.paymentMethod = paymentMethod;
    this.reimbursement = reimbursement;
    this.hourlyRate = hourlyRate;
    this.mayCancel = mayCancel;
    this.wage = wage;
    this.wageType = wageType;
    this.wageTotal = wageTotal;
  }

   /**
   * The unique identifier of the contractor payment in Gusto.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "04552eb9-7829-4b18-ae96-6983552948df", value = "The unique identifier of the contractor payment in Gusto.")

  public String getUuid() {
    return uuid;
  }




   /**
   * The UUID of the contractor.
   * @return contractorUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UUID of the contractor.")

  public String getContractorUuid() {
    return contractorUuid;
  }




   /**
   * The bonus amount in the payment.
   * @return bonus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20.0", value = "The bonus amount in the payment.")

  public String getBonus() {
    return bonus;
  }




   /**
   * The payment date.
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-10-19", value = "The payment date.")

  public String getDate() {
    return date;
  }




   /**
   * The number of hours worked for the payment.
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40.0", value = "The number of hours worked for the payment.")

  public String getHours() {
    return hours;
  }




   /**
   * The payment method.
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DIRECT_DEPOSIT", value = "The payment method.")

  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }




   /**
   * The reimbursement amount in the payment.
   * @return reimbursement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100.0", value = "The reimbursement amount in the payment.")

  public String getReimbursement() {
    return reimbursement;
  }




  public ContractorPayment status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Contractor payment status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FUNDED", value = "Contractor payment status")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


   /**
   * The rate per hour worked for the payment.
   * @return hourlyRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "18.0", value = "The rate per hour worked for the payment.")

  public String getHourlyRate() {
    return hourlyRate;
  }




   /**
   * Determine if the contractor payment can be cancelled.
   * @return mayCancel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Determine if the contractor payment can be cancelled.")

  public Boolean getMayCancel() {
    return mayCancel;
  }




   /**
   * The fixed wage of the payment, regardless of hours worked.
   * @return wage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.0", value = "The fixed wage of the payment, regardless of hours worked.")

  public String getWage() {
    return wage;
  }




   /**
   * The wage type for the payment.
   * @return wageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "HOURLY", value = "The wage type for the payment.")

  public WageTypeEnum getWageType() {
    return wageType;
  }




   /**
   * (hours * hourly_rate) + wage + bonus
   * @return wageTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "740.00", value = "(hours * hourly_rate) + wage + bonus")

  public String getWageTotal() {
    return wageTotal;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContractorPayment instance itself
   */
  public ContractorPayment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractorPayment contractorPayment = (ContractorPayment) o;
    return Objects.equals(this.uuid, contractorPayment.uuid) &&
        Objects.equals(this.contractorUuid, contractorPayment.contractorUuid) &&
        Objects.equals(this.bonus, contractorPayment.bonus) &&
        Objects.equals(this.date, contractorPayment.date) &&
        Objects.equals(this.hours, contractorPayment.hours) &&
        Objects.equals(this.paymentMethod, contractorPayment.paymentMethod) &&
        Objects.equals(this.reimbursement, contractorPayment.reimbursement) &&
        Objects.equals(this.status, contractorPayment.status) &&
        Objects.equals(this.hourlyRate, contractorPayment.hourlyRate) &&
        Objects.equals(this.mayCancel, contractorPayment.mayCancel) &&
        Objects.equals(this.wage, contractorPayment.wage) &&
        Objects.equals(this.wageType, contractorPayment.wageType) &&
        Objects.equals(this.wageTotal, contractorPayment.wageTotal)&&
        Objects.equals(this.additionalProperties, contractorPayment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, contractorUuid, bonus, date, hours, paymentMethod, reimbursement, status, hourlyRate, mayCancel, wage, wageType, wageTotal, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractorPayment {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    contractorUuid: ").append(toIndentedString(contractorUuid)).append("\n");
    sb.append("    bonus: ").append(toIndentedString(bonus)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    reimbursement: ").append(toIndentedString(reimbursement)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hourlyRate: ").append(toIndentedString(hourlyRate)).append("\n");
    sb.append("    mayCancel: ").append(toIndentedString(mayCancel)).append("\n");
    sb.append("    wage: ").append(toIndentedString(wage)).append("\n");
    sb.append("    wageType: ").append(toIndentedString(wageType)).append("\n");
    sb.append("    wageTotal: ").append(toIndentedString(wageTotal)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("contractor_uuid");
    openapiFields.add("bonus");
    openapiFields.add("date");
    openapiFields.add("hours");
    openapiFields.add("payment_method");
    openapiFields.add("reimbursement");
    openapiFields.add("status");
    openapiFields.add("hourly_rate");
    openapiFields.add("may_cancel");
    openapiFields.add("wage");
    openapiFields.add("wage_type");
    openapiFields.add("wage_total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContractorPayment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContractorPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractorPayment is not found in the empty JSON string", ContractorPayment.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("contractor_uuid") != null && !jsonObj.get("contractor_uuid").isJsonNull()) && !jsonObj.get("contractor_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractor_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractor_uuid").toString()));
      }
      if ((jsonObj.get("bonus") != null && !jsonObj.get("bonus").isJsonNull()) && !jsonObj.get("bonus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bonus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bonus").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("hours") != null && !jsonObj.get("hours").isJsonNull()) && !jsonObj.get("hours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hours").toString()));
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      if ((jsonObj.get("reimbursement") != null && !jsonObj.get("reimbursement").isJsonNull()) && !jsonObj.get("reimbursement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reimbursement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reimbursement").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("hourly_rate") != null && !jsonObj.get("hourly_rate").isJsonNull()) && !jsonObj.get("hourly_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hourly_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hourly_rate").toString()));
      }
      if ((jsonObj.get("wage") != null && !jsonObj.get("wage").isJsonNull()) && !jsonObj.get("wage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wage").toString()));
      }
      if ((jsonObj.get("wage_type") != null && !jsonObj.get("wage_type").isJsonNull()) && !jsonObj.get("wage_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wage_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wage_type").toString()));
      }
      if ((jsonObj.get("wage_total") != null && !jsonObj.get("wage_total").isJsonNull()) && !jsonObj.get("wage_total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wage_total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wage_total").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractorPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractorPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractorPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractorPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractorPayment>() {
           @Override
           public void write(JsonWriter out, ContractorPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractorPayment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContractorPayment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContractorPayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContractorPayment
  * @throws IOException if the JSON string is invalid with respect to ContractorPayment
  */
  public static ContractorPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractorPayment.class);
  }

 /**
  * Convert an instance of ContractorPayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

