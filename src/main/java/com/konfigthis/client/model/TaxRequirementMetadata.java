/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TaxRequirementMetadataOptionsInner;
import com.konfigthis.client.model.TaxRequirementMetadataValidation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TaxRequirementMetadata {
  /**
   * Describes the type of requirement - each type may have additional metadata properties to describe possible values, formats, etc.  - &#x60;text&#x60;: free-text input, no additional requirements - &#x60;currency&#x60;: a value representing a dollar amount, e.g. &#x60;374.55&#x60; representing &#x60;$374.55&#x60; - &#x60;radio&#x60;: choose one of options provided, see &#x60;options&#x60; - &#x60;select&#x60;: choose one of options provided, see &#x60;options&#x60; - &#x60;percent&#x60;: A decimal value representing a percentage, e.g. &#x60;0.034&#x60; representing &#x60;3.4%&#x60; - &#x60;account_number&#x60;: An account number for a tax agency, more information provided by &#x60;mask&#x60; and &#x60;prefix&#x60; - &#x60;tax_rate&#x60;: A decimal value representing a tax rate, e.g. &#x60;0.034&#x60; representing a tax rate of &#x60;3.4%&#x60;, see &#x60;validation&#x60; for additional validation guidance - &#x60;workers_compensation_rate&#x60;: A decimal value representing a percentage, see &#x60;risk_class_code&#x60;, &#x60;risk_class_description&#x60;, and &#x60;rate_type&#x60; 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    TEXT("text"),
    
    CURRENCY("currency"),
    
    RADIO("radio"),
    
    SELECT("select"),
    
    PERCENT("percent"),
    
    ACCOUNT_NUMBER("account_number"),
    
    TAX_RATE("tax_rate"),
    
    WORKERS_COMPENSATION_RATE("workers_compensation_rate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<TaxRequirementMetadataOptionsInner> options = null;

  public static final String SERIALIZED_NAME_RISK_CLASS_CODE = "risk_class_code";
  @SerializedName(SERIALIZED_NAME_RISK_CLASS_CODE)
  private String riskClassCode;

  public static final String SERIALIZED_NAME_RISK_CLASS_DESCRIPTION = "risk_class_description";
  @SerializedName(SERIALIZED_NAME_RISK_CLASS_DESCRIPTION)
  private String riskClassDescription;

  /**
   * [for &#x60;workers_compensation_rate&#x60;] The type of rate being collected. Either:  - &#x60;percent&#x60;: A percentage formatted as a decimal, e.g. &#x60;0.01&#x60; for 1%  - &#x60;currency_per_hour&#x60;: A dollar amount per hour, e.g. &#x60;3.24&#x60; for $3.24/hr 
   */
  @JsonAdapter(RateTypeEnum.Adapter.class)
 public enum RateTypeEnum {
    PERCENT("percent"),
    
    CURRENCY_PER_HOUR("currency_per_hour");

    private String value;

    RateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RateTypeEnum fromValue(String value) {
      for (RateTypeEnum b : RateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RATE_TYPE = "rate_type";
  @SerializedName(SERIALIZED_NAME_RATE_TYPE)
  private RateTypeEnum rateType;

  public static final String SERIALIZED_NAME_MASK = "mask";
  @SerializedName(SERIALIZED_NAME_MASK)
  private String mask;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_VALIDATION = "validation";
  @SerializedName(SERIALIZED_NAME_VALIDATION)
  private TaxRequirementMetadataValidation validation;

  public TaxRequirementMetadata() {
  }

  
  public TaxRequirementMetadata(
     TypeEnum type
  ) {
    this();
    this.type = type;
  }

   /**
   * Describes the type of requirement - each type may have additional metadata properties to describe possible values, formats, etc.  - &#x60;text&#x60;: free-text input, no additional requirements - &#x60;currency&#x60;: a value representing a dollar amount, e.g. &#x60;374.55&#x60; representing &#x60;$374.55&#x60; - &#x60;radio&#x60;: choose one of options provided, see &#x60;options&#x60; - &#x60;select&#x60;: choose one of options provided, see &#x60;options&#x60; - &#x60;percent&#x60;: A decimal value representing a percentage, e.g. &#x60;0.034&#x60; representing &#x60;3.4%&#x60; - &#x60;account_number&#x60;: An account number for a tax agency, more information provided by &#x60;mask&#x60; and &#x60;prefix&#x60; - &#x60;tax_rate&#x60;: A decimal value representing a tax rate, e.g. &#x60;0.034&#x60; representing a tax rate of &#x60;3.4%&#x60;, see &#x60;validation&#x60; for additional validation guidance - &#x60;workers_compensation_rate&#x60;: A decimal value representing a percentage, see &#x60;risk_class_code&#x60;, &#x60;risk_class_description&#x60;, and &#x60;rate_type&#x60; 
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACCOUNT_NUMBER", required = true, value = "Describes the type of requirement - each type may have additional metadata properties to describe possible values, formats, etc.  - `text`: free-text input, no additional requirements - `currency`: a value representing a dollar amount, e.g. `374.55` representing `$374.55` - `radio`: choose one of options provided, see `options` - `select`: choose one of options provided, see `options` - `percent`: A decimal value representing a percentage, e.g. `0.034` representing `3.4%` - `account_number`: An account number for a tax agency, more information provided by `mask` and `prefix` - `tax_rate`: A decimal value representing a tax rate, e.g. `0.034` representing a tax rate of `3.4%`, see `validation` for additional validation guidance - `workers_compensation_rate`: A decimal value representing a percentage, see `risk_class_code`, `risk_class_description`, and `rate_type` ")

  public TypeEnum getType() {
    return type;
  }




  public TaxRequirementMetadata options(List<TaxRequirementMetadataOptionsInner> options) {
    
    
    
    
    this.options = options;
    return this;
  }

  public TaxRequirementMetadata addOptionsItem(TaxRequirementMetadataOptionsInner optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * [for &#x60;select&#x60; or &#x60;radio&#x60;] An array of objects describing the possible values.
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[for `select` or `radio`] An array of objects describing the possible values.")

  public List<TaxRequirementMetadataOptionsInner> getOptions() {
    return options;
  }


  public void setOptions(List<TaxRequirementMetadataOptionsInner> options) {
    
    
    
    this.options = options;
  }


  public TaxRequirementMetadata riskClassCode(String riskClassCode) {
    
    
    
    
    this.riskClassCode = riskClassCode;
    return this;
  }

   /**
   * [for &#x60;workers_compensation_rate&#x60;] The industry risk class code for the rate being requested
   * @return riskClassCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[for `workers_compensation_rate`] The industry risk class code for the rate being requested")

  public String getRiskClassCode() {
    return riskClassCode;
  }


  public void setRiskClassCode(String riskClassCode) {
    
    
    
    this.riskClassCode = riskClassCode;
  }


  public TaxRequirementMetadata riskClassDescription(String riskClassDescription) {
    
    
    
    
    this.riskClassDescription = riskClassDescription;
    return this;
  }

   /**
   * [for &#x60;workers_compensation_rate&#x60;] A description of the industry risk class for the rate being requested
   * @return riskClassDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[for `workers_compensation_rate`] A description of the industry risk class for the rate being requested")

  public String getRiskClassDescription() {
    return riskClassDescription;
  }


  public void setRiskClassDescription(String riskClassDescription) {
    
    
    
    this.riskClassDescription = riskClassDescription;
  }


  public TaxRequirementMetadata rateType(RateTypeEnum rateType) {
    
    
    
    
    this.rateType = rateType;
    return this;
  }

   /**
   * [for &#x60;workers_compensation_rate&#x60;] The type of rate being collected. Either:  - &#x60;percent&#x60;: A percentage formatted as a decimal, e.g. &#x60;0.01&#x60; for 1%  - &#x60;currency_per_hour&#x60;: A dollar amount per hour, e.g. &#x60;3.24&#x60; for $3.24/hr 
   * @return rateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[for `workers_compensation_rate`] The type of rate being collected. Either:  - `percent`: A percentage formatted as a decimal, e.g. `0.01` for 1%  - `currency_per_hour`: A dollar amount per hour, e.g. `3.24` for $3.24/hr ")

  public RateTypeEnum getRateType() {
    return rateType;
  }


  public void setRateType(RateTypeEnum rateType) {
    
    
    
    this.rateType = rateType;
  }


  public TaxRequirementMetadata mask(String mask) {
    
    
    
    
    this.mask = mask;
    return this;
  }

   /**
   * [for &#x60;account_number&#x60;] A pattern describing the format of the account number  The mask is a sequence of characters representing the requirements of the actual account number. Each character in the mask represents a single character in the account number as follows: - &#x60;#&#x60;: a digit (&#x60;\\d&#x60;) - &#x60;@&#x60;: a upper or lower case letter (&#x60;[a-zA-Z]&#x60;) - &#x60;^&#x60;: an uppercase letter (&#x60;[A-Z]&#x60;) - &#x60;%&#x60;: a digit or uppercase letter (&#x60;[0-9A-Z]&#x60;) - any other character represents the literal character  Examples: - mask: &#x60;WHT-######&#x60; represents &#x60;WHT-&#x60; followed by 5 digits, e.g. &#x60;WHT-33421&#x60; - mask: &#x60;%####-^^&#x60; supports values of &#x60;75544-AB&#x60; and &#x60;Z7654-HK&#x60; 
   * @return mask
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#######-^^", value = "[for `account_number`] A pattern describing the format of the account number  The mask is a sequence of characters representing the requirements of the actual account number. Each character in the mask represents a single character in the account number as follows: - `#`: a digit (`\\d`) - `@`: a upper or lower case letter (`[a-zA-Z]`) - `^`: an uppercase letter (`[A-Z]`) - `%`: a digit or uppercase letter (`[0-9A-Z]`) - any other character represents the literal character  Examples: - mask: `WHT-######` represents `WHT-` followed by 5 digits, e.g. `WHT-33421` - mask: `%####-^^` supports values of `75544-AB` and `Z7654-HK` ")

  public String getMask() {
    return mask;
  }


  public void setMask(String mask) {
    
    
    
    this.mask = mask;
  }


  public TaxRequirementMetadata prefix(String prefix) {
    
    
    
    
    this.prefix = prefix;
    return this;
  }

   /**
   * [for &#x60;account_number&#x60;] A value that precedes the value to be collected - useful for display, but should not be submitted as part of the value. E.g. some tax agencies use an account number that is a company&#39;s federal ein plus two digits. In that case the mask would be &#x60;##&#x60; and the prefix &#x60;XXXXX1234&#x60;.
   * @return prefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[for `account_number`] A value that precedes the value to be collected - useful for display, but should not be submitted as part of the value. E.g. some tax agencies use an account number that is a company's federal ein plus two digits. In that case the mask would be `##` and the prefix `XXXXX1234`.")

  public String getPrefix() {
    return prefix;
  }


  public void setPrefix(String prefix) {
    
    
    
    this.prefix = prefix;
  }


  public TaxRequirementMetadata validation(TaxRequirementMetadataValidation validation) {
    
    
    
    
    this.validation = validation;
    return this;
  }

   /**
   * Get validation
   * @return validation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaxRequirementMetadataValidation getValidation() {
    return validation;
  }


  public void setValidation(TaxRequirementMetadataValidation validation) {
    
    
    
    this.validation = validation;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TaxRequirementMetadata instance itself
   */
  public TaxRequirementMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxRequirementMetadata taxRequirementMetadata = (TaxRequirementMetadata) o;
    return Objects.equals(this.type, taxRequirementMetadata.type) &&
        Objects.equals(this.options, taxRequirementMetadata.options) &&
        Objects.equals(this.riskClassCode, taxRequirementMetadata.riskClassCode) &&
        Objects.equals(this.riskClassDescription, taxRequirementMetadata.riskClassDescription) &&
        Objects.equals(this.rateType, taxRequirementMetadata.rateType) &&
        Objects.equals(this.mask, taxRequirementMetadata.mask) &&
        Objects.equals(this.prefix, taxRequirementMetadata.prefix) &&
        Objects.equals(this.validation, taxRequirementMetadata.validation)&&
        Objects.equals(this.additionalProperties, taxRequirementMetadata.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, options, riskClassCode, riskClassDescription, rateType, mask, prefix, validation, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxRequirementMetadata {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    riskClassCode: ").append(toIndentedString(riskClassCode)).append("\n");
    sb.append("    riskClassDescription: ").append(toIndentedString(riskClassDescription)).append("\n");
    sb.append("    rateType: ").append(toIndentedString(rateType)).append("\n");
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("options");
    openapiFields.add("risk_class_code");
    openapiFields.add("risk_class_description");
    openapiFields.add("rate_type");
    openapiFields.add("mask");
    openapiFields.add("prefix");
    openapiFields.add("validation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxRequirementMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TaxRequirementMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxRequirementMetadata is not found in the empty JSON string", TaxRequirementMetadata.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaxRequirementMetadata.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            TaxRequirementMetadataOptionsInner.validateJsonObject(jsonArrayoptions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("risk_class_code") != null && !jsonObj.get("risk_class_code").isJsonNull()) && !jsonObj.get("risk_class_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk_class_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risk_class_code").toString()));
      }
      if ((jsonObj.get("risk_class_description") != null && !jsonObj.get("risk_class_description").isJsonNull()) && !jsonObj.get("risk_class_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk_class_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risk_class_description").toString()));
      }
      if ((jsonObj.get("rate_type") != null && !jsonObj.get("rate_type").isJsonNull()) && !jsonObj.get("rate_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate_type").toString()));
      }
      if ((jsonObj.get("mask") != null && !jsonObj.get("mask").isJsonNull()) && !jsonObj.get("mask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mask").toString()));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      // validate the optional field `validation`
      if (jsonObj.get("validation") != null && !jsonObj.get("validation").isJsonNull()) {
        TaxRequirementMetadataValidation.validateJsonObject(jsonObj.getAsJsonObject("validation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxRequirementMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxRequirementMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxRequirementMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxRequirementMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxRequirementMetadata>() {
           @Override
           public void write(JsonWriter out, TaxRequirementMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxRequirementMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TaxRequirementMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxRequirementMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxRequirementMetadata
  * @throws IOException if the JSON string is invalid with respect to TaxRequirementMetadata
  */
  public static TaxRequirementMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxRequirementMetadata.class);
  }

 /**
  * Convert an instance of TaxRequirementMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

