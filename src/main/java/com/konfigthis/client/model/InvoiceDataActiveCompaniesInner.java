/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * InvoiceDataActiveCompaniesInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InvoiceDataActiveCompaniesInner {
  public static final String SERIALIZED_NAME_COMPANY_UUID = "company_uuid";
  @SerializedName(SERIALIZED_NAME_COMPANY_UUID)
  private String companyUuid;

  public static final String SERIALIZED_NAME_ACTIVE_EMPLOYEES = "active_employees";
  @SerializedName(SERIALIZED_NAME_ACTIVE_EMPLOYEES)
  private Integer activeEmployees;

  public static final String SERIALIZED_NAME_ACTIVE_CONTRACTORS = "active_contractors";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONTRACTORS)
  private Integer activeContractors;

  public static final String SERIALIZED_NAME_INITIAL_INVOICE_PERIOD = "initial_invoice_period";
  @SerializedName(SERIALIZED_NAME_INITIAL_INVOICE_PERIOD)
  private String initialInvoicePeriod;

  public InvoiceDataActiveCompaniesInner() {
  }

  public InvoiceDataActiveCompaniesInner companyUuid(String companyUuid) {
    
    
    
    
    this.companyUuid = companyUuid;
    return this;
  }

   /**
   * unique identifier for the company associated with the invoice data
   * @return companyUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "unique identifier for the company associated with the invoice data")

  public String getCompanyUuid() {
    return companyUuid;
  }


  public void setCompanyUuid(String companyUuid) {
    
    
    
    this.companyUuid = companyUuid;
  }


  public InvoiceDataActiveCompaniesInner activeEmployees(Integer activeEmployees) {
    
    
    
    
    this.activeEmployees = activeEmployees;
    return this;
  }

   /**
   * The number of active employees the company was or will be invoiced for that invoice period. Active employees are calculated as the count of onboarded employees hired before the end of the invoice period and not terminated before the start of the invoice period.
   * @return activeEmployees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of active employees the company was or will be invoiced for that invoice period. Active employees are calculated as the count of onboarded employees hired before the end of the invoice period and not terminated before the start of the invoice period.")

  public Integer getActiveEmployees() {
    return activeEmployees;
  }


  public void setActiveEmployees(Integer activeEmployees) {
    
    
    
    this.activeEmployees = activeEmployees;
  }


  public InvoiceDataActiveCompaniesInner activeContractors(Integer activeContractors) {
    
    
    
    
    this.activeContractors = activeContractors;
    return this;
  }

   /**
   * The number of active contractors the company was or will be invoiced for that invoice period. Active contractors are calculated as any contractor with an active contractor payment during the invoice period.
   * @return activeContractors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of active contractors the company was or will be invoiced for that invoice period. Active contractors are calculated as any contractor with an active contractor payment during the invoice period.")

  public Integer getActiveContractors() {
    return activeContractors;
  }


  public void setActiveContractors(Integer activeContractors) {
    
    
    
    this.activeContractors = activeContractors;
  }


  public InvoiceDataActiveCompaniesInner initialInvoicePeriod(String initialInvoicePeriod) {
    
    
    
    
    this.initialInvoicePeriod = initialInvoicePeriod;
    return this;
  }

   /**
   * The first invoice period for the company. This will either be the invoice period of the first invoice-able event (first payroll or contractor payment) or the date they migrated to embedded, whichever is later.
   * @return initialInvoicePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The first invoice period for the company. This will either be the invoice period of the first invoice-able event (first payroll or contractor payment) or the date they migrated to embedded, whichever is later.")

  public String getInitialInvoicePeriod() {
    return initialInvoicePeriod;
  }


  public void setInitialInvoicePeriod(String initialInvoicePeriod) {
    
    
    
    this.initialInvoicePeriod = initialInvoicePeriod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InvoiceDataActiveCompaniesInner instance itself
   */
  public InvoiceDataActiveCompaniesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceDataActiveCompaniesInner invoiceDataActiveCompaniesInner = (InvoiceDataActiveCompaniesInner) o;
    return Objects.equals(this.companyUuid, invoiceDataActiveCompaniesInner.companyUuid) &&
        Objects.equals(this.activeEmployees, invoiceDataActiveCompaniesInner.activeEmployees) &&
        Objects.equals(this.activeContractors, invoiceDataActiveCompaniesInner.activeContractors) &&
        Objects.equals(this.initialInvoicePeriod, invoiceDataActiveCompaniesInner.initialInvoicePeriod)&&
        Objects.equals(this.additionalProperties, invoiceDataActiveCompaniesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyUuid, activeEmployees, activeContractors, initialInvoicePeriod, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceDataActiveCompaniesInner {\n");
    sb.append("    companyUuid: ").append(toIndentedString(companyUuid)).append("\n");
    sb.append("    activeEmployees: ").append(toIndentedString(activeEmployees)).append("\n");
    sb.append("    activeContractors: ").append(toIndentedString(activeContractors)).append("\n");
    sb.append("    initialInvoicePeriod: ").append(toIndentedString(initialInvoicePeriod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("company_uuid");
    openapiFields.add("active_employees");
    openapiFields.add("active_contractors");
    openapiFields.add("initial_invoice_period");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InvoiceDataActiveCompaniesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InvoiceDataActiveCompaniesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceDataActiveCompaniesInner is not found in the empty JSON string", InvoiceDataActiveCompaniesInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("company_uuid") != null && !jsonObj.get("company_uuid").isJsonNull()) && !jsonObj.get("company_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_uuid").toString()));
      }
      if ((jsonObj.get("initial_invoice_period") != null && !jsonObj.get("initial_invoice_period").isJsonNull()) && !jsonObj.get("initial_invoice_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_invoice_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initial_invoice_period").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceDataActiveCompaniesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceDataActiveCompaniesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceDataActiveCompaniesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceDataActiveCompaniesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceDataActiveCompaniesInner>() {
           @Override
           public void write(JsonWriter out, InvoiceDataActiveCompaniesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceDataActiveCompaniesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InvoiceDataActiveCompaniesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InvoiceDataActiveCompaniesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InvoiceDataActiveCompaniesInner
  * @throws IOException if the JSON string is invalid with respect to InvoiceDataActiveCompaniesInner
  */
  public static InvoiceDataActiveCompaniesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceDataActiveCompaniesInner.class);
  }

 /**
  * Convert an instance of InvoiceDataActiveCompaniesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

