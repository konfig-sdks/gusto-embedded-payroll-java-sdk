/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccruingTimeOffHour;
import com.konfigthis.client.model.TimeOffPoliciesAddEmployeesToPolicyRequest;
import com.konfigthis.client.model.TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner;
import com.konfigthis.client.model.TimeOffPoliciesCalculateAccruingTimeOffHoursRequest;
import com.konfigthis.client.model.TimeOffPoliciesCreatePolicyRequest;
import com.konfigthis.client.model.TimeOffPoliciesRemoveEmployeesRequest;
import com.konfigthis.client.model.TimeOffPoliciesUpdateEmployeeBalanceRequest;
import com.konfigthis.client.model.TimeOffPoliciesUpdatePolicyRequest;
import com.konfigthis.client.model.TimeOffPolicy;
import com.konfigthis.client.model.TimeOffPolicyEmployeesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeOffPoliciesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeOffPoliciesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeOffPoliciesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addEmployeesToPolicyCall(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffPoliciesAddEmployeesToPolicyRequest;

        // create path and map variables
        String localVarPath = "/v1/time_off_policies/{time_off_policy_uuid}/add_employees"
            .replace("{" + "time_off_policy_uuid" + "}", localVarApiClient.escapeString(timeOffPolicyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmployeesToPolicyValidateBeforeCall(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffPolicyUuid' is set
        if (timeOffPolicyUuid == null) {
            throw new ApiException("Missing the required parameter 'timeOffPolicyUuid' when calling addEmployeesToPolicy(Async)");
        }

        return addEmployeesToPolicyCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesAddEmployeesToPolicyRequest, _callback);

    }


    private ApiResponse<TimeOffPolicy> addEmployeesToPolicyWithHttpInfo(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = addEmployeesToPolicyValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesAddEmployeesToPolicyRequest, null);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEmployeesToPolicyAsync(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest, final ApiCallback<TimeOffPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmployeesToPolicyValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesAddEmployeesToPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddEmployeesToPolicyRequestBuilder {
        private final String timeOffPolicyUuid;
        private List<TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner> employees;
        private String xGustoAPIVersion;

        private AddEmployeesToPolicyRequestBuilder(String timeOffPolicyUuid) {
            this.timeOffPolicyUuid = timeOffPolicyUuid;
        }

        /**
         * Set employees
         * @param employees  (optional)
         * @return AddEmployeesToPolicyRequestBuilder
         */
        public AddEmployeesToPolicyRequestBuilder employees(List<TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return AddEmployeesToPolicyRequestBuilder
         */
        public AddEmployeesToPolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for addEmployeesToPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest = buildBodyParams();
            return addEmployeesToPolicyCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesAddEmployeesToPolicyRequest, _callback);
        }

        private TimeOffPoliciesAddEmployeesToPolicyRequest buildBodyParams() {
            TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest = new TimeOffPoliciesAddEmployeesToPolicyRequest();
            timeOffPoliciesAddEmployeesToPolicyRequest.employees(this.employees);
            return timeOffPoliciesAddEmployeesToPolicyRequest;
        }

        /**
         * Execute addEmployeesToPolicy request
         * @return TimeOffPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffPolicy execute() throws ApiException {
            TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest = buildBodyParams();
            ApiResponse<TimeOffPolicy> localVarResp = addEmployeesToPolicyWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesAddEmployeesToPolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addEmployeesToPolicy request with HTTP info returned
         * @return ApiResponse&lt;TimeOffPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffPolicy> executeWithHttpInfo() throws ApiException {
            TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest = buildBodyParams();
            return addEmployeesToPolicyWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesAddEmployeesToPolicyRequest);
        }

        /**
         * Execute addEmployeesToPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffPolicy> _callback) throws ApiException {
            TimeOffPoliciesAddEmployeesToPolicyRequest timeOffPoliciesAddEmployeesToPolicyRequest = buildBodyParams();
            return addEmployeesToPolicyAsync(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesAddEmployeesToPolicyRequest, _callback);
        }
    }

    /**
     * Add employees to a time off policy
     * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies  scope: &#x60;time_off_policies:write&#x60;
     * @param timeOffPolicyUuid The UUID of the company time off policy (required)
     * @return AddEmployeesToPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public AddEmployeesToPolicyRequestBuilder addEmployeesToPolicy(String timeOffPolicyUuid) throws IllegalArgumentException {
        if (timeOffPolicyUuid == null) throw new IllegalArgumentException("\"timeOffPolicyUuid\" is required but got null");
            

        return new AddEmployeesToPolicyRequestBuilder(timeOffPolicyUuid);
    }
    private okhttp3.Call calculateAccruingTimeOffHoursCall(String payrollId, String employeeId, String xGustoAPIVersion, TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffPoliciesCalculateAccruingTimeOffHoursRequest;

        // create path and map variables
        String localVarPath = "/v1/payrolls/{payroll_id}/employees/{employee_id}/calculate_accruing_time_off_hours"
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()))
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateAccruingTimeOffHoursValidateBeforeCall(String payrollId, String employeeId, String xGustoAPIVersion, TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling calculateAccruingTimeOffHours(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling calculateAccruingTimeOffHours(Async)");
        }

        return calculateAccruingTimeOffHoursCall(payrollId, employeeId, xGustoAPIVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest, _callback);

    }


    private ApiResponse<List<AccruingTimeOffHour>> calculateAccruingTimeOffHoursWithHttpInfo(String payrollId, String employeeId, String xGustoAPIVersion, TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest) throws ApiException {
        okhttp3.Call localVarCall = calculateAccruingTimeOffHoursValidateBeforeCall(payrollId, employeeId, xGustoAPIVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest, null);
        Type localVarReturnType = new TypeToken<List<AccruingTimeOffHour>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateAccruingTimeOffHoursAsync(String payrollId, String employeeId, String xGustoAPIVersion, TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest, final ApiCallback<List<AccruingTimeOffHour>> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateAccruingTimeOffHoursValidateBeforeCall(payrollId, employeeId, xGustoAPIVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest, _callback);
        Type localVarReturnType = new TypeToken<List<AccruingTimeOffHour>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateAccruingTimeOffHoursRequestBuilder {
        private final String payrollId;
        private final String employeeId;
        private Double regularHoursWorked;
        private Double overtimeHoursWorked;
        private Double doubleOvertimeHoursWorked;
        private Double ptoHoursUsed;
        private Double sickHoursUsed;
        private String xGustoAPIVersion;

        private CalculateAccruingTimeOffHoursRequestBuilder(String payrollId, String employeeId) {
            this.payrollId = payrollId;
            this.employeeId = employeeId;
        }

        /**
         * Set regularHoursWorked
         * @param regularHoursWorked regular hours worked in this pay period (optional)
         * @return CalculateAccruingTimeOffHoursRequestBuilder
         */
        public CalculateAccruingTimeOffHoursRequestBuilder regularHoursWorked(Double regularHoursWorked) {
            this.regularHoursWorked = regularHoursWorked;
            return this;
        }
        
        /**
         * Set overtimeHoursWorked
         * @param overtimeHoursWorked overtime hours worked in this pay period (optional)
         * @return CalculateAccruingTimeOffHoursRequestBuilder
         */
        public CalculateAccruingTimeOffHoursRequestBuilder overtimeHoursWorked(Double overtimeHoursWorked) {
            this.overtimeHoursWorked = overtimeHoursWorked;
            return this;
        }
        
        /**
         * Set doubleOvertimeHoursWorked
         * @param doubleOvertimeHoursWorked double overtime hours worked in this pay period (optional)
         * @return CalculateAccruingTimeOffHoursRequestBuilder
         */
        public CalculateAccruingTimeOffHoursRequestBuilder doubleOvertimeHoursWorked(Double doubleOvertimeHoursWorked) {
            this.doubleOvertimeHoursWorked = doubleOvertimeHoursWorked;
            return this;
        }
        
        /**
         * Set ptoHoursUsed
         * @param ptoHoursUsed paid time off hours used in this pay period (optional)
         * @return CalculateAccruingTimeOffHoursRequestBuilder
         */
        public CalculateAccruingTimeOffHoursRequestBuilder ptoHoursUsed(Double ptoHoursUsed) {
            this.ptoHoursUsed = ptoHoursUsed;
            return this;
        }
        
        /**
         * Set sickHoursUsed
         * @param sickHoursUsed sick hours used in this pay period (optional)
         * @return CalculateAccruingTimeOffHoursRequestBuilder
         */
        public CalculateAccruingTimeOffHoursRequestBuilder sickHoursUsed(Double sickHoursUsed) {
            this.sickHoursUsed = sickHoursUsed;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CalculateAccruingTimeOffHoursRequestBuilder
         */
        public CalculateAccruingTimeOffHoursRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for calculateAccruingTimeOffHours
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest = buildBodyParams();
            return calculateAccruingTimeOffHoursCall(payrollId, employeeId, xGustoAPIVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest, _callback);
        }

        private TimeOffPoliciesCalculateAccruingTimeOffHoursRequest buildBodyParams() {
            TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest = new TimeOffPoliciesCalculateAccruingTimeOffHoursRequest();
            timeOffPoliciesCalculateAccruingTimeOffHoursRequest.regularHoursWorked(this.regularHoursWorked);
            timeOffPoliciesCalculateAccruingTimeOffHoursRequest.overtimeHoursWorked(this.overtimeHoursWorked);
            timeOffPoliciesCalculateAccruingTimeOffHoursRequest.doubleOvertimeHoursWorked(this.doubleOvertimeHoursWorked);
            timeOffPoliciesCalculateAccruingTimeOffHoursRequest.ptoHoursUsed(this.ptoHoursUsed);
            timeOffPoliciesCalculateAccruingTimeOffHoursRequest.sickHoursUsed(this.sickHoursUsed);
            return timeOffPoliciesCalculateAccruingTimeOffHoursRequest;
        }

        /**
         * Execute calculateAccruingTimeOffHours request
         * @return List&lt;AccruingTimeOffHour&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public List<AccruingTimeOffHour> execute() throws ApiException {
            TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest = buildBodyParams();
            ApiResponse<List<AccruingTimeOffHour>> localVarResp = calculateAccruingTimeOffHoursWithHttpInfo(payrollId, employeeId, xGustoAPIVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateAccruingTimeOffHours request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AccruingTimeOffHour&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AccruingTimeOffHour>> executeWithHttpInfo() throws ApiException {
            TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest = buildBodyParams();
            return calculateAccruingTimeOffHoursWithHttpInfo(payrollId, employeeId, xGustoAPIVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest);
        }

        /**
         * Execute calculateAccruingTimeOffHours request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AccruingTimeOffHour>> _callback) throws ApiException {
            TimeOffPoliciesCalculateAccruingTimeOffHoursRequest timeOffPoliciesCalculateAccruingTimeOffHoursRequest = buildBodyParams();
            return calculateAccruingTimeOffHoursAsync(payrollId, employeeId, xGustoAPIVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest, _callback);
        }
    }

    /**
     * Calculate accruing time off hours
     * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: &#x60;payrolls:read&#x60;
     * @param payrollId The UUID of the payroll (required)
     * @param employeeId The UUID of the employee (required)
     * @return CalculateAccruingTimeOffHoursRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public CalculateAccruingTimeOffHoursRequestBuilder calculateAccruingTimeOffHours(String payrollId, String employeeId) throws IllegalArgumentException {
        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CalculateAccruingTimeOffHoursRequestBuilder(payrollId, employeeId);
    }
    private okhttp3.Call createPolicyCall(String companyUuid, String xGustoAPIVersion, TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffPoliciesCreatePolicyRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/time_off_policies"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyValidateBeforeCall(String companyUuid, String xGustoAPIVersion, TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling createPolicy(Async)");
        }

        return createPolicyCall(companyUuid, xGustoAPIVersion, timeOffPoliciesCreatePolicyRequest, _callback);

    }


    private ApiResponse<TimeOffPolicy> createPolicyWithHttpInfo(String companyUuid, String xGustoAPIVersion, TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, timeOffPoliciesCreatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyAsync(String companyUuid, String xGustoAPIVersion, TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest, final ApiCallback<TimeOffPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, timeOffPoliciesCreatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePolicyRequestBuilder {
        private final String name;
        private final String policyType;
        private final String accrualMethod;
        private final String companyUuid;
        private Float accrualRate;
        private Float accrualRateUnit;
        private Boolean paidOutOnTermination;
        private Integer accrualWaitingPeriodDays;
        private Float carryoverLimitHours;
        private Float maxAccrualHoursPerYear;
        private Float maxHours;
        private String xGustoAPIVersion;

        private CreatePolicyRequestBuilder(String name, String policyType, String accrualMethod, String companyUuid) {
            this.name = name;
            this.policyType = policyType;
            this.accrualMethod = accrualMethod;
            this.companyUuid = companyUuid;
        }

        /**
         * Set accrualRate
         * @param accrualRate The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. \\\&quot;40.0\\\&quot;. (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder accrualRate(Float accrualRate) {
            this.accrualRate = accrualRate;
            return this;
        }
        
        /**
         * Set accrualRateUnit
         * @param accrualRateUnit The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. \\\&quot;40.0\\\&quot;. (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder accrualRateUnit(Float accrualRateUnit) {
            this.accrualRateUnit = accrualRateUnit;
            return this;
        }
        
        /**
         * Set paidOutOnTermination
         * @param paidOutOnTermination Boolean representing if an employees accrued time off hours will be paid out on termination (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder paidOutOnTermination(Boolean paidOutOnTermination) {
            this.paidOutOnTermination = paidOutOnTermination;
            return this;
        }
        
        /**
         * Set accrualWaitingPeriodDays
         * @param accrualWaitingPeriodDays Number of days before an employee on the policy will begin accruing time off hours (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder accrualWaitingPeriodDays(Integer accrualWaitingPeriodDays) {
            this.accrualWaitingPeriodDays = accrualWaitingPeriodDays;
            return this;
        }
        
        /**
         * Set carryoverLimitHours
         * @param carryoverLimitHours The max number of hours and employee can carryover from one year to the next (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder carryoverLimitHours(Float carryoverLimitHours) {
            this.carryoverLimitHours = carryoverLimitHours;
            return this;
        }
        
        /**
         * Set maxAccrualHoursPerYear
         * @param maxAccrualHoursPerYear The max number of hours and employee can accrue in a year (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder maxAccrualHoursPerYear(Float maxAccrualHoursPerYear) {
            this.maxAccrualHoursPerYear = maxAccrualHoursPerYear;
            return this;
        }
        
        /**
         * Set maxHours
         * @param maxHours The max number of hours an employee can accrue (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder maxHours(Float maxHours) {
            this.maxHours = maxHours;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyCall(companyUuid, xGustoAPIVersion, timeOffPoliciesCreatePolicyRequest, _callback);
        }

        private TimeOffPoliciesCreatePolicyRequest buildBodyParams() {
            TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest = new TimeOffPoliciesCreatePolicyRequest();
            timeOffPoliciesCreatePolicyRequest.name(this.name);
            timeOffPoliciesCreatePolicyRequest.policyType(this.policyType);
            if (this.accrualMethod != null)
            timeOffPoliciesCreatePolicyRequest.accrualMethod(TimeOffPoliciesCreatePolicyRequest.AccrualMethodEnum.fromValue(this.accrualMethod));
            timeOffPoliciesCreatePolicyRequest.accrualRate(this.accrualRate);
            timeOffPoliciesCreatePolicyRequest.accrualRateUnit(this.accrualRateUnit);
            timeOffPoliciesCreatePolicyRequest.paidOutOnTermination(this.paidOutOnTermination);
            timeOffPoliciesCreatePolicyRequest.accrualWaitingPeriodDays(this.accrualWaitingPeriodDays);
            timeOffPoliciesCreatePolicyRequest.carryoverLimitHours(this.carryoverLimitHours);
            timeOffPoliciesCreatePolicyRequest.maxAccrualHoursPerYear(this.maxAccrualHoursPerYear);
            timeOffPoliciesCreatePolicyRequest.maxHours(this.maxHours);
            return timeOffPoliciesCreatePolicyRequest;
        }

        /**
         * Execute createPolicy request
         * @return TimeOffPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffPolicy execute() throws ApiException {
            TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest = buildBodyParams();
            ApiResponse<TimeOffPolicy> localVarResp = createPolicyWithHttpInfo(companyUuid, xGustoAPIVersion, timeOffPoliciesCreatePolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPolicy request with HTTP info returned
         * @return ApiResponse&lt;TimeOffPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffPolicy> executeWithHttpInfo() throws ApiException {
            TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyWithHttpInfo(companyUuid, xGustoAPIVersion, timeOffPoliciesCreatePolicyRequest);
        }

        /**
         * Execute createPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffPolicy> _callback) throws ApiException {
            TimeOffPoliciesCreatePolicyRequest timeOffPoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyAsync(companyUuid, xGustoAPIVersion, timeOffPoliciesCreatePolicyRequest, _callback);
        }
    }

    /**
     * Create a time off policy
     * Create a time off policy  scope: &#x60;time_off_policies:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return CreatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreatePolicyRequestBuilder createPolicy(String name, String policyType, String accrualMethod, String companyUuid) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (policyType == null) throw new IllegalArgumentException("\"policyType\" is required but got null");
            

        if (accrualMethod == null) throw new IllegalArgumentException("\"accrualMethod\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new CreatePolicyRequestBuilder(name, policyType, accrualMethod, companyUuid);
    }
    private okhttp3.Call deactivatePolicyCall(String timeOffPolicyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/time_off_policies/{time_off_policy_uuid}/deactivate"
            .replace("{" + "time_off_policy_uuid" + "}", localVarApiClient.escapeString(timeOffPolicyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivatePolicyValidateBeforeCall(String timeOffPolicyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffPolicyUuid' is set
        if (timeOffPolicyUuid == null) {
            throw new ApiException("Missing the required parameter 'timeOffPolicyUuid' when calling deactivatePolicy(Async)");
        }

        return deactivatePolicyCall(timeOffPolicyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<TimeOffPolicy> deactivatePolicyWithHttpInfo(String timeOffPolicyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deactivatePolicyValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivatePolicyAsync(String timeOffPolicyUuid, String xGustoAPIVersion, final ApiCallback<TimeOffPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivatePolicyValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivatePolicyRequestBuilder {
        private final String timeOffPolicyUuid;
        private String xGustoAPIVersion;

        private DeactivatePolicyRequestBuilder(String timeOffPolicyUuid) {
            this.timeOffPolicyUuid = timeOffPolicyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeactivatePolicyRequestBuilder
         */
        public DeactivatePolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deactivatePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivatePolicyCall(timeOffPolicyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deactivatePolicy request
         * @return TimeOffPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffPolicy execute() throws ApiException {
            ApiResponse<TimeOffPolicy> localVarResp = deactivatePolicyWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivatePolicy request with HTTP info returned
         * @return ApiResponse&lt;TimeOffPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffPolicy> executeWithHttpInfo() throws ApiException {
            return deactivatePolicyWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion);
        }

        /**
         * Execute deactivatePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffPolicy> _callback) throws ApiException {
            return deactivatePolicyAsync(timeOffPolicyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Deactivate a time off policy
     * Deactivate a time off policy  scope: &#x60;time_off_policies:write&#x60;
     * @param timeOffPolicyUuid The UUID of the company time off policy (required)
     * @return DeactivatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeactivatePolicyRequestBuilder deactivatePolicy(String timeOffPolicyUuid) throws IllegalArgumentException {
        if (timeOffPolicyUuid == null) throw new IllegalArgumentException("\"timeOffPolicyUuid\" is required but got null");
            

        return new DeactivatePolicyRequestBuilder(timeOffPolicyUuid);
    }
    private okhttp3.Call getAllPoliciesCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/time_off_policies"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPoliciesValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getAllPolicies(Async)");
        }

        return getAllPoliciesCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<TimeOffPolicy>> getAllPoliciesWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllPoliciesValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<TimeOffPolicy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPoliciesAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<List<TimeOffPolicy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPoliciesValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<TimeOffPolicy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPoliciesRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetAllPoliciesRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllPoliciesRequestBuilder
         */
        public GetAllPoliciesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAllPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPoliciesCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAllPolicies request
         * @return List&lt;TimeOffPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<TimeOffPolicy> execute() throws ApiException {
            ApiResponse<List<TimeOffPolicy>> localVarResp = getAllPoliciesWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPolicies request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TimeOffPolicy&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TimeOffPolicy>> executeWithHttpInfo() throws ApiException {
            return getAllPoliciesWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getAllPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TimeOffPolicy>> _callback) throws ApiException {
            return getAllPoliciesAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all time off policies
     * Get all time off policies for a company  scope: &#x60;time_off_policies:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetAllPoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPoliciesRequestBuilder getAllPolicies(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetAllPoliciesRequestBuilder(companyUuid);
    }
    private okhttp3.Call getPolicyCall(String timeOffPolicyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/time_off_policies/{time_off_policy_uuid}"
            .replace("{" + "time_off_policy_uuid" + "}", localVarApiClient.escapeString(timeOffPolicyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyValidateBeforeCall(String timeOffPolicyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffPolicyUuid' is set
        if (timeOffPolicyUuid == null) {
            throw new ApiException("Missing the required parameter 'timeOffPolicyUuid' when calling getPolicy(Async)");
        }

        return getPolicyCall(timeOffPolicyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<TimeOffPolicy> getPolicyWithHttpInfo(String timeOffPolicyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyAsync(String timeOffPolicyUuid, String xGustoAPIVersion, final ApiCallback<TimeOffPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyRequestBuilder {
        private final String timeOffPolicyUuid;
        private String xGustoAPIVersion;

        private GetPolicyRequestBuilder(String timeOffPolicyUuid) {
            this.timeOffPolicyUuid = timeOffPolicyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetPolicyRequestBuilder
         */
        public GetPolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyCall(timeOffPolicyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getPolicy request
         * @return TimeOffPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffPolicy execute() throws ApiException {
            ApiResponse<TimeOffPolicy> localVarResp = getPolicyWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicy request with HTTP info returned
         * @return ApiResponse&lt;TimeOffPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffPolicy> executeWithHttpInfo() throws ApiException {
            return getPolicyWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffPolicy> _callback) throws ApiException {
            return getPolicyAsync(timeOffPolicyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a time off policy
     * Get a time off policy  scope: &#x60;time_off_policies:read&#x60;
     * @param timeOffPolicyUuid The UUID of the company time off policy (required)
     * @return GetPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyRequestBuilder getPolicy(String timeOffPolicyUuid) throws IllegalArgumentException {
        if (timeOffPolicyUuid == null) throw new IllegalArgumentException("\"timeOffPolicyUuid\" is required but got null");
            

        return new GetPolicyRequestBuilder(timeOffPolicyUuid);
    }
    private okhttp3.Call removeEmployeesCall(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffPoliciesRemoveEmployeesRequest;

        // create path and map variables
        String localVarPath = "/v1/time_off_policies/{time_off_policy_uuid}/remove_employees"
            .replace("{" + "time_off_policy_uuid" + "}", localVarApiClient.escapeString(timeOffPolicyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEmployeesValidateBeforeCall(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffPolicyUuid' is set
        if (timeOffPolicyUuid == null) {
            throw new ApiException("Missing the required parameter 'timeOffPolicyUuid' when calling removeEmployees(Async)");
        }

        return removeEmployeesCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesRemoveEmployeesRequest, _callback);

    }


    private ApiResponse<TimeOffPolicy> removeEmployeesWithHttpInfo(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest) throws ApiException {
        okhttp3.Call localVarCall = removeEmployeesValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesRemoveEmployeesRequest, null);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEmployeesAsync(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest, final ApiCallback<TimeOffPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEmployeesValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesRemoveEmployeesRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEmployeesRequestBuilder {
        private final String timeOffPolicyUuid;
        private List<TimeOffPolicyEmployeesInner> employees;
        private String xGustoAPIVersion;

        private RemoveEmployeesRequestBuilder(String timeOffPolicyUuid) {
            this.timeOffPolicyUuid = timeOffPolicyUuid;
        }

        /**
         * Set employees
         * @param employees  (optional)
         * @return RemoveEmployeesRequestBuilder
         */
        public RemoveEmployeesRequestBuilder employees(List<TimeOffPolicyEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return RemoveEmployeesRequestBuilder
         */
        public RemoveEmployeesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for removeEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesRemoveEmployeesRequest, _callback);
        }

        private TimeOffPoliciesRemoveEmployeesRequest buildBodyParams() {
            TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest = new TimeOffPoliciesRemoveEmployeesRequest();
            timeOffPoliciesRemoveEmployeesRequest.employees(this.employees);
            return timeOffPoliciesRemoveEmployeesRequest;
        }

        /**
         * Execute removeEmployees request
         * @return TimeOffPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffPolicy execute() throws ApiException {
            TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest = buildBodyParams();
            ApiResponse<TimeOffPolicy> localVarResp = removeEmployeesWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesRemoveEmployeesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEmployees request with HTTP info returned
         * @return ApiResponse&lt;TimeOffPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffPolicy> executeWithHttpInfo() throws ApiException {
            TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesRemoveEmployeesRequest);
        }

        /**
         * Execute removeEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffPolicy> _callback) throws ApiException {
            TimeOffPoliciesRemoveEmployeesRequest timeOffPoliciesRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesAsync(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesRemoveEmployeesRequest, _callback);
        }
    }

    /**
     * Remove employees from a time off policy
     * Remove employees from a time off policy  scope: &#x60;time_off_policies:write&#x60;
     * @param timeOffPolicyUuid The UUID of the company time off policy (required)
     * @return RemoveEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEmployeesRequestBuilder removeEmployees(String timeOffPolicyUuid) throws IllegalArgumentException {
        if (timeOffPolicyUuid == null) throw new IllegalArgumentException("\"timeOffPolicyUuid\" is required but got null");
            

        return new RemoveEmployeesRequestBuilder(timeOffPolicyUuid);
    }
    private okhttp3.Call updateEmployeeBalanceCall(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffPoliciesUpdateEmployeeBalanceRequest;

        // create path and map variables
        String localVarPath = "/v1/time_off_policies/{time_off_policy_uuid}/balance"
            .replace("{" + "time_off_policy_uuid" + "}", localVarApiClient.escapeString(timeOffPolicyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeBalanceValidateBeforeCall(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffPolicyUuid' is set
        if (timeOffPolicyUuid == null) {
            throw new ApiException("Missing the required parameter 'timeOffPolicyUuid' when calling updateEmployeeBalance(Async)");
        }

        return updateEmployeeBalanceCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdateEmployeeBalanceRequest, _callback);

    }


    private ApiResponse<TimeOffPolicy> updateEmployeeBalanceWithHttpInfo(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeBalanceValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdateEmployeeBalanceRequest, null);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmployeeBalanceAsync(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest, final ApiCallback<TimeOffPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeBalanceValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdateEmployeeBalanceRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeBalanceRequestBuilder {
        private final String timeOffPolicyUuid;
        private List<TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner> employees;
        private String xGustoAPIVersion;

        private UpdateEmployeeBalanceRequestBuilder(String timeOffPolicyUuid) {
            this.timeOffPolicyUuid = timeOffPolicyUuid;
        }

        /**
         * Set employees
         * @param employees  (optional)
         * @return UpdateEmployeeBalanceRequestBuilder
         */
        public UpdateEmployeeBalanceRequestBuilder employees(List<TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateEmployeeBalanceRequestBuilder
         */
        public UpdateEmployeeBalanceRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateEmployeeBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest = buildBodyParams();
            return updateEmployeeBalanceCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdateEmployeeBalanceRequest, _callback);
        }

        private TimeOffPoliciesUpdateEmployeeBalanceRequest buildBodyParams() {
            TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest = new TimeOffPoliciesUpdateEmployeeBalanceRequest();
            timeOffPoliciesUpdateEmployeeBalanceRequest.employees(this.employees);
            return timeOffPoliciesUpdateEmployeeBalanceRequest;
        }

        /**
         * Execute updateEmployeeBalance request
         * @return TimeOffPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffPolicy execute() throws ApiException {
            TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest = buildBodyParams();
            ApiResponse<TimeOffPolicy> localVarResp = updateEmployeeBalanceWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdateEmployeeBalanceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmployeeBalance request with HTTP info returned
         * @return ApiResponse&lt;TimeOffPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffPolicy> executeWithHttpInfo() throws ApiException {
            TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest = buildBodyParams();
            return updateEmployeeBalanceWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdateEmployeeBalanceRequest);
        }

        /**
         * Execute updateEmployeeBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffPolicy> _callback) throws ApiException {
            TimeOffPoliciesUpdateEmployeeBalanceRequest timeOffPoliciesUpdateEmployeeBalanceRequest = buildBodyParams();
            return updateEmployeeBalanceAsync(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdateEmployeeBalanceRequest, _callback);
        }
    }

    /**
     * Update employee time off hour balances
     * Updates time off hours balances for employees for a time off policy  scope: &#x60;time_off_policies:write&#x60;
     * @param timeOffPolicyUuid The UUID of the company time off policy (required)
     * @return UpdateEmployeeBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeBalanceRequestBuilder updateEmployeeBalance(String timeOffPolicyUuid) throws IllegalArgumentException {
        if (timeOffPolicyUuid == null) throw new IllegalArgumentException("\"timeOffPolicyUuid\" is required but got null");
            

        return new UpdateEmployeeBalanceRequestBuilder(timeOffPolicyUuid);
    }
    private okhttp3.Call updatePolicyCall(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffPoliciesUpdatePolicyRequest;

        // create path and map variables
        String localVarPath = "/v1/time_off_policies/{time_off_policy_uuid}"
            .replace("{" + "time_off_policy_uuid" + "}", localVarApiClient.escapeString(timeOffPolicyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyValidateBeforeCall(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffPolicyUuid' is set
        if (timeOffPolicyUuid == null) {
            throw new ApiException("Missing the required parameter 'timeOffPolicyUuid' when calling updatePolicy(Async)");
        }

        return updatePolicyCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdatePolicyRequest, _callback);

    }


    private ApiResponse<TimeOffPolicy> updatePolicyWithHttpInfo(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicyAsync(String timeOffPolicyUuid, String xGustoAPIVersion, TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest, final ApiCallback<TimeOffPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOffPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePolicyRequestBuilder {
        private final String timeOffPolicyUuid;
        private String name;
        private String accrualMethod;
        private Float accrualRate;
        private Float accrualRateUnit;
        private Boolean paidOutOnTermination;
        private Integer accrualWaitingPeriodDays;
        private Float carryoverLimitHours;
        private Float maxAccrualHoursPerYear;
        private Float maxHours;
        private String xGustoAPIVersion;

        private UpdatePolicyRequestBuilder(String timeOffPolicyUuid) {
            this.timeOffPolicyUuid = timeOffPolicyUuid;
        }

        /**
         * Set name
         * @param name Name of the time off policy (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set accrualMethod
         * @param accrualMethod Accrual method of the time off policy (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder accrualMethod(String accrualMethod) {
            this.accrualMethod = accrualMethod;
            return this;
        }
        
        /**
         * Set accrualRate
         * @param accrualRate The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. \\\&quot;40.0\\\&quot;. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder accrualRate(Float accrualRate) {
            this.accrualRate = accrualRate;
            return this;
        }
        
        /**
         * Set accrualRateUnit
         * @param accrualRateUnit The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. \\\&quot;40.0\\\&quot;. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder accrualRateUnit(Float accrualRateUnit) {
            this.accrualRateUnit = accrualRateUnit;
            return this;
        }
        
        /**
         * Set paidOutOnTermination
         * @param paidOutOnTermination Boolean representing if an employees accrued time off hours will be paid out on termination (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder paidOutOnTermination(Boolean paidOutOnTermination) {
            this.paidOutOnTermination = paidOutOnTermination;
            return this;
        }
        
        /**
         * Set accrualWaitingPeriodDays
         * @param accrualWaitingPeriodDays Number of days before an employee on the policy will begin accruing time off hours (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder accrualWaitingPeriodDays(Integer accrualWaitingPeriodDays) {
            this.accrualWaitingPeriodDays = accrualWaitingPeriodDays;
            return this;
        }
        
        /**
         * Set carryoverLimitHours
         * @param carryoverLimitHours The max number of hours and employee can carryover from one year to the next (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder carryoverLimitHours(Float carryoverLimitHours) {
            this.carryoverLimitHours = carryoverLimitHours;
            return this;
        }
        
        /**
         * Set maxAccrualHoursPerYear
         * @param maxAccrualHoursPerYear The max number of hours and employee can accrue in a year (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder maxAccrualHoursPerYear(Float maxAccrualHoursPerYear) {
            this.maxAccrualHoursPerYear = maxAccrualHoursPerYear;
            return this;
        }
        
        /**
         * Set maxHours
         * @param maxHours The max number of hours an employee can accrue (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder maxHours(Float maxHours) {
            this.maxHours = maxHours;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updatePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyCall(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdatePolicyRequest, _callback);
        }

        private TimeOffPoliciesUpdatePolicyRequest buildBodyParams() {
            TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest = new TimeOffPoliciesUpdatePolicyRequest();
            timeOffPoliciesUpdatePolicyRequest.name(this.name);
            if (this.accrualMethod != null)
            timeOffPoliciesUpdatePolicyRequest.accrualMethod(TimeOffPoliciesUpdatePolicyRequest.AccrualMethodEnum.fromValue(this.accrualMethod));
            timeOffPoliciesUpdatePolicyRequest.accrualRate(this.accrualRate);
            timeOffPoliciesUpdatePolicyRequest.accrualRateUnit(this.accrualRateUnit);
            timeOffPoliciesUpdatePolicyRequest.paidOutOnTermination(this.paidOutOnTermination);
            timeOffPoliciesUpdatePolicyRequest.accrualWaitingPeriodDays(this.accrualWaitingPeriodDays);
            timeOffPoliciesUpdatePolicyRequest.carryoverLimitHours(this.carryoverLimitHours);
            timeOffPoliciesUpdatePolicyRequest.maxAccrualHoursPerYear(this.maxAccrualHoursPerYear);
            timeOffPoliciesUpdatePolicyRequest.maxHours(this.maxHours);
            return timeOffPoliciesUpdatePolicyRequest;
        }

        /**
         * Execute updatePolicy request
         * @return TimeOffPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffPolicy execute() throws ApiException {
            TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest = buildBodyParams();
            ApiResponse<TimeOffPolicy> localVarResp = updatePolicyWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdatePolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePolicy request with HTTP info returned
         * @return ApiResponse&lt;TimeOffPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffPolicy> executeWithHttpInfo() throws ApiException {
            TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyWithHttpInfo(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdatePolicyRequest);
        }

        /**
         * Execute updatePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffPolicy> _callback) throws ApiException {
            TimeOffPoliciesUpdatePolicyRequest timeOffPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyAsync(timeOffPolicyUuid, xGustoAPIVersion, timeOffPoliciesUpdatePolicyRequest, _callback);
        }
    }

    /**
     * Update a time off policy
     * Update a time off policy  scope: &#x60;time_off_policies:write&#x60;
     * @param timeOffPolicyUuid The UUID of the company time off policy (required)
     * @return UpdatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePolicyRequestBuilder updatePolicy(String timeOffPolicyUuid) throws IllegalArgumentException {
        if (timeOffPolicyUuid == null) throw new IllegalArgumentException("\"timeOffPolicyUuid\" is required but got null");
            

        return new UpdatePolicyRequestBuilder(timeOffPolicyUuid);
    }
}
