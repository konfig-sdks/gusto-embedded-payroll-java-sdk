/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Admin;
import com.konfigthis.client.model.CompaniesAcceptTermsOfServiceRequest;
import com.konfigthis.client.model.CompaniesAcceptTermsOfServiceResponse;
import com.konfigthis.client.model.CompaniesCreateAdminRequest;
import com.konfigthis.client.model.CompaniesCreatePartnerManagedCompanyRequest;
import com.konfigthis.client.model.CompaniesCreatePartnerManagedCompanyRequestCompany;
import com.konfigthis.client.model.CompaniesCreatePartnerManagedCompanyRequestUser;
import com.konfigthis.client.model.CompaniesCreatePartnerManagedCompanyResponse;
import com.konfigthis.client.model.CompaniesGetCustomFieldsResponse;
import com.konfigthis.client.model.CompaniesGetTermsOfServiceStatusRequest;
import com.konfigthis.client.model.CompaniesGetTermsOfServiceStatusResponse;
import com.konfigthis.client.model.CompaniesMigrateToEmbeddedPayrollRequest;
import com.konfigthis.client.model.CompaniesMigrateToEmbeddedPayrollResponse;
import com.konfigthis.client.model.Company;
import com.konfigthis.client.model.CompanyOnboardingStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompaniesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompaniesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompaniesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call acceptTermsOfServiceCall(String companyUuid, String xGustoAPIVersion, CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companiesAcceptTermsOfServiceRequest;

        // create path and map variables
        String localVarPath = "/v1/partner_managed_companies/{company_uuid}/accept_terms_of_service"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptTermsOfServiceValidateBeforeCall(String companyUuid, String xGustoAPIVersion, CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling acceptTermsOfService(Async)");
        }

        return acceptTermsOfServiceCall(companyUuid, xGustoAPIVersion, companiesAcceptTermsOfServiceRequest, _callback);

    }


    private ApiResponse<CompaniesAcceptTermsOfServiceResponse> acceptTermsOfServiceWithHttpInfo(String companyUuid, String xGustoAPIVersion, CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptTermsOfServiceValidateBeforeCall(companyUuid, xGustoAPIVersion, companiesAcceptTermsOfServiceRequest, null);
        Type localVarReturnType = new TypeToken<CompaniesAcceptTermsOfServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call acceptTermsOfServiceAsync(String companyUuid, String xGustoAPIVersion, CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest, final ApiCallback<CompaniesAcceptTermsOfServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptTermsOfServiceValidateBeforeCall(companyUuid, xGustoAPIVersion, companiesAcceptTermsOfServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<CompaniesAcceptTermsOfServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AcceptTermsOfServiceRequestBuilder {
        private final String email;
        private final String ipAddress;
        private final String externalUserId;
        private final String companyUuid;
        private String xGustoAPIVersion;

        private AcceptTermsOfServiceRequestBuilder(String email, String ipAddress, String externalUserId, String companyUuid) {
            this.email = email;
            this.ipAddress = ipAddress;
            this.externalUserId = externalUserId;
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return AcceptTermsOfServiceRequestBuilder
         */
        public AcceptTermsOfServiceRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for acceptTermsOfService
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest = buildBodyParams();
            return acceptTermsOfServiceCall(companyUuid, xGustoAPIVersion, companiesAcceptTermsOfServiceRequest, _callback);
        }

        private CompaniesAcceptTermsOfServiceRequest buildBodyParams() {
            CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest = new CompaniesAcceptTermsOfServiceRequest();
            companiesAcceptTermsOfServiceRequest.email(this.email);
            companiesAcceptTermsOfServiceRequest.ipAddress(this.ipAddress);
            companiesAcceptTermsOfServiceRequest.externalUserId(this.externalUserId);
            return companiesAcceptTermsOfServiceRequest;
        }

        /**
         * Execute acceptTermsOfService request
         * @return CompaniesAcceptTermsOfServiceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesAcceptTermsOfServiceResponse execute() throws ApiException {
            CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest = buildBodyParams();
            ApiResponse<CompaniesAcceptTermsOfServiceResponse> localVarResp = acceptTermsOfServiceWithHttpInfo(companyUuid, xGustoAPIVersion, companiesAcceptTermsOfServiceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute acceptTermsOfService request with HTTP info returned
         * @return ApiResponse&lt;CompaniesAcceptTermsOfServiceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesAcceptTermsOfServiceResponse> executeWithHttpInfo() throws ApiException {
            CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest = buildBodyParams();
            return acceptTermsOfServiceWithHttpInfo(companyUuid, xGustoAPIVersion, companiesAcceptTermsOfServiceRequest);
        }

        /**
         * Execute acceptTermsOfService request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesAcceptTermsOfServiceResponse> _callback) throws ApiException {
            CompaniesAcceptTermsOfServiceRequest companiesAcceptTermsOfServiceRequest = buildBodyParams();
            return acceptTermsOfServiceAsync(companyUuid, xGustoAPIVersion, companiesAcceptTermsOfServiceRequest, _callback);
        }
    }

    /**
     * Accept terms of service for a company user
     * Accept the Gusto Embedded Payroll&#39;s [Terms of Service](https://flows.gusto.com/terms). The user must have a role in the company in order to accept the Terms of Service.  scope: &#x60;terms_of_services:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return AcceptTermsOfServiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public AcceptTermsOfServiceRequestBuilder acceptTermsOfService(String email, String ipAddress, String externalUserId, String companyUuid) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (ipAddress == null) throw new IllegalArgumentException("\"ipAddress\" is required but got null");
            

        if (externalUserId == null) throw new IllegalArgumentException("\"externalUserId\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new AcceptTermsOfServiceRequestBuilder(email, ipAddress, externalUserId, companyUuid);
    }
    private okhttp3.Call createAdminCall(String companyId, String xGustoAPIVersion, CompaniesCreateAdminRequest companiesCreateAdminRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companiesCreateAdminRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/admins"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdminValidateBeforeCall(String companyId, String xGustoAPIVersion, CompaniesCreateAdminRequest companiesCreateAdminRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createAdmin(Async)");
        }

        return createAdminCall(companyId, xGustoAPIVersion, companiesCreateAdminRequest, _callback);

    }


    private ApiResponse<Admin> createAdminWithHttpInfo(String companyId, String xGustoAPIVersion, CompaniesCreateAdminRequest companiesCreateAdminRequest) throws ApiException {
        okhttp3.Call localVarCall = createAdminValidateBeforeCall(companyId, xGustoAPIVersion, companiesCreateAdminRequest, null);
        Type localVarReturnType = new TypeToken<Admin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAdminAsync(String companyId, String xGustoAPIVersion, CompaniesCreateAdminRequest companiesCreateAdminRequest, final ApiCallback<Admin> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdminValidateBeforeCall(companyId, xGustoAPIVersion, companiesCreateAdminRequest, _callback);
        Type localVarReturnType = new TypeToken<Admin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAdminRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String email;
        private final String companyId;
        private String xGustoAPIVersion;

        private CreateAdminRequestBuilder(String firstName, String lastName, String email, String companyId) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateAdminRequestBuilder
         */
        public CreateAdminRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createAdmin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompaniesCreateAdminRequest companiesCreateAdminRequest = buildBodyParams();
            return createAdminCall(companyId, xGustoAPIVersion, companiesCreateAdminRequest, _callback);
        }

        private CompaniesCreateAdminRequest buildBodyParams() {
            CompaniesCreateAdminRequest companiesCreateAdminRequest = new CompaniesCreateAdminRequest();
            companiesCreateAdminRequest.firstName(this.firstName);
            companiesCreateAdminRequest.lastName(this.lastName);
            companiesCreateAdminRequest.email(this.email);
            return companiesCreateAdminRequest;
        }

        /**
         * Execute createAdmin request
         * @return Admin
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Admin execute() throws ApiException {
            CompaniesCreateAdminRequest companiesCreateAdminRequest = buildBodyParams();
            ApiResponse<Admin> localVarResp = createAdminWithHttpInfo(companyId, xGustoAPIVersion, companiesCreateAdminRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAdmin request with HTTP info returned
         * @return ApiResponse&lt;Admin&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Admin> executeWithHttpInfo() throws ApiException {
            CompaniesCreateAdminRequest companiesCreateAdminRequest = buildBodyParams();
            return createAdminWithHttpInfo(companyId, xGustoAPIVersion, companiesCreateAdminRequest);
        }

        /**
         * Execute createAdmin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Admin> _callback) throws ApiException {
            CompaniesCreateAdminRequest companiesCreateAdminRequest = buildBodyParams();
            return createAdminAsync(companyId, xGustoAPIVersion, companiesCreateAdminRequest, _callback);
        }
    }

    /**
     * Create an admin for the company
     * Creates a new admin for a company. If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.  scope: &#x60;company_admin:write&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateAdminRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateAdminRequestBuilder createAdmin(String firstName, String lastName, String email, String companyId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateAdminRequestBuilder(firstName, lastName, email, companyId);
    }
    private okhttp3.Call createPartnerManagedCompanyCall(String xGustoAPIVersion, CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companiesCreatePartnerManagedCompanyRequest;

        // create path and map variables
        String localVarPath = "/v1/partner_managed_companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPartnerManagedCompanyValidateBeforeCall(String xGustoAPIVersion, CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest, final ApiCallback _callback) throws ApiException {
        return createPartnerManagedCompanyCall(xGustoAPIVersion, companiesCreatePartnerManagedCompanyRequest, _callback);

    }


    private ApiResponse<CompaniesCreatePartnerManagedCompanyResponse> createPartnerManagedCompanyWithHttpInfo(String xGustoAPIVersion, CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest) throws ApiException {
        okhttp3.Call localVarCall = createPartnerManagedCompanyValidateBeforeCall(xGustoAPIVersion, companiesCreatePartnerManagedCompanyRequest, null);
        Type localVarReturnType = new TypeToken<CompaniesCreatePartnerManagedCompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPartnerManagedCompanyAsync(String xGustoAPIVersion, CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest, final ApiCallback<CompaniesCreatePartnerManagedCompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPartnerManagedCompanyValidateBeforeCall(xGustoAPIVersion, companiesCreatePartnerManagedCompanyRequest, _callback);
        Type localVarReturnType = new TypeToken<CompaniesCreatePartnerManagedCompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePartnerManagedCompanyRequestBuilder {
        private final CompaniesCreatePartnerManagedCompanyRequestUser user;
        private final CompaniesCreatePartnerManagedCompanyRequestCompany company;
        private String xGustoAPIVersion;

        private CreatePartnerManagedCompanyRequestBuilder(CompaniesCreatePartnerManagedCompanyRequestUser user, CompaniesCreatePartnerManagedCompanyRequestCompany company) {
            this.user = user;
            this.company = company;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreatePartnerManagedCompanyRequestBuilder
         */
        public CreatePartnerManagedCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createPartnerManagedCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authorization information is missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest = buildBodyParams();
            return createPartnerManagedCompanyCall(xGustoAPIVersion, companiesCreatePartnerManagedCompanyRequest, _callback);
        }

        private CompaniesCreatePartnerManagedCompanyRequest buildBodyParams() {
            CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest = new CompaniesCreatePartnerManagedCompanyRequest();
            companiesCreatePartnerManagedCompanyRequest.user(this.user);
            companiesCreatePartnerManagedCompanyRequest.company(this.company);
            return companiesCreatePartnerManagedCompanyRequest;
        }

        /**
         * Execute createPartnerManagedCompany request
         * @return CompaniesCreatePartnerManagedCompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authorization information is missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesCreatePartnerManagedCompanyResponse execute() throws ApiException {
            CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest = buildBodyParams();
            ApiResponse<CompaniesCreatePartnerManagedCompanyResponse> localVarResp = createPartnerManagedCompanyWithHttpInfo(xGustoAPIVersion, companiesCreatePartnerManagedCompanyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPartnerManagedCompany request with HTTP info returned
         * @return ApiResponse&lt;CompaniesCreatePartnerManagedCompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authorization information is missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesCreatePartnerManagedCompanyResponse> executeWithHttpInfo() throws ApiException {
            CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest = buildBodyParams();
            return createPartnerManagedCompanyWithHttpInfo(xGustoAPIVersion, companiesCreatePartnerManagedCompanyRequest);
        }

        /**
         * Execute createPartnerManagedCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authorization information is missing or invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesCreatePartnerManagedCompanyResponse> _callback) throws ApiException {
            CompaniesCreatePartnerManagedCompanyRequest companiesCreatePartnerManagedCompanyRequest = buildBodyParams();
            return createPartnerManagedCompanyAsync(xGustoAPIVersion, companiesCreatePartnerManagedCompanyRequest, _callback);
        }
    }

    /**
     * Create a partner managed company
     * Create a partner managed company. When you successfully call the API, it does the following: * Creates a new company in Gusto * Creates a new user using the provided email if the user does not already exist. * Makes the user the primary payroll administrator of the new company.  In response, you will receive oauth access tokens for the created company.  IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.  &gt; 📘 Token Authentication &gt; &gt; this endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)
     * @return CreatePartnerManagedCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization information is missing or invalid. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePartnerManagedCompanyRequestBuilder createPartnerManagedCompany(CompaniesCreatePartnerManagedCompanyRequestUser user, CompaniesCreatePartnerManagedCompanyRequestCompany company) throws IllegalArgumentException {
        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
        if (company == null) throw new IllegalArgumentException("\"company\" is required but got null");
        return new CreatePartnerManagedCompanyRequestBuilder(user, company);
    }
    private okhttp3.Call finishOnboardingCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/finish_onboarding"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finishOnboardingValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling finishOnboarding(Async)");
        }

        return finishOnboardingCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<CompanyOnboardingStatus> finishOnboardingWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = finishOnboardingValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<CompanyOnboardingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call finishOnboardingAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<CompanyOnboardingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = finishOnboardingValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<CompanyOnboardingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FinishOnboardingRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private FinishOnboardingRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return FinishOnboardingRequestBuilder
         */
        public FinishOnboardingRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for finishOnboarding
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return finishOnboardingCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute finishOnboarding request
         * @return CompanyOnboardingStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyOnboardingStatus execute() throws ApiException {
            ApiResponse<CompanyOnboardingStatus> localVarResp = finishOnboardingWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute finishOnboarding request with HTTP info returned
         * @return ApiResponse&lt;CompanyOnboardingStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyOnboardingStatus> executeWithHttpInfo() throws ApiException {
            return finishOnboardingWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute finishOnboarding request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyOnboardingStatus> _callback) throws ApiException {
            return finishOnboardingAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Finish company onboarding
     * Finalize a given company&#39;s onboarding process.  ### Approve a company in demo After a company is finished onboarding, Gusto requires an additional step to review and approve that company. In production environments, this step is required for risk-analysis purposes.  We provide the endpoint &#x60;PUT &#39;/v1/companies/{company_uuid}/approve&#39;&#x60; to facilitate company approvals in the demo environment.  &#x60;&#x60;&#x60;shell PUT &#39;/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve&#39;  # Response: Company object, with company_status: &#39;Approved&#39; &#x60;&#x60;&#x60;  scope: &#x60;companies:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return FinishOnboardingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public FinishOnboardingRequestBuilder finishOnboarding(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new FinishOnboardingRequestBuilder(companyUuid);
    }
    private okhttp3.Call getAllAdminsCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/admins"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAdminsValidateBeforeCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAllAdmins(Async)");
        }

        return getAllAdminsCall(companyId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Admin>> getAllAdminsWithHttpInfo(String companyId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllAdminsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Admin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAdminsAsync(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<List<Admin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAdminsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Admin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAdminsRequestBuilder {
        private final String companyId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetAllAdminsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetAllAdminsRequestBuilder
         */
        public GetAllAdminsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetAllAdminsRequestBuilder
         */
        public GetAllAdminsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllAdminsRequestBuilder
         */
        public GetAllAdminsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAllAdmins
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAdminsCall(companyId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAllAdmins request
         * @return List&lt;Admin&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Admin> execute() throws ApiException {
            ApiResponse<List<Admin>> localVarResp = getAllAdminsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAdmins request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Admin&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Admin>> executeWithHttpInfo() throws ApiException {
            return getAllAdminsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getAllAdmins request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Admin>> _callback) throws ApiException {
            return getAllAdminsAsync(companyId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all the admins at a company
     * Returns a list of all the admins at a company  scope: &#x60;company_admin:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetAllAdminsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAdminsRequestBuilder getAllAdmins(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAllAdminsRequestBuilder(companyId);
    }
    private okhttp3.Call getCompanyCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyValidateBeforeCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompany(Async)");
        }

        return getCompanyCall(companyId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Company> getCompanyWithHttpInfo(String companyId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCompanyValidateBeforeCall(companyId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyAsync(String companyId, String xGustoAPIVersion, final ApiCallback<Company> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyValidateBeforeCall(companyId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyRequestBuilder {
        private final String companyId;
        private String xGustoAPIVersion;

        private GetCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompanyRequestBuilder
         */
        public GetCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyCall(companyId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCompany request
         * @return Company
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Company execute() throws ApiException {
            ApiResponse<Company> localVarResp = getCompanyWithHttpInfo(companyId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompany request with HTTP info returned
         * @return ApiResponse&lt;Company&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Company> executeWithHttpInfo() throws ApiException {
            return getCompanyWithHttpInfo(companyId, xGustoAPIVersion);
        }

        /**
         * Execute getCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Company> _callback) throws ApiException {
            return getCompanyAsync(companyId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a company
     * Get a company.          The employees:read scope is required to return home_address and non-work locations.          The company_admin:read scope is required to return primary_payroll_admin.          The signatories:read scope is required to return primary_signatory.           scope: &#x60;companies:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyRequestBuilder getCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCompanyRequestBuilder(companyId);
    }
    private okhttp3.Call getCustomFieldsCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/custom_fields"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsValidateBeforeCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCustomFields(Async)");
        }

        return getCustomFieldsCall(companyId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<CompaniesGetCustomFieldsResponse> getCustomFieldsWithHttpInfo(String companyId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<CompaniesGetCustomFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldsAsync(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<CompaniesGetCustomFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<CompaniesGetCustomFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldsRequestBuilder {
        private final String companyId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetCustomFieldsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetCustomFieldsRequestBuilder
         */
        public GetCustomFieldsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetCustomFieldsRequestBuilder
         */
        public GetCustomFieldsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCustomFieldsRequestBuilder
         */
        public GetCustomFieldsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldsCall(companyId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCustomFields request
         * @return CompaniesGetCustomFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesGetCustomFieldsResponse execute() throws ApiException {
            ApiResponse<CompaniesGetCustomFieldsResponse> localVarResp = getCustomFieldsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFields request with HTTP info returned
         * @return ApiResponse&lt;CompaniesGetCustomFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesGetCustomFieldsResponse> executeWithHttpInfo() throws ApiException {
            return getCustomFieldsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesGetCustomFieldsResponse> _callback) throws ApiException {
            return getCustomFieldsAsync(companyId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get the custom fields of a company
     * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company  scope: &#x60;companies:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsRequestBuilder getCustomFields(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCustomFieldsRequestBuilder(companyId);
    }
    private okhttp3.Call getOnboardingStatusCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/onboarding_status"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnboardingStatusValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getOnboardingStatus(Async)");
        }

        return getOnboardingStatusCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<CompanyOnboardingStatus> getOnboardingStatusWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getOnboardingStatusValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<CompanyOnboardingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOnboardingStatusAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<CompanyOnboardingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOnboardingStatusValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<CompanyOnboardingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOnboardingStatusRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetOnboardingStatusRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetOnboardingStatusRequestBuilder
         */
        public GetOnboardingStatusRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getOnboardingStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOnboardingStatusCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getOnboardingStatus request
         * @return CompanyOnboardingStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyOnboardingStatus execute() throws ApiException {
            ApiResponse<CompanyOnboardingStatus> localVarResp = getOnboardingStatusWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOnboardingStatus request with HTTP info returned
         * @return ApiResponse&lt;CompanyOnboardingStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyOnboardingStatus> executeWithHttpInfo() throws ApiException {
            return getOnboardingStatusWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getOnboardingStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyOnboardingStatus> _callback) throws ApiException {
            return getOnboardingStatusAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get the company&#39;s onboarding status
     * Get company&#39;s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: &#x60;company_onboarding_status:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetOnboardingStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetOnboardingStatusRequestBuilder getOnboardingStatus(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetOnboardingStatusRequestBuilder(companyUuid);
    }
    private okhttp3.Call getTermsOfServiceStatusCall(String companyUuid, String xGustoAPIVersion, CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companiesGetTermsOfServiceStatusRequest;

        // create path and map variables
        String localVarPath = "/v1/partner_managed_companies/{company_uuid}/retrieve_terms_of_service"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTermsOfServiceStatusValidateBeforeCall(String companyUuid, String xGustoAPIVersion, CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getTermsOfServiceStatus(Async)");
        }

        return getTermsOfServiceStatusCall(companyUuid, xGustoAPIVersion, companiesGetTermsOfServiceStatusRequest, _callback);

    }


    private ApiResponse<CompaniesGetTermsOfServiceStatusResponse> getTermsOfServiceStatusWithHttpInfo(String companyUuid, String xGustoAPIVersion, CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = getTermsOfServiceStatusValidateBeforeCall(companyUuid, xGustoAPIVersion, companiesGetTermsOfServiceStatusRequest, null);
        Type localVarReturnType = new TypeToken<CompaniesGetTermsOfServiceStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTermsOfServiceStatusAsync(String companyUuid, String xGustoAPIVersion, CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest, final ApiCallback<CompaniesGetTermsOfServiceStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTermsOfServiceStatusValidateBeforeCall(companyUuid, xGustoAPIVersion, companiesGetTermsOfServiceStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<CompaniesGetTermsOfServiceStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTermsOfServiceStatusRequestBuilder {
        private final String email;
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetTermsOfServiceStatusRequestBuilder(String email, String companyUuid) {
            this.email = email;
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetTermsOfServiceStatusRequestBuilder
         */
        public GetTermsOfServiceStatusRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getTermsOfServiceStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest = buildBodyParams();
            return getTermsOfServiceStatusCall(companyUuid, xGustoAPIVersion, companiesGetTermsOfServiceStatusRequest, _callback);
        }

        private CompaniesGetTermsOfServiceStatusRequest buildBodyParams() {
            CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest = new CompaniesGetTermsOfServiceStatusRequest();
            companiesGetTermsOfServiceStatusRequest.email(this.email);
            return companiesGetTermsOfServiceStatusRequest;
        }

        /**
         * Execute getTermsOfServiceStatus request
         * @return CompaniesGetTermsOfServiceStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesGetTermsOfServiceStatusResponse execute() throws ApiException {
            CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest = buildBodyParams();
            ApiResponse<CompaniesGetTermsOfServiceStatusResponse> localVarResp = getTermsOfServiceStatusWithHttpInfo(companyUuid, xGustoAPIVersion, companiesGetTermsOfServiceStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTermsOfServiceStatus request with HTTP info returned
         * @return ApiResponse&lt;CompaniesGetTermsOfServiceStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesGetTermsOfServiceStatusResponse> executeWithHttpInfo() throws ApiException {
            CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest = buildBodyParams();
            return getTermsOfServiceStatusWithHttpInfo(companyUuid, xGustoAPIVersion, companiesGetTermsOfServiceStatusRequest);
        }

        /**
         * Execute getTermsOfServiceStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesGetTermsOfServiceStatusResponse> _callback) throws ApiException {
            CompaniesGetTermsOfServiceStatusRequest companiesGetTermsOfServiceStatusRequest = buildBodyParams();
            return getTermsOfServiceStatusAsync(companyUuid, xGustoAPIVersion, companiesGetTermsOfServiceStatusRequest, _callback);
        }
    }

    /**
     * Retrieve terms of service status for a company user
     * Retrieve the user acceptance status of the Gusto Embedded Payroll&#39;s [Terms of Service](https://flows.gusto.com/terms).  scope: &#x60;terms_of_services:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetTermsOfServiceStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetTermsOfServiceStatusRequestBuilder getTermsOfServiceStatus(String email, String companyUuid) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetTermsOfServiceStatusRequestBuilder(email, companyUuid);
    }
    private okhttp3.Call migrateToEmbeddedPayrollCall(String companyUuid, String xGustoAPIVersion, CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companiesMigrateToEmbeddedPayrollRequest;

        // create path and map variables
        String localVarPath = "/v1/partner_managed_companies/{company_uuid}/migrate"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrateToEmbeddedPayrollValidateBeforeCall(String companyUuid, String xGustoAPIVersion, CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling migrateToEmbeddedPayroll(Async)");
        }

        return migrateToEmbeddedPayrollCall(companyUuid, xGustoAPIVersion, companiesMigrateToEmbeddedPayrollRequest, _callback);

    }


    private ApiResponse<CompaniesMigrateToEmbeddedPayrollResponse> migrateToEmbeddedPayrollWithHttpInfo(String companyUuid, String xGustoAPIVersion, CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest) throws ApiException {
        okhttp3.Call localVarCall = migrateToEmbeddedPayrollValidateBeforeCall(companyUuid, xGustoAPIVersion, companiesMigrateToEmbeddedPayrollRequest, null);
        Type localVarReturnType = new TypeToken<CompaniesMigrateToEmbeddedPayrollResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call migrateToEmbeddedPayrollAsync(String companyUuid, String xGustoAPIVersion, CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest, final ApiCallback<CompaniesMigrateToEmbeddedPayrollResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrateToEmbeddedPayrollValidateBeforeCall(companyUuid, xGustoAPIVersion, companiesMigrateToEmbeddedPayrollRequest, _callback);
        Type localVarReturnType = new TypeToken<CompaniesMigrateToEmbeddedPayrollResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MigrateToEmbeddedPayrollRequestBuilder {
        private final String email;
        private final String ipAddress;
        private final String externalUserId;
        private final String companyUuid;
        private String xGustoAPIVersion;

        private MigrateToEmbeddedPayrollRequestBuilder(String email, String ipAddress, String externalUserId, String companyUuid) {
            this.email = email;
            this.ipAddress = ipAddress;
            this.externalUserId = externalUserId;
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return MigrateToEmbeddedPayrollRequestBuilder
         */
        public MigrateToEmbeddedPayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for migrateToEmbeddedPayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest = buildBodyParams();
            return migrateToEmbeddedPayrollCall(companyUuid, xGustoAPIVersion, companiesMigrateToEmbeddedPayrollRequest, _callback);
        }

        private CompaniesMigrateToEmbeddedPayrollRequest buildBodyParams() {
            CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest = new CompaniesMigrateToEmbeddedPayrollRequest();
            companiesMigrateToEmbeddedPayrollRequest.email(this.email);
            companiesMigrateToEmbeddedPayrollRequest.ipAddress(this.ipAddress);
            companiesMigrateToEmbeddedPayrollRequest.externalUserId(this.externalUserId);
            return companiesMigrateToEmbeddedPayrollRequest;
        }

        /**
         * Execute migrateToEmbeddedPayroll request
         * @return CompaniesMigrateToEmbeddedPayrollResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesMigrateToEmbeddedPayrollResponse execute() throws ApiException {
            CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest = buildBodyParams();
            ApiResponse<CompaniesMigrateToEmbeddedPayrollResponse> localVarResp = migrateToEmbeddedPayrollWithHttpInfo(companyUuid, xGustoAPIVersion, companiesMigrateToEmbeddedPayrollRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute migrateToEmbeddedPayroll request with HTTP info returned
         * @return ApiResponse&lt;CompaniesMigrateToEmbeddedPayrollResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesMigrateToEmbeddedPayrollResponse> executeWithHttpInfo() throws ApiException {
            CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest = buildBodyParams();
            return migrateToEmbeddedPayrollWithHttpInfo(companyUuid, xGustoAPIVersion, companiesMigrateToEmbeddedPayrollRequest);
        }

        /**
         * Execute migrateToEmbeddedPayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesMigrateToEmbeddedPayrollResponse> _callback) throws ApiException {
            CompaniesMigrateToEmbeddedPayrollRequest companiesMigrateToEmbeddedPayrollRequest = buildBodyParams();
            return migrateToEmbeddedPayrollAsync(companyUuid, xGustoAPIVersion, companiesMigrateToEmbeddedPayrollRequest, _callback);
        }
    }

    /**
     * Migrate company to embedded payroll
     * Migrate an existing Gusto customer to your embedded payroll product.  To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).  scope: &#x60;partner_managed_companies:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return MigrateToEmbeddedPayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public MigrateToEmbeddedPayrollRequestBuilder migrateToEmbeddedPayroll(String email, String ipAddress, String externalUserId, String companyUuid) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (ipAddress == null) throw new IllegalArgumentException("\"ipAddress\" is required but got null");
            

        if (externalUserId == null) throw new IllegalArgumentException("\"externalUserId\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new MigrateToEmbeddedPayrollRequestBuilder(email, ipAddress, externalUserId, companyUuid);
    }
}
