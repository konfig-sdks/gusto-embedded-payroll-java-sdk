/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BankAccountsCreateFromPlaidTokenRequest;
import com.konfigthis.client.model.BankAccountsCreateVerificationDepositsRequest;
import com.konfigthis.client.model.BankAccountsVerifyMicroDepositsRequest;
import com.konfigthis.client.model.CompanyBankAccount;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BankAccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BankAccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BankAccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFromPlaidTokenCall(String xGustoAPIVersion, BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankAccountsCreateFromPlaidTokenRequest;

        // create path and map variables
        String localVarPath = "/v1/plaid/processor_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFromPlaidTokenValidateBeforeCall(String xGustoAPIVersion, BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest, final ApiCallback _callback) throws ApiException {
        return createFromPlaidTokenCall(xGustoAPIVersion, bankAccountsCreateFromPlaidTokenRequest, _callback);

    }


    private ApiResponse<Object> createFromPlaidTokenWithHttpInfo(String xGustoAPIVersion, BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createFromPlaidTokenValidateBeforeCall(xGustoAPIVersion, bankAccountsCreateFromPlaidTokenRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFromPlaidTokenAsync(String xGustoAPIVersion, BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFromPlaidTokenValidateBeforeCall(xGustoAPIVersion, bankAccountsCreateFromPlaidTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFromPlaidTokenRequestBuilder {
        private final String ownerType;
        private final String ownerId;
        private final String processorToken;
        private String xGustoAPIVersion;

        private CreateFromPlaidTokenRequestBuilder(String ownerType, String ownerId, String processorToken) {
            this.ownerType = ownerType;
            this.ownerId = ownerId;
            this.processorToken = processorToken;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateFromPlaidTokenRequestBuilder
         */
        public CreateFromPlaidTokenRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createFromPlaidToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A JSON object containing bank information </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest = buildBodyParams();
            return createFromPlaidTokenCall(xGustoAPIVersion, bankAccountsCreateFromPlaidTokenRequest, _callback);
        }

        private BankAccountsCreateFromPlaidTokenRequest buildBodyParams() {
            BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest = new BankAccountsCreateFromPlaidTokenRequest();
            if (this.ownerType != null)
            bankAccountsCreateFromPlaidTokenRequest.ownerType(BankAccountsCreateFromPlaidTokenRequest.OwnerTypeEnum.fromValue(this.ownerType));
            bankAccountsCreateFromPlaidTokenRequest.ownerId(this.ownerId);
            bankAccountsCreateFromPlaidTokenRequest.processorToken(this.processorToken);
            return bankAccountsCreateFromPlaidTokenRequest;
        }

        /**
         * Execute createFromPlaidToken request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A JSON object containing bank information </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createFromPlaidTokenWithHttpInfo(xGustoAPIVersion, bankAccountsCreateFromPlaidTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFromPlaidToken request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A JSON object containing bank information </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest = buildBodyParams();
            return createFromPlaidTokenWithHttpInfo(xGustoAPIVersion, bankAccountsCreateFromPlaidTokenRequest);
        }

        /**
         * Execute createFromPlaidToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A JSON object containing bank information </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BankAccountsCreateFromPlaidTokenRequest bankAccountsCreateFromPlaidTokenRequest = buildBodyParams();
            return createFromPlaidTokenAsync(xGustoAPIVersion, bankAccountsCreateFromPlaidTokenRequest, _callback);
        }
    }

    /**
     * Create a bank account from a plaid processor token
     * This endpoint creates a new **verified** bank account by using a plaid processor token to retrieve its information.  scope: &#x60;plaid_processor:write&#x60;  &gt; 📘 &gt; To create a token please use the [plaid api](https://plaid.com/docs/api/processors/#processortokencreate) and select \&quot;gusto\&quot; as processor.  &gt; 🚧 Warning - Company Bank Accounts &gt; &gt; If a default company bank account exists, it will be disabled and the new bank account will replace it as the company&#39;s default funding method.
     * @return CreateFromPlaidTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A JSON object containing bank information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateFromPlaidTokenRequestBuilder createFromPlaidToken(String ownerType, String ownerId, String processorToken) throws IllegalArgumentException {
        if (ownerType == null) throw new IllegalArgumentException("\"ownerType\" is required but got null");
            

        if (ownerId == null) throw new IllegalArgumentException("\"ownerId\" is required but got null");
            

        if (processorToken == null) throw new IllegalArgumentException("\"processorToken\" is required but got null");
            

        return new CreateFromPlaidTokenRequestBuilder(ownerType, ownerId, processorToken);
    }
    private okhttp3.Call createVerificationDepositsCall(String companyId, String xGustoAPIVersion, BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankAccountsCreateVerificationDepositsRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/bank_accounts"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVerificationDepositsValidateBeforeCall(String companyId, String xGustoAPIVersion, BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createVerificationDeposits(Async)");
        }

        return createVerificationDepositsCall(companyId, xGustoAPIVersion, bankAccountsCreateVerificationDepositsRequest, _callback);

    }


    private ApiResponse<CompanyBankAccount> createVerificationDepositsWithHttpInfo(String companyId, String xGustoAPIVersion, BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest) throws ApiException {
        okhttp3.Call localVarCall = createVerificationDepositsValidateBeforeCall(companyId, xGustoAPIVersion, bankAccountsCreateVerificationDepositsRequest, null);
        Type localVarReturnType = new TypeToken<CompanyBankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVerificationDepositsAsync(String companyId, String xGustoAPIVersion, BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest, final ApiCallback<CompanyBankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVerificationDepositsValidateBeforeCall(companyId, xGustoAPIVersion, bankAccountsCreateVerificationDepositsRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyBankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateVerificationDepositsRequestBuilder {
        private final String companyId;
        private String routingNumber;
        private String accountNumber;
        private String accountType;
        private String xGustoAPIVersion;

        private CreateVerificationDepositsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set routingNumber
         * @param routingNumber The bank routing number (optional)
         * @return CreateVerificationDepositsRequestBuilder
         */
        public CreateVerificationDepositsRequestBuilder routingNumber(String routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber The bank account number (optional)
         * @return CreateVerificationDepositsRequestBuilder
         */
        public CreateVerificationDepositsRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType The bank account type (optional)
         * @return CreateVerificationDepositsRequestBuilder
         */
        public CreateVerificationDepositsRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateVerificationDepositsRequestBuilder
         */
        public CreateVerificationDepositsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createVerificationDeposits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest = buildBodyParams();
            return createVerificationDepositsCall(companyId, xGustoAPIVersion, bankAccountsCreateVerificationDepositsRequest, _callback);
        }

        private BankAccountsCreateVerificationDepositsRequest buildBodyParams() {
            BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest = new BankAccountsCreateVerificationDepositsRequest();
            bankAccountsCreateVerificationDepositsRequest.routingNumber(this.routingNumber);
            bankAccountsCreateVerificationDepositsRequest.accountNumber(this.accountNumber);
            if (this.accountType != null)
            bankAccountsCreateVerificationDepositsRequest.accountType(BankAccountsCreateVerificationDepositsRequest.AccountTypeEnum.fromValue(this.accountType));
            return bankAccountsCreateVerificationDepositsRequest;
        }

        /**
         * Execute createVerificationDeposits request
         * @return CompanyBankAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBankAccount execute() throws ApiException {
            BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest = buildBodyParams();
            ApiResponse<CompanyBankAccount> localVarResp = createVerificationDepositsWithHttpInfo(companyId, xGustoAPIVersion, bankAccountsCreateVerificationDepositsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createVerificationDeposits request with HTTP info returned
         * @return ApiResponse&lt;CompanyBankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBankAccount> executeWithHttpInfo() throws ApiException {
            BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest = buildBodyParams();
            return createVerificationDepositsWithHttpInfo(companyId, xGustoAPIVersion, bankAccountsCreateVerificationDepositsRequest);
        }

        /**
         * Execute createVerificationDeposits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBankAccount> _callback) throws ApiException {
            BankAccountsCreateVerificationDepositsRequest bankAccountsCreateVerificationDepositsRequest = buildBodyParams();
            return createVerificationDepositsAsync(companyId, xGustoAPIVersion, bankAccountsCreateVerificationDepositsRequest, _callback);
        }
    }

    /**
     * Create a company bank account
     * This endpoint creates a new company bank account.  Upon being created, two verification deposits are automatically sent to the bank account, and the bank account&#39;s verification_status is &#39;awaiting_deposits&#39;.   When the deposits are successfully transferred, the verification_status changes to &#39;ready_for_verification&#39;, at which point the verify endpoint can be used to verify the bank account. After successful verification, the bank account&#39;s verification_status is &#39;verified&#39;.  scope: &#x60;company_bank_accounts:write&#x60;  &gt; 🚧 Warning &gt; &gt; If a default bank account exists, it will be disabled and the new bank account will replace it as the company&#39;s default funding method.
     * @param companyId The UUID of the company (required)
     * @return CreateVerificationDepositsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateVerificationDepositsRequestBuilder createVerificationDeposits(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateVerificationDepositsRequestBuilder(companyId);
    }
    private okhttp3.Call listCompanyBankAccountsCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/bank_accounts"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyBankAccountsValidateBeforeCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listCompanyBankAccounts(Async)");
        }

        return listCompanyBankAccountsCall(companyId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<CompanyBankAccount>> listCompanyBankAccountsWithHttpInfo(String companyId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listCompanyBankAccountsValidateBeforeCall(companyId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<CompanyBankAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyBankAccountsAsync(String companyId, String xGustoAPIVersion, final ApiCallback<List<CompanyBankAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyBankAccountsValidateBeforeCall(companyId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CompanyBankAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyBankAccountsRequestBuilder {
        private final String companyId;
        private String xGustoAPIVersion;

        private ListCompanyBankAccountsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListCompanyBankAccountsRequestBuilder
         */
        public ListCompanyBankAccountsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listCompanyBankAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyBankAccountsCall(companyId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listCompanyBankAccounts request
         * @return List&lt;CompanyBankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<CompanyBankAccount> execute() throws ApiException {
            ApiResponse<List<CompanyBankAccount>> localVarResp = listCompanyBankAccountsWithHttpInfo(companyId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompanyBankAccounts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CompanyBankAccount&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CompanyBankAccount>> executeWithHttpInfo() throws ApiException {
            return listCompanyBankAccountsWithHttpInfo(companyId, xGustoAPIVersion);
        }

        /**
         * Execute listCompanyBankAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CompanyBankAccount>> _callback) throws ApiException {
            return listCompanyBankAccountsAsync(companyId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all company bank accounts
     * Returns company bank accounts. Currently, we only support a single default bank account per company.  scope: &#x60;company_bank_accounts:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return ListCompanyBankAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyBankAccountsRequestBuilder listCompanyBankAccounts(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListCompanyBankAccountsRequestBuilder(companyId);
    }
    private okhttp3.Call verifyMicroDepositsCall(String bankAccountUuid, String companyId, String xGustoAPIVersion, BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankAccountsVerifyMicroDepositsRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/verify"
            .replace("{" + "bank_account_uuid" + "}", localVarApiClient.escapeString(bankAccountUuid.toString()))
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyMicroDepositsValidateBeforeCall(String bankAccountUuid, String companyId, String xGustoAPIVersion, BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankAccountUuid' is set
        if (bankAccountUuid == null) {
            throw new ApiException("Missing the required parameter 'bankAccountUuid' when calling verifyMicroDeposits(Async)");
        }

        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling verifyMicroDeposits(Async)");
        }

        return verifyMicroDepositsCall(bankAccountUuid, companyId, xGustoAPIVersion, bankAccountsVerifyMicroDepositsRequest, _callback);

    }


    private ApiResponse<CompanyBankAccount> verifyMicroDepositsWithHttpInfo(String bankAccountUuid, String companyId, String xGustoAPIVersion, BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyMicroDepositsValidateBeforeCall(bankAccountUuid, companyId, xGustoAPIVersion, bankAccountsVerifyMicroDepositsRequest, null);
        Type localVarReturnType = new TypeToken<CompanyBankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyMicroDepositsAsync(String bankAccountUuid, String companyId, String xGustoAPIVersion, BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest, final ApiCallback<CompanyBankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyMicroDepositsValidateBeforeCall(bankAccountUuid, companyId, xGustoAPIVersion, bankAccountsVerifyMicroDepositsRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyBankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyMicroDepositsRequestBuilder {
        private final String bankAccountUuid;
        private final String companyId;
        private Double deposit1;
        private Double deposit2;
        private String xGustoAPIVersion;

        private VerifyMicroDepositsRequestBuilder(String bankAccountUuid, String companyId) {
            this.bankAccountUuid = bankAccountUuid;
            this.companyId = companyId;
        }

        /**
         * Set deposit1
         * @param deposit1 The dollar amount of the first micro-deposit (optional)
         * @return VerifyMicroDepositsRequestBuilder
         */
        public VerifyMicroDepositsRequestBuilder deposit1(Double deposit1) {
            this.deposit1 = deposit1;
            return this;
        }
        
        /**
         * Set deposit2
         * @param deposit2 The dollar amount of the second micro-deposit (optional)
         * @return VerifyMicroDepositsRequestBuilder
         */
        public VerifyMicroDepositsRequestBuilder deposit2(Double deposit2) {
            this.deposit2 = deposit2;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return VerifyMicroDepositsRequestBuilder
         */
        public VerifyMicroDepositsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for verifyMicroDeposits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest = buildBodyParams();
            return verifyMicroDepositsCall(bankAccountUuid, companyId, xGustoAPIVersion, bankAccountsVerifyMicroDepositsRequest, _callback);
        }

        private BankAccountsVerifyMicroDepositsRequest buildBodyParams() {
            BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest = new BankAccountsVerifyMicroDepositsRequest();
            bankAccountsVerifyMicroDepositsRequest.deposit1(this.deposit1);
            bankAccountsVerifyMicroDepositsRequest.deposit2(this.deposit2);
            return bankAccountsVerifyMicroDepositsRequest;
        }

        /**
         * Execute verifyMicroDeposits request
         * @return CompanyBankAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBankAccount execute() throws ApiException {
            BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest = buildBodyParams();
            ApiResponse<CompanyBankAccount> localVarResp = verifyMicroDepositsWithHttpInfo(bankAccountUuid, companyId, xGustoAPIVersion, bankAccountsVerifyMicroDepositsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyMicroDeposits request with HTTP info returned
         * @return ApiResponse&lt;CompanyBankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBankAccount> executeWithHttpInfo() throws ApiException {
            BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest = buildBodyParams();
            return verifyMicroDepositsWithHttpInfo(bankAccountUuid, companyId, xGustoAPIVersion, bankAccountsVerifyMicroDepositsRequest);
        }

        /**
         * Execute verifyMicroDeposits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBankAccount> _callback) throws ApiException {
            BankAccountsVerifyMicroDepositsRequest bankAccountsVerifyMicroDepositsRequest = buildBodyParams();
            return verifyMicroDepositsAsync(bankAccountUuid, companyId, xGustoAPIVersion, bankAccountsVerifyMicroDepositsRequest, _callback);
        }
    }

    /**
     * Verify a company bank account
     * Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There&#39;s a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.  ### Bank account verification in demo  We provide the endpoint &#x60;POST &#39;/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits&#39;&#x60; to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.  &#x60;&#x60;&#x60;   POST &#39;/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits&#39;    {     \&quot;deposit_1\&quot;: 0.02,     \&quot;deposit_2\&quot;: 0.42   } &#x60;&#x60;&#x60;  scope: &#x60;company_bank_accounts:write&#x60;
     * @param bankAccountUuid The UUID of the bank account (required)
     * @param companyId The UUID of the company (required)
     * @return VerifyMicroDepositsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public VerifyMicroDepositsRequestBuilder verifyMicroDeposits(String bankAccountUuid, String companyId) throws IllegalArgumentException {
        if (bankAccountUuid == null) throw new IllegalArgumentException("\"bankAccountUuid\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new VerifyMicroDepositsRequestBuilder(bankAccountUuid, companyId);
    }
}
