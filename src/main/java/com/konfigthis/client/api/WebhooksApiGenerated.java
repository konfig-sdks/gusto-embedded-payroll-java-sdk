/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WebhookSubscription;
import com.konfigthis.client.model.WebhooksCreateSubscriptionRequest;
import com.konfigthis.client.model.WebhooksUpdateSubscriptionRequest;
import com.konfigthis.client.model.WebhooksVerifySubscriptionTokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSubscriptionCall(String xGustoAPIVersion, WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksCreateSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v1/webhook_subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubscriptionValidateBeforeCall(String xGustoAPIVersion, WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        return createSubscriptionCall(xGustoAPIVersion, webhooksCreateSubscriptionRequest, _callback);

    }


    private ApiResponse<WebhookSubscription> createSubscriptionWithHttpInfo(String xGustoAPIVersion, WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(xGustoAPIVersion, webhooksCreateSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<WebhookSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSubscriptionAsync(String xGustoAPIVersion, WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest, final ApiCallback<WebhookSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(xGustoAPIVersion, webhooksCreateSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhookSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSubscriptionRequestBuilder {
        private final String url;
        private final List<String> subscriptionTypes;
        private String xGustoAPIVersion;

        private CreateSubscriptionRequestBuilder(String url, List<String> subscriptionTypes) {
            this.url = url;
            this.subscriptionTypes = subscriptionTypes;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateSubscriptionRequestBuilder
         */
        public CreateSubscriptionRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest = buildBodyParams();
            return createSubscriptionCall(xGustoAPIVersion, webhooksCreateSubscriptionRequest, _callback);
        }

        private WebhooksCreateSubscriptionRequest buildBodyParams() {
            WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest = new WebhooksCreateSubscriptionRequest();
            webhooksCreateSubscriptionRequest.url(this.url);
            if (this.subscriptionTypes != null)
            webhooksCreateSubscriptionRequest.subscriptionTypes(WebhooksCreateSubscriptionRequest.SubscriptionTypesEnum.fromValue(this.subscriptionTypes));
            return webhooksCreateSubscriptionRequest;
        }

        /**
         * Execute createSubscription request
         * @return WebhookSubscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public WebhookSubscription execute() throws ApiException {
            WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest = buildBodyParams();
            ApiResponse<WebhookSubscription> localVarResp = createSubscriptionWithHttpInfo(xGustoAPIVersion, webhooksCreateSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSubscription request with HTTP info returned
         * @return ApiResponse&lt;WebhookSubscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookSubscription> executeWithHttpInfo() throws ApiException {
            WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest = buildBodyParams();
            return createSubscriptionWithHttpInfo(xGustoAPIVersion, webhooksCreateSubscriptionRequest);
        }

        /**
         * Execute createSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookSubscription> _callback) throws ApiException {
            WebhooksCreateSubscriptionRequest webhooksCreateSubscriptionRequest = buildBodyParams();
            return createSubscriptionAsync(xGustoAPIVersion, webhooksCreateSubscriptionRequest, _callback);
        }
    }

    /**
     * Create a webhook subscription
     * Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.  &gt; 📘 Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:write&#x60;
     * @return CreateSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateSubscriptionRequestBuilder createSubscription(String url, List<String> subscriptionTypes) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (subscriptionTypes == null) throw new IllegalArgumentException("\"subscriptionTypes\" is required but got null");
        return new CreateSubscriptionRequestBuilder(url, subscriptionTypes);
    }
    private okhttp3.Call deleteSubscriptionByUuidCall(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhook_subscriptions/{webhook_subscription_uuid}"
            .replace("{" + "webhook_subscription_uuid" + "}", localVarApiClient.escapeString(webhookSubscriptionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionByUuidValidateBeforeCall(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookSubscriptionUuid' is set
        if (webhookSubscriptionUuid == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionUuid' when calling deleteSubscriptionByUuid(Async)");
        }

        return deleteSubscriptionByUuidCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteSubscriptionByUuidWithHttpInfo(String webhookSubscriptionUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionByUuidValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSubscriptionByUuidAsync(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionByUuidValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSubscriptionByUuidRequestBuilder {
        private final String webhookSubscriptionUuid;
        private String xGustoAPIVersion;

        private DeleteSubscriptionByUuidRequestBuilder(String webhookSubscriptionUuid) {
            this.webhookSubscriptionUuid = webhookSubscriptionUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteSubscriptionByUuidRequestBuilder
         */
        public DeleteSubscriptionByUuidRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteSubscriptionByUuid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSubscriptionByUuidCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteSubscriptionByUuid request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSubscriptionByUuidWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteSubscriptionByUuid request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSubscriptionByUuidWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteSubscriptionByUuid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSubscriptionByUuidAsync(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a webhook subscription
     * Deletes the Webhook Subscription associated with the provided UUID.  &gt; 📘 Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:write&#x60; 
     * @param webhookSubscriptionUuid The webhook subscription UUID. (required)
     * @return DeleteSubscriptionByUuidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSubscriptionByUuidRequestBuilder deleteSubscriptionByUuid(String webhookSubscriptionUuid) throws IllegalArgumentException {
        if (webhookSubscriptionUuid == null) throw new IllegalArgumentException("\"webhookSubscriptionUuid\" is required but got null");
            

        return new DeleteSubscriptionByUuidRequestBuilder(webhookSubscriptionUuid);
    }
    private okhttp3.Call getSubscriptionCall(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhook_subscriptions/{webhook_subscription_uuid}"
            .replace("{" + "webhook_subscription_uuid" + "}", localVarApiClient.escapeString(webhookSubscriptionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionValidateBeforeCall(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookSubscriptionUuid' is set
        if (webhookSubscriptionUuid == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionUuid' when calling getSubscription(Async)");
        }

        return getSubscriptionCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<WebhookSubscription> getSubscriptionWithHttpInfo(String webhookSubscriptionUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<WebhookSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubscriptionAsync(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback<WebhookSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<WebhookSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSubscriptionRequestBuilder {
        private final String webhookSubscriptionUuid;
        private String xGustoAPIVersion;

        private GetSubscriptionRequestBuilder(String webhookSubscriptionUuid) {
            this.webhookSubscriptionUuid = webhookSubscriptionUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSubscriptionRequestBuilder
         */
        public GetSubscriptionRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubscriptionCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSubscription request
         * @return WebhookSubscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public WebhookSubscription execute() throws ApiException {
            ApiResponse<WebhookSubscription> localVarResp = getSubscriptionWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSubscription request with HTTP info returned
         * @return ApiResponse&lt;WebhookSubscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookSubscription> executeWithHttpInfo() throws ApiException {
            return getSubscriptionWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion);
        }

        /**
         * Execute getSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookSubscription> _callback) throws ApiException {
            return getSubscriptionAsync(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a webhook subscription
     * Returns the Webhook Subscription associated with the provided UUID.  &gt; 📘 Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:read&#x60; 
     * @param webhookSubscriptionUuid The webhook subscription UUID. (required)
     * @return GetSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriptionRequestBuilder getSubscription(String webhookSubscriptionUuid) throws IllegalArgumentException {
        if (webhookSubscriptionUuid == null) throw new IllegalArgumentException("\"webhookSubscriptionUuid\" is required but got null");
            

        return new GetSubscriptionRequestBuilder(webhookSubscriptionUuid);
    }
    private okhttp3.Call listSubscriptionsCall(String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhook_subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscriptionsValidateBeforeCall(String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        return listSubscriptionsCall(xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<WebhookSubscription>> listSubscriptionsWithHttpInfo(String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listSubscriptionsValidateBeforeCall(xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<WebhookSubscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubscriptionsAsync(String xGustoAPIVersion, final ApiCallback<List<WebhookSubscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscriptionsValidateBeforeCall(xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<WebhookSubscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSubscriptionsRequestBuilder {
        private String xGustoAPIVersion;

        private ListSubscriptionsRequestBuilder() {
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListSubscriptionsRequestBuilder
         */
        public ListSubscriptionsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubscriptionsCall(xGustoAPIVersion, _callback);
        }


        /**
         * Execute listSubscriptions request
         * @return List&lt;WebhookSubscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<WebhookSubscription> execute() throws ApiException {
            ApiResponse<List<WebhookSubscription>> localVarResp = listSubscriptionsWithHttpInfo(xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;WebhookSubscription&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<WebhookSubscription>> executeWithHttpInfo() throws ApiException {
            return listSubscriptionsWithHttpInfo(xGustoAPIVersion);
        }

        /**
         * Execute listSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<WebhookSubscription>> _callback) throws ApiException {
            return listSubscriptionsAsync(xGustoAPIVersion, _callback);
        }
    }

    /**
     * List webhook subscriptions
     * Returns all webhook subscriptions associated with the provided Partner API token.  &gt; 📘 Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:read&#x60;
     * @return ListSubscriptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscriptionsRequestBuilder listSubscriptions() throws IllegalArgumentException {
        return new ListSubscriptionsRequestBuilder();
    }
    private okhttp3.Call requestVerificationTokenCall(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token"
            .replace("{" + "webhook_subscription_uuid" + "}", localVarApiClient.escapeString(webhookSubscriptionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestVerificationTokenValidateBeforeCall(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookSubscriptionUuid' is set
        if (webhookSubscriptionUuid == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionUuid' when calling requestVerificationToken(Async)");
        }

        return requestVerificationTokenCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> requestVerificationTokenWithHttpInfo(String webhookSubscriptionUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = requestVerificationTokenValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call requestVerificationTokenAsync(String webhookSubscriptionUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestVerificationTokenValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RequestVerificationTokenRequestBuilder {
        private final String webhookSubscriptionUuid;
        private String xGustoAPIVersion;

        private RequestVerificationTokenRequestBuilder(String webhookSubscriptionUuid) {
            this.webhookSubscriptionUuid = webhookSubscriptionUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return RequestVerificationTokenRequestBuilder
         */
        public RequestVerificationTokenRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for requestVerificationToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No Content. The &#x60;verification_token&#x60; is POSTed to the Subscription URL. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestVerificationTokenCall(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute requestVerificationToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No Content. The &#x60;verification_token&#x60; is POSTed to the Subscription URL. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            requestVerificationTokenWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion);
        }

        /**
         * Execute requestVerificationToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No Content. The &#x60;verification_token&#x60; is POSTed to the Subscription URL. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return requestVerificationTokenWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion);
        }

        /**
         * Execute requestVerificationToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No Content. The &#x60;verification_token&#x60; is POSTed to the Subscription URL. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return requestVerificationTokenAsync(webhookSubscriptionUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Request the webhook subscription verification_token
     * Request that the webhook subscription &#x60;verification_token&#x60; be POSTed to the Subscription URL.  &gt; 📘 Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:read&#x60; 
     * @param webhookSubscriptionUuid The webhook subscription UUID. (required)
     * @return RequestVerificationTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No Content. The &#x60;verification_token&#x60; is POSTed to the Subscription URL. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public RequestVerificationTokenRequestBuilder requestVerificationToken(String webhookSubscriptionUuid) throws IllegalArgumentException {
        if (webhookSubscriptionUuid == null) throw new IllegalArgumentException("\"webhookSubscriptionUuid\" is required but got null");
            

        return new RequestVerificationTokenRequestBuilder(webhookSubscriptionUuid);
    }
    private okhttp3.Call updateSubscriptionCall(String webhookSubscriptionUuid, String xGustoAPIVersion, WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksUpdateSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v1/webhook_subscriptions/{webhook_subscription_uuid}"
            .replace("{" + "webhook_subscription_uuid" + "}", localVarApiClient.escapeString(webhookSubscriptionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(String webhookSubscriptionUuid, String xGustoAPIVersion, WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookSubscriptionUuid' is set
        if (webhookSubscriptionUuid == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionUuid' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(webhookSubscriptionUuid, xGustoAPIVersion, webhooksUpdateSubscriptionRequest, _callback);

    }


    private ApiResponse<WebhookSubscription> updateSubscriptionWithHttpInfo(String webhookSubscriptionUuid, String xGustoAPIVersion, WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, webhooksUpdateSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<WebhookSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSubscriptionAsync(String webhookSubscriptionUuid, String xGustoAPIVersion, WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest, final ApiCallback<WebhookSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, webhooksUpdateSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhookSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSubscriptionRequestBuilder {
        private final List<String> subscriptionTypes;
        private final String webhookSubscriptionUuid;
        private String xGustoAPIVersion;

        private UpdateSubscriptionRequestBuilder(List<String> subscriptionTypes, String webhookSubscriptionUuid) {
            this.subscriptionTypes = subscriptionTypes;
            this.webhookSubscriptionUuid = webhookSubscriptionUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateSubscriptionRequestBuilder
         */
        public UpdateSubscriptionRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionCall(webhookSubscriptionUuid, xGustoAPIVersion, webhooksUpdateSubscriptionRequest, _callback);
        }

        private WebhooksUpdateSubscriptionRequest buildBodyParams() {
            WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest = new WebhooksUpdateSubscriptionRequest();
            if (this.subscriptionTypes != null)
            webhooksUpdateSubscriptionRequest.subscriptionTypes(WebhooksUpdateSubscriptionRequest.SubscriptionTypesEnum.fromValue(this.subscriptionTypes));
            return webhooksUpdateSubscriptionRequest;
        }

        /**
         * Execute updateSubscription request
         * @return WebhookSubscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public WebhookSubscription execute() throws ApiException {
            WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest = buildBodyParams();
            ApiResponse<WebhookSubscription> localVarResp = updateSubscriptionWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion, webhooksUpdateSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSubscription request with HTTP info returned
         * @return ApiResponse&lt;WebhookSubscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookSubscription> executeWithHttpInfo() throws ApiException {
            WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion, webhooksUpdateSubscriptionRequest);
        }

        /**
         * Execute updateSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookSubscription> _callback) throws ApiException {
            WebhooksUpdateSubscriptionRequest webhooksUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionAsync(webhookSubscriptionUuid, xGustoAPIVersion, webhooksUpdateSubscriptionRequest, _callback);
        }
    }

    /**
     * Update a webhook subscription
     * Updates the Webhook Subscription associated with the provided UUID.  &gt; 📘 Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:write&#x60; 
     * @param webhookSubscriptionUuid The webhook subscription UUID. (required)
     * @return UpdateSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscriptionRequestBuilder updateSubscription(List<String> subscriptionTypes, String webhookSubscriptionUuid) throws IllegalArgumentException {
        if (subscriptionTypes == null) throw new IllegalArgumentException("\"subscriptionTypes\" is required but got null");
        if (webhookSubscriptionUuid == null) throw new IllegalArgumentException("\"webhookSubscriptionUuid\" is required but got null");
            

        return new UpdateSubscriptionRequestBuilder(subscriptionTypes, webhookSubscriptionUuid);
    }
    private okhttp3.Call verifySubscriptionTokenCall(String webhookSubscriptionUuid, String xGustoAPIVersion, WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksVerifySubscriptionTokenRequest;

        // create path and map variables
        String localVarPath = "/v1/webhook_subscriptions/{webhook_subscription_uuid}/verify"
            .replace("{" + "webhook_subscription_uuid" + "}", localVarApiClient.escapeString(webhookSubscriptionUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySubscriptionTokenValidateBeforeCall(String webhookSubscriptionUuid, String xGustoAPIVersion, WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookSubscriptionUuid' is set
        if (webhookSubscriptionUuid == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionUuid' when calling verifySubscriptionToken(Async)");
        }

        return verifySubscriptionTokenCall(webhookSubscriptionUuid, xGustoAPIVersion, webhooksVerifySubscriptionTokenRequest, _callback);

    }


    private ApiResponse<WebhookSubscription> verifySubscriptionTokenWithHttpInfo(String webhookSubscriptionUuid, String xGustoAPIVersion, WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = verifySubscriptionTokenValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, webhooksVerifySubscriptionTokenRequest, null);
        Type localVarReturnType = new TypeToken<WebhookSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifySubscriptionTokenAsync(String webhookSubscriptionUuid, String xGustoAPIVersion, WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest, final ApiCallback<WebhookSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySubscriptionTokenValidateBeforeCall(webhookSubscriptionUuid, xGustoAPIVersion, webhooksVerifySubscriptionTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhookSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifySubscriptionTokenRequestBuilder {
        private final String verificationToken;
        private final String webhookSubscriptionUuid;
        private String xGustoAPIVersion;

        private VerifySubscriptionTokenRequestBuilder(String verificationToken, String webhookSubscriptionUuid) {
            this.verificationToken = verificationToken;
            this.webhookSubscriptionUuid = webhookSubscriptionUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return VerifySubscriptionTokenRequestBuilder
         */
        public VerifySubscriptionTokenRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for verifySubscriptionToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest = buildBodyParams();
            return verifySubscriptionTokenCall(webhookSubscriptionUuid, xGustoAPIVersion, webhooksVerifySubscriptionTokenRequest, _callback);
        }

        private WebhooksVerifySubscriptionTokenRequest buildBodyParams() {
            WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest = new WebhooksVerifySubscriptionTokenRequest();
            webhooksVerifySubscriptionTokenRequest.verificationToken(this.verificationToken);
            return webhooksVerifySubscriptionTokenRequest;
        }

        /**
         * Execute verifySubscriptionToken request
         * @return WebhookSubscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public WebhookSubscription execute() throws ApiException {
            WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest = buildBodyParams();
            ApiResponse<WebhookSubscription> localVarResp = verifySubscriptionTokenWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion, webhooksVerifySubscriptionTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifySubscriptionToken request with HTTP info returned
         * @return ApiResponse&lt;WebhookSubscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookSubscription> executeWithHttpInfo() throws ApiException {
            WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest = buildBodyParams();
            return verifySubscriptionTokenWithHttpInfo(webhookSubscriptionUuid, xGustoAPIVersion, webhooksVerifySubscriptionTokenRequest);
        }

        /**
         * Execute verifySubscriptionToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookSubscription> _callback) throws ApiException {
            WebhooksVerifySubscriptionTokenRequest webhooksVerifySubscriptionTokenRequest = buildBodyParams();
            return verifySubscriptionTokenAsync(webhookSubscriptionUuid, xGustoAPIVersion, webhooksVerifySubscriptionTokenRequest, _callback);
        }
    }

    /**
     * Verify the webhook subscription
     * When a webhook subscription is created, a &#x60;verification_token&#x60; is POSTed to the registered webhook subscription URL. This &#x60;verify&#x60; endpoint needs to be called with &#x60;verification_token&#x60; before webhook events can be sent to the registered webhook URL.  Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the &#x60;verification_token&#x60; to the Subscriber.  &gt; 📘 Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: &#x60;webhook_subscriptions:write&#x60; 
     * @param webhookSubscriptionUuid The webhook subscription UUID. (required)
     * @return VerifySubscriptionTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public VerifySubscriptionTokenRequestBuilder verifySubscriptionToken(String verificationToken, String webhookSubscriptionUuid) throws IllegalArgumentException {
        if (verificationToken == null) throw new IllegalArgumentException("\"verificationToken\" is required but got null");
            

        if (webhookSubscriptionUuid == null) throw new IllegalArgumentException("\"webhookSubscriptionUuid\" is required but got null");
            

        return new VerifySubscriptionTokenRequestBuilder(verificationToken, webhookSubscriptionUuid);
    }
}
