/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeFederalTax;
import com.konfigthis.client.model.EmployeeStateTax;
import com.konfigthis.client.model.EmployeeTaxSetupUpdateFederalTaxesRequest;
import com.konfigthis.client.model.EmployeeTaxSetupUpdateStateTaxesRequest;
import com.konfigthis.client.model.EmployeeTaxSetupUpdateStateTaxesRequestStatesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeTaxSetupApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeTaxSetupApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeTaxSetupApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFederalTaxesByIdCall(String employeeUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_uuid}/federal_taxes"
            .replace("{" + "employee_uuid" + "}", localVarApiClient.escapeString(employeeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFederalTaxesByIdValidateBeforeCall(String employeeUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeUuid' is set
        if (employeeUuid == null) {
            throw new ApiException("Missing the required parameter 'employeeUuid' when calling getFederalTaxesById(Async)");
        }

        return getFederalTaxesByIdCall(employeeUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<EmployeeFederalTax> getFederalTaxesByIdWithHttpInfo(String employeeUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getFederalTaxesByIdValidateBeforeCall(employeeUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<EmployeeFederalTax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFederalTaxesByIdAsync(String employeeUuid, String xGustoAPIVersion, final ApiCallback<EmployeeFederalTax> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFederalTaxesByIdValidateBeforeCall(employeeUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<EmployeeFederalTax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFederalTaxesByIdRequestBuilder {
        private final String employeeUuid;
        private String xGustoAPIVersion;

        private GetFederalTaxesByIdRequestBuilder(String employeeUuid) {
            this.employeeUuid = employeeUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetFederalTaxesByIdRequestBuilder
         */
        public GetFederalTaxesByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getFederalTaxesById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFederalTaxesByIdCall(employeeUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getFederalTaxesById request
         * @return EmployeeFederalTax
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeFederalTax execute() throws ApiException {
            ApiResponse<EmployeeFederalTax> localVarResp = getFederalTaxesByIdWithHttpInfo(employeeUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFederalTaxesById request with HTTP info returned
         * @return ApiResponse&lt;EmployeeFederalTax&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeFederalTax> executeWithHttpInfo() throws ApiException {
            return getFederalTaxesByIdWithHttpInfo(employeeUuid, xGustoAPIVersion);
        }

        /**
         * Execute getFederalTaxesById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeFederalTax> _callback) throws ApiException {
            return getFederalTaxesByIdAsync(employeeUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee&#39;s federal taxes
     * Get attributes relevant for an employee&#39;s federal taxes.   scope: &#x60;employee_federal_taxes:read&#x60;
     * @param employeeUuid The UUID of the employee (required)
     * @return GetFederalTaxesByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetFederalTaxesByIdRequestBuilder getFederalTaxesById(String employeeUuid) throws IllegalArgumentException {
        if (employeeUuid == null) throw new IllegalArgumentException("\"employeeUuid\" is required but got null");
            

        return new GetFederalTaxesByIdRequestBuilder(employeeUuid);
    }
    private okhttp3.Call getStateTaxesCall(String employeeUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_uuid}/state_taxes"
            .replace("{" + "employee_uuid" + "}", localVarApiClient.escapeString(employeeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStateTaxesValidateBeforeCall(String employeeUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeUuid' is set
        if (employeeUuid == null) {
            throw new ApiException("Missing the required parameter 'employeeUuid' when calling getStateTaxes(Async)");
        }

        return getStateTaxesCall(employeeUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<EmployeeStateTax>> getStateTaxesWithHttpInfo(String employeeUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getStateTaxesValidateBeforeCall(employeeUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<EmployeeStateTax>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStateTaxesAsync(String employeeUuid, String xGustoAPIVersion, final ApiCallback<List<EmployeeStateTax>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStateTaxesValidateBeforeCall(employeeUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeStateTax>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStateTaxesRequestBuilder {
        private final String employeeUuid;
        private String xGustoAPIVersion;

        private GetStateTaxesRequestBuilder(String employeeUuid) {
            this.employeeUuid = employeeUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetStateTaxesRequestBuilder
         */
        public GetStateTaxesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getStateTaxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStateTaxesCall(employeeUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getStateTaxes request
         * @return List&lt;EmployeeStateTax&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeStateTax> execute() throws ApiException {
            ApiResponse<List<EmployeeStateTax>> localVarResp = getStateTaxesWithHttpInfo(employeeUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStateTaxes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeStateTax&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeStateTax>> executeWithHttpInfo() throws ApiException {
            return getStateTaxesWithHttpInfo(employeeUuid, xGustoAPIVersion);
        }

        /**
         * Execute getStateTaxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeStateTax>> _callback) throws ApiException {
            return getStateTaxesAsync(employeeUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee&#39;s state taxes
     * Get attributes relevant for an employee&#39;s state taxes.  The data required to correctly calculate an employee&#39;s state taxes varies by both home and work location. This API returns information about each question that must be answered grouped by state. Mostly commonly, an employee lives and works in the same state and will only have questions for a single state. The response contains metadata about each question, the type of answer expected, and the current answer stored in Gusto for that question.  Answers are represented by an array. Today, this array can only be empty or contain exactly one element, but is designed to allow for forward compatibility with effective-dated fields. Until effective dated answers are supported, the &#x60;valid_from&#x60; and &#x60;valid_up_to&#x60; must always be &#x60;\&quot;2010-01-01\&quot;&#x60; and &#x60;null&#x60; respectively.  ## About filing new hire reports Payroll Admins are responsible for filing a new hire report for each Employee. The &#x60;file_new_hire_report&#x60; question will only be listed if: - the &#x60;employee.onboarding_status&#x60; is one of the following:   - &#x60;admin_onboarding_incomplete&#x60;   - &#x60;self_onboarding_awaiting_admin_review&#x60; - that employee&#39;s work state requires filing a new hire report  scope: &#x60;employee_state_taxes:read&#x60; 
     * @param employeeUuid The UUID of the employee (required)
     * @return GetStateTaxesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetStateTaxesRequestBuilder getStateTaxes(String employeeUuid) throws IllegalArgumentException {
        if (employeeUuid == null) throw new IllegalArgumentException("\"employeeUuid\" is required but got null");
            

        return new GetStateTaxesRequestBuilder(employeeUuid);
    }
    private okhttp3.Call updateFederalTaxesCall(String employeeUuid, String xGustoAPIVersion, EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeTaxSetupUpdateFederalTaxesRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_uuid}/federal_taxes"
            .replace("{" + "employee_uuid" + "}", localVarApiClient.escapeString(employeeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFederalTaxesValidateBeforeCall(String employeeUuid, String xGustoAPIVersion, EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeUuid' is set
        if (employeeUuid == null) {
            throw new ApiException("Missing the required parameter 'employeeUuid' when calling updateFederalTaxes(Async)");
        }

        return updateFederalTaxesCall(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateFederalTaxesRequest, _callback);

    }


    private ApiResponse<EmployeeFederalTax> updateFederalTaxesWithHttpInfo(String employeeUuid, String xGustoAPIVersion, EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFederalTaxesValidateBeforeCall(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateFederalTaxesRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeFederalTax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFederalTaxesAsync(String employeeUuid, String xGustoAPIVersion, EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest, final ApiCallback<EmployeeFederalTax> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFederalTaxesValidateBeforeCall(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateFederalTaxesRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeFederalTax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFederalTaxesRequestBuilder {
        private final String version;
        private final String employeeUuid;
        private String filingStatus;
        private String extraWithholding;
        private Boolean twoJobs;
        private String dependentsAmount;
        private String otherIncome;
        private String deductions;
        private String w4DataType;
        private String xGustoAPIVersion;

        private UpdateFederalTaxesRequestBuilder(String version, String employeeUuid) {
            this.version = version;
            this.employeeUuid = employeeUuid;
        }

        /**
         * Set filingStatus
         * @param filingStatus  (optional)
         * @return UpdateFederalTaxesRequestBuilder
         */
        public UpdateFederalTaxesRequestBuilder filingStatus(String filingStatus) {
            this.filingStatus = filingStatus;
            return this;
        }
        
        /**
         * Set extraWithholding
         * @param extraWithholding  (optional)
         * @return UpdateFederalTaxesRequestBuilder
         */
        public UpdateFederalTaxesRequestBuilder extraWithholding(String extraWithholding) {
            this.extraWithholding = extraWithholding;
            return this;
        }
        
        /**
         * Set twoJobs
         * @param twoJobs  (optional)
         * @return UpdateFederalTaxesRequestBuilder
         */
        public UpdateFederalTaxesRequestBuilder twoJobs(Boolean twoJobs) {
            this.twoJobs = twoJobs;
            return this;
        }
        
        /**
         * Set dependentsAmount
         * @param dependentsAmount  (optional)
         * @return UpdateFederalTaxesRequestBuilder
         */
        public UpdateFederalTaxesRequestBuilder dependentsAmount(String dependentsAmount) {
            this.dependentsAmount = dependentsAmount;
            return this;
        }
        
        /**
         * Set otherIncome
         * @param otherIncome  (optional)
         * @return UpdateFederalTaxesRequestBuilder
         */
        public UpdateFederalTaxesRequestBuilder otherIncome(String otherIncome) {
            this.otherIncome = otherIncome;
            return this;
        }
        
        /**
         * Set deductions
         * @param deductions  (optional)
         * @return UpdateFederalTaxesRequestBuilder
         */
        public UpdateFederalTaxesRequestBuilder deductions(String deductions) {
            this.deductions = deductions;
            return this;
        }
        
        /**
         * Set w4DataType
         * @param w4DataType  (optional)
         * @return UpdateFederalTaxesRequestBuilder
         */
        public UpdateFederalTaxesRequestBuilder w4DataType(String w4DataType) {
            this.w4DataType = w4DataType;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateFederalTaxesRequestBuilder
         */
        public UpdateFederalTaxesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateFederalTaxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest = buildBodyParams();
            return updateFederalTaxesCall(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateFederalTaxesRequest, _callback);
        }

        private EmployeeTaxSetupUpdateFederalTaxesRequest buildBodyParams() {
            EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest = new EmployeeTaxSetupUpdateFederalTaxesRequest();
            employeeTaxSetupUpdateFederalTaxesRequest.version(this.version);
            employeeTaxSetupUpdateFederalTaxesRequest.filingStatus(this.filingStatus);
            employeeTaxSetupUpdateFederalTaxesRequest.extraWithholding(this.extraWithholding);
            employeeTaxSetupUpdateFederalTaxesRequest.twoJobs(this.twoJobs);
            employeeTaxSetupUpdateFederalTaxesRequest.dependentsAmount(this.dependentsAmount);
            employeeTaxSetupUpdateFederalTaxesRequest.otherIncome(this.otherIncome);
            employeeTaxSetupUpdateFederalTaxesRequest.deductions(this.deductions);
            employeeTaxSetupUpdateFederalTaxesRequest.w4DataType(this.w4DataType);
            return employeeTaxSetupUpdateFederalTaxesRequest;
        }

        /**
         * Execute updateFederalTaxes request
         * @return EmployeeFederalTax
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeFederalTax execute() throws ApiException {
            EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest = buildBodyParams();
            ApiResponse<EmployeeFederalTax> localVarResp = updateFederalTaxesWithHttpInfo(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateFederalTaxesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFederalTaxes request with HTTP info returned
         * @return ApiResponse&lt;EmployeeFederalTax&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeFederalTax> executeWithHttpInfo() throws ApiException {
            EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest = buildBodyParams();
            return updateFederalTaxesWithHttpInfo(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateFederalTaxesRequest);
        }

        /**
         * Execute updateFederalTaxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeFederalTax> _callback) throws ApiException {
            EmployeeTaxSetupUpdateFederalTaxesRequest employeeTaxSetupUpdateFederalTaxesRequest = buildBodyParams();
            return updateFederalTaxesAsync(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateFederalTaxesRequest, _callback);
        }
    }

    /**
     * Update an employee&#39;s federal taxes
     * Update attributes relevant for an employee&#39;s federal taxes.  scope: &#x60;employee_federal_taxes:write&#x60;
     * @param employeeUuid The UUID of the employee (required)
     * @return UpdateFederalTaxesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFederalTaxesRequestBuilder updateFederalTaxes(String version, String employeeUuid) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (employeeUuid == null) throw new IllegalArgumentException("\"employeeUuid\" is required but got null");
            

        return new UpdateFederalTaxesRequestBuilder(version, employeeUuid);
    }
    private okhttp3.Call updateStateTaxesCall(String employeeUuid, String xGustoAPIVersion, EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeTaxSetupUpdateStateTaxesRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_uuid}/state_taxes"
            .replace("{" + "employee_uuid" + "}", localVarApiClient.escapeString(employeeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStateTaxesValidateBeforeCall(String employeeUuid, String xGustoAPIVersion, EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeUuid' is set
        if (employeeUuid == null) {
            throw new ApiException("Missing the required parameter 'employeeUuid' when calling updateStateTaxes(Async)");
        }

        return updateStateTaxesCall(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateStateTaxesRequest, _callback);

    }


    private ApiResponse<List<EmployeeStateTax>> updateStateTaxesWithHttpInfo(String employeeUuid, String xGustoAPIVersion, EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStateTaxesValidateBeforeCall(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateStateTaxesRequest, null);
        Type localVarReturnType = new TypeToken<List<EmployeeStateTax>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStateTaxesAsync(String employeeUuid, String xGustoAPIVersion, EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest, final ApiCallback<List<EmployeeStateTax>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStateTaxesValidateBeforeCall(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateStateTaxesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeStateTax>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStateTaxesRequestBuilder {
        private final Set<EmployeeTaxSetupUpdateStateTaxesRequestStatesInner> states;
        private final String employeeUuid;
        private String xGustoAPIVersion;

        private UpdateStateTaxesRequestBuilder(Set<EmployeeTaxSetupUpdateStateTaxesRequestStatesInner> states, String employeeUuid) {
            this.states = states;
            this.employeeUuid = employeeUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateStateTaxesRequestBuilder
         */
        public UpdateStateTaxesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateStateTaxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest = buildBodyParams();
            return updateStateTaxesCall(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateStateTaxesRequest, _callback);
        }

        private EmployeeTaxSetupUpdateStateTaxesRequest buildBodyParams() {
            EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest = new EmployeeTaxSetupUpdateStateTaxesRequest();
            employeeTaxSetupUpdateStateTaxesRequest.states(this.states);
            return employeeTaxSetupUpdateStateTaxesRequest;
        }

        /**
         * Execute updateStateTaxes request
         * @return List&lt;EmployeeStateTax&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeStateTax> execute() throws ApiException {
            EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest = buildBodyParams();
            ApiResponse<List<EmployeeStateTax>> localVarResp = updateStateTaxesWithHttpInfo(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateStateTaxesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStateTaxes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeStateTax&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeStateTax>> executeWithHttpInfo() throws ApiException {
            EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest = buildBodyParams();
            return updateStateTaxesWithHttpInfo(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateStateTaxesRequest);
        }

        /**
         * Execute updateStateTaxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeStateTax>> _callback) throws ApiException {
            EmployeeTaxSetupUpdateStateTaxesRequest employeeTaxSetupUpdateStateTaxesRequest = buildBodyParams();
            return updateStateTaxesAsync(employeeUuid, xGustoAPIVersion, employeeTaxSetupUpdateStateTaxesRequest, _callback);
        }
    }

    /**
     * Update an employee&#39;s state taxes
     * Update attributes relevant for an employee&#39;s state taxes.  As described for the GET endpoint, the answers must be supplied in the effective-dated format, but currently only a single answer will be accepted - &#x60;valid_from&#x60; and &#x60;valid_up_to&#x60; must be &#x60;\&quot;2010-01-01\&quot;&#x60; and &#x60;null&#x60; respectively.  scope: &#x60;employee_state_taxes:write&#x60;
     * @param employeeUuid The UUID of the employee (required)
     * @return UpdateStateTaxesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStateTaxesRequestBuilder updateStateTaxes(Set<EmployeeTaxSetupUpdateStateTaxesRequestStatesInner> states, String employeeUuid) throws IllegalArgumentException {
        if (states == null) throw new IllegalArgumentException("\"states\" is required but got null");
        if (employeeUuid == null) throw new IllegalArgumentException("\"employeeUuid\" is required but got null");
            

        return new UpdateStateTaxesRequestBuilder(states, employeeUuid);
    }
}
