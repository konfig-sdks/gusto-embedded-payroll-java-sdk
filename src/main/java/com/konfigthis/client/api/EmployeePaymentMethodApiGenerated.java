/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeBankAccount;
import com.konfigthis.client.model.EmployeePaymentMethod;
import com.konfigthis.client.model.EmployeePaymentMethodCreateBankAccountRequest;
import com.konfigthis.client.model.EmployeePaymentMethodUpdatePaymentMethodRequest;
import com.konfigthis.client.model.EmployeePaymentMethodUpdatePaymentMethodRequestSplitsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeePaymentMethodApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeePaymentMethodApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeePaymentMethodApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBankAccountCall(String employeeId, String xGustoAPIVersion, EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePaymentMethodCreateBankAccountRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/bank_accounts"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankAccountValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createBankAccount(Async)");
        }

        return createBankAccountCall(employeeId, xGustoAPIVersion, employeePaymentMethodCreateBankAccountRequest, _callback);

    }


    private ApiResponse<EmployeeBankAccount> createBankAccountWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = createBankAccountValidateBeforeCall(employeeId, xGustoAPIVersion, employeePaymentMethodCreateBankAccountRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeBankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBankAccountAsync(String employeeId, String xGustoAPIVersion, EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest, final ApiCallback<EmployeeBankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankAccountValidateBeforeCall(employeeId, xGustoAPIVersion, employeePaymentMethodCreateBankAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeBankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBankAccountRequestBuilder {
        private final String name;
        private final String routingNumber;
        private final String accountNumber;
        private final String accountType;
        private final String employeeId;
        private String xGustoAPIVersion;

        private CreateBankAccountRequestBuilder(String name, String routingNumber, String accountNumber, String accountType, String employeeId) {
            this.name = name;
            this.routingNumber = routingNumber;
            this.accountNumber = accountNumber;
            this.accountType = accountType;
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateBankAccountRequestBuilder
         */
        public CreateBankAccountRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest = buildBodyParams();
            return createBankAccountCall(employeeId, xGustoAPIVersion, employeePaymentMethodCreateBankAccountRequest, _callback);
        }

        private EmployeePaymentMethodCreateBankAccountRequest buildBodyParams() {
            EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest = new EmployeePaymentMethodCreateBankAccountRequest();
            employeePaymentMethodCreateBankAccountRequest.name(this.name);
            employeePaymentMethodCreateBankAccountRequest.routingNumber(this.routingNumber);
            employeePaymentMethodCreateBankAccountRequest.accountNumber(this.accountNumber);
            if (this.accountType != null)
            employeePaymentMethodCreateBankAccountRequest.accountType(EmployeePaymentMethodCreateBankAccountRequest.AccountTypeEnum.fromValue(this.accountType));
            return employeePaymentMethodCreateBankAccountRequest;
        }

        /**
         * Execute createBankAccount request
         * @return EmployeeBankAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeBankAccount execute() throws ApiException {
            EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest = buildBodyParams();
            ApiResponse<EmployeeBankAccount> localVarResp = createBankAccountWithHttpInfo(employeeId, xGustoAPIVersion, employeePaymentMethodCreateBankAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBankAccount request with HTTP info returned
         * @return ApiResponse&lt;EmployeeBankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeBankAccount> executeWithHttpInfo() throws ApiException {
            EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest = buildBodyParams();
            return createBankAccountWithHttpInfo(employeeId, xGustoAPIVersion, employeePaymentMethodCreateBankAccountRequest);
        }

        /**
         * Execute createBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeBankAccount> _callback) throws ApiException {
            EmployeePaymentMethodCreateBankAccountRequest employeePaymentMethodCreateBankAccountRequest = buildBodyParams();
            return createBankAccountAsync(employeeId, xGustoAPIVersion, employeePaymentMethodCreateBankAccountRequest, _callback);
        }
    }

    /**
     * Create an employee bank account
     * Creates an employee bank account. An employee can have multiple bank accounts. Note that creating an employee bank account will also update the employee&#39;s payment method.  scope: &#x60;employee_payment_methods:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateBankAccountRequestBuilder createBankAccount(String name, String routingNumber, String accountNumber, String accountType, String employeeId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (routingNumber == null) throw new IllegalArgumentException("\"routingNumber\" is required but got null");
            

        if (accountNumber == null) throw new IllegalArgumentException("\"accountNumber\" is required but got null");
            

        if (accountType == null) throw new IllegalArgumentException("\"accountType\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateBankAccountRequestBuilder(name, routingNumber, accountNumber, accountType, employeeId);
    }
    private okhttp3.Call deleteBankAccountCall(String employeeId, String bankAccountUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/bank_accounts/{bank_account_uuid}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "bank_account_uuid" + "}", localVarApiClient.escapeString(bankAccountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBankAccountValidateBeforeCall(String employeeId, String bankAccountUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deleteBankAccount(Async)");
        }

        // verify the required parameter 'bankAccountUuid' is set
        if (bankAccountUuid == null) {
            throw new ApiException("Missing the required parameter 'bankAccountUuid' when calling deleteBankAccount(Async)");
        }

        return deleteBankAccountCall(employeeId, bankAccountUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteBankAccountWithHttpInfo(String employeeId, String bankAccountUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteBankAccountValidateBeforeCall(employeeId, bankAccountUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBankAccountAsync(String employeeId, String bankAccountUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBankAccountValidateBeforeCall(employeeId, bankAccountUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteBankAccountRequestBuilder {
        private final String employeeId;
        private final String bankAccountUuid;
        private String xGustoAPIVersion;

        private DeleteBankAccountRequestBuilder(String employeeId, String bankAccountUuid) {
            this.employeeId = employeeId;
            this.bankAccountUuid = bankAccountUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteBankAccountRequestBuilder
         */
        public DeleteBankAccountRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBankAccountCall(employeeId, bankAccountUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteBankAccount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteBankAccountWithHttpInfo(employeeId, bankAccountUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteBankAccount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBankAccountWithHttpInfo(employeeId, bankAccountUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBankAccountAsync(employeeId, bankAccountUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an employee bank account
     * Deletes an employee bank account. To update an employee&#39;s bank account details, delete the bank account first and create a new one.  scope: &#x60;employee_payment_methods:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @param bankAccountUuid The UUID of the bank account (required)
     * @return DeleteBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBankAccountRequestBuilder deleteBankAccount(String employeeId, String bankAccountUuid) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (bankAccountUuid == null) throw new IllegalArgumentException("\"bankAccountUuid\" is required but got null");
            

        return new DeleteBankAccountRequestBuilder(employeeId, bankAccountUuid);
    }
    private okhttp3.Call getBankAccountsCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/payment_method"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankAccountsValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getBankAccounts(Async)");
        }

        return getBankAccountsCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<EmployeePaymentMethod> getBankAccountsWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getBankAccountsValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<EmployeePaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBankAccountsAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<EmployeePaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankAccountsValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<EmployeePaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBankAccountsRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private GetBankAccountsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetBankAccountsRequestBuilder
         */
        public GetBankAccountsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getBankAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankAccountsCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getBankAccounts request
         * @return EmployeePaymentMethod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeePaymentMethod execute() throws ApiException {
            ApiResponse<EmployeePaymentMethod> localVarResp = getBankAccountsWithHttpInfo(employeeId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBankAccounts request with HTTP info returned
         * @return ApiResponse&lt;EmployeePaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeePaymentMethod> executeWithHttpInfo() throws ApiException {
            return getBankAccountsWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute getBankAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeePaymentMethod> _callback) throws ApiException {
            return getBankAccountsAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee&#39;s payment method
     * Fetches an employee&#39;s payment method. An employee payment method describes how the payment should be split across the employee&#39;s associated bank accounts.  scope: &#x60;employee_payment_methods:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetBankAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetBankAccountsRequestBuilder getBankAccounts(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetBankAccountsRequestBuilder(employeeId);
    }
    private okhttp3.Call listBankAccountsCall(String employeeId, Double page, Double per, String xGustoAPIVersion, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/bank_accounts"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBankAccountsValidateBeforeCall(String employeeId, Double page, Double per, String xGustoAPIVersion, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listBankAccounts(Async)");
        }

        return listBankAccountsCall(employeeId, page, per, xGustoAPIVersion, body, _callback);

    }


    private ApiResponse<List<EmployeeBankAccount>> listBankAccountsWithHttpInfo(String employeeId, Double page, Double per, String xGustoAPIVersion, Object body) throws ApiException {
        okhttp3.Call localVarCall = listBankAccountsValidateBeforeCall(employeeId, page, per, xGustoAPIVersion, body, null);
        Type localVarReturnType = new TypeToken<List<EmployeeBankAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBankAccountsAsync(String employeeId, Double page, Double per, String xGustoAPIVersion, Object body, final ApiCallback<List<EmployeeBankAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBankAccountsValidateBeforeCall(employeeId, page, per, xGustoAPIVersion, body, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeBankAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBankAccountsRequestBuilder {
        private final String employeeId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private ListBankAccountsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return ListBankAccountsRequestBuilder
         */
        public ListBankAccountsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return ListBankAccountsRequestBuilder
         */
        public ListBankAccountsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListBankAccountsRequestBuilder
         */
        public ListBankAccountsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listBankAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return listBankAccountsCall(employeeId, page, per, xGustoAPIVersion, body, _callback);
        }

        private Object buildBodyParams() {
            Object body = new Object();
            return body;
        }

        /**
         * Execute listBankAccounts request
         * @return List&lt;EmployeeBankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeBankAccount> execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<List<EmployeeBankAccount>> localVarResp = listBankAccountsWithHttpInfo(employeeId, page, per, xGustoAPIVersion, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBankAccounts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeBankAccount&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeBankAccount>> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return listBankAccountsWithHttpInfo(employeeId, page, per, xGustoAPIVersion, body);
        }

        /**
         * Execute listBankAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeBankAccount>> _callback) throws ApiException {
            Object body = buildBodyParams();
            return listBankAccountsAsync(employeeId, page, per, xGustoAPIVersion, body, _callback);
        }
    }

    /**
     * Get all employee bank accounts
     * Returns all employee bank accounts.  scope: &#x60;employee_payment_methods:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return ListBankAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListBankAccountsRequestBuilder listBankAccounts(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListBankAccountsRequestBuilder(employeeId);
    }
    private okhttp3.Call updatePaymentMethodCall(String employeeId, String xGustoAPIVersion, EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePaymentMethodUpdatePaymentMethodRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/payment_method"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentMethodValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updatePaymentMethod(Async)");
        }

        return updatePaymentMethodCall(employeeId, xGustoAPIVersion, employeePaymentMethodUpdatePaymentMethodRequest, _callback);

    }


    private ApiResponse<EmployeePaymentMethod> updatePaymentMethodWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentMethodValidateBeforeCall(employeeId, xGustoAPIVersion, employeePaymentMethodUpdatePaymentMethodRequest, null);
        Type localVarReturnType = new TypeToken<EmployeePaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePaymentMethodAsync(String employeeId, String xGustoAPIVersion, EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest, final ApiCallback<EmployeePaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentMethodValidateBeforeCall(employeeId, xGustoAPIVersion, employeePaymentMethodUpdatePaymentMethodRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeePaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePaymentMethodRequestBuilder {
        private final String version;
        private final String type;
        private final String employeeId;
        private String splitBy;
        private List<EmployeePaymentMethodUpdatePaymentMethodRequestSplitsInner> splits;
        private String xGustoAPIVersion;

        private UpdatePaymentMethodRequestBuilder(String version, String type, String employeeId) {
            this.version = version;
            this.type = type;
            this.employeeId = employeeId;
        }

        /**
         * Set splitBy
         * @param splitBy Describes how the payment will be split. If split_by is Percentage, then the split amounts must add up to exactly 100. If split_by is Amount, then the last split amount must be nil to capture the remainder. (optional)
         * @return UpdatePaymentMethodRequestBuilder
         */
        public UpdatePaymentMethodRequestBuilder splitBy(String splitBy) {
            this.splitBy = splitBy;
            return this;
        }
        
        /**
         * Set splits
         * @param splits  (optional)
         * @return UpdatePaymentMethodRequestBuilder
         */
        public UpdatePaymentMethodRequestBuilder splits(List<EmployeePaymentMethodUpdatePaymentMethodRequestSplitsInner> splits) {
            this.splits = splits;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdatePaymentMethodRequestBuilder
         */
        public UpdatePaymentMethodRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updatePaymentMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest = buildBodyParams();
            return updatePaymentMethodCall(employeeId, xGustoAPIVersion, employeePaymentMethodUpdatePaymentMethodRequest, _callback);
        }

        private EmployeePaymentMethodUpdatePaymentMethodRequest buildBodyParams() {
            EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest = new EmployeePaymentMethodUpdatePaymentMethodRequest();
            employeePaymentMethodUpdatePaymentMethodRequest.version(this.version);
            if (this.type != null)
            employeePaymentMethodUpdatePaymentMethodRequest.type(EmployeePaymentMethodUpdatePaymentMethodRequest.TypeEnum.fromValue(this.type));
            if (this.splitBy != null)
            employeePaymentMethodUpdatePaymentMethodRequest.splitBy(EmployeePaymentMethodUpdatePaymentMethodRequest.SplitByEnum.fromValue(this.splitBy));
            employeePaymentMethodUpdatePaymentMethodRequest.splits(this.splits);
            return employeePaymentMethodUpdatePaymentMethodRequest;
        }

        /**
         * Execute updatePaymentMethod request
         * @return EmployeePaymentMethod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeePaymentMethod execute() throws ApiException {
            EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest = buildBodyParams();
            ApiResponse<EmployeePaymentMethod> localVarResp = updatePaymentMethodWithHttpInfo(employeeId, xGustoAPIVersion, employeePaymentMethodUpdatePaymentMethodRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePaymentMethod request with HTTP info returned
         * @return ApiResponse&lt;EmployeePaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeePaymentMethod> executeWithHttpInfo() throws ApiException {
            EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest = buildBodyParams();
            return updatePaymentMethodWithHttpInfo(employeeId, xGustoAPIVersion, employeePaymentMethodUpdatePaymentMethodRequest);
        }

        /**
         * Execute updatePaymentMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeePaymentMethod> _callback) throws ApiException {
            EmployeePaymentMethodUpdatePaymentMethodRequest employeePaymentMethodUpdatePaymentMethodRequest = buildBodyParams();
            return updatePaymentMethodAsync(employeeId, xGustoAPIVersion, employeePaymentMethodUpdatePaymentMethodRequest, _callback);
        }
    }

    /**
     * Update an employee&#39;s payment method
     * Updates an employee&#39;s payment method. Note that creating an employee bank account will also update the employee&#39;s payment method.  scope: &#x60;employee_payment_methods:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return UpdatePaymentMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePaymentMethodRequestBuilder updatePaymentMethod(String version, String type, String employeeId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdatePaymentMethodRequestBuilder(version, type, employeeId);
    }
}
