/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayPeriod;
import com.konfigthis.client.model.PaySchedule;
import com.konfigthis.client.model.PayScheduleAssignment;
import com.konfigthis.client.model.PayScheduleAssignmentBody;
import com.konfigthis.client.model.PayScheduleAssignmentBodyDepartmentsInner;
import com.konfigthis.client.model.PayScheduleAssignmentBodyEmployeesInner;
import com.konfigthis.client.model.PayScheduleAssignmentPreview;
import com.konfigthis.client.model.PaySchedulesCreateNewRequest;
import com.konfigthis.client.model.PaySchedulesPreviewPayScheduleDatesResponse;
import com.konfigthis.client.model.PaySchedulesUpdatePayScheduleRequest;
import com.konfigthis.client.model.UnprocessedTerminationPayPeriod;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaySchedulesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaySchedulesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaySchedulesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignEmployeesToSchedulesCall(String companyId, String xGustoAPIVersion, PayScheduleAssignmentBody payScheduleAssignmentBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payScheduleAssignmentBody;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules/assign"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignEmployeesToSchedulesValidateBeforeCall(String companyId, String xGustoAPIVersion, PayScheduleAssignmentBody payScheduleAssignmentBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling assignEmployeesToSchedules(Async)");
        }

        return assignEmployeesToSchedulesCall(companyId, xGustoAPIVersion, payScheduleAssignmentBody, _callback);

    }


    private ApiResponse<Void> assignEmployeesToSchedulesWithHttpInfo(String companyId, String xGustoAPIVersion, PayScheduleAssignmentBody payScheduleAssignmentBody) throws ApiException {
        okhttp3.Call localVarCall = assignEmployeesToSchedulesValidateBeforeCall(companyId, xGustoAPIVersion, payScheduleAssignmentBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call assignEmployeesToSchedulesAsync(String companyId, String xGustoAPIVersion, PayScheduleAssignmentBody payScheduleAssignmentBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignEmployeesToSchedulesValidateBeforeCall(companyId, xGustoAPIVersion, payScheduleAssignmentBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AssignEmployeesToSchedulesRequestBuilder {
        private final String type;
        private final String companyId;
        private String hourlyPayScheduleUuid;
        private String salariedPayScheduleUuid;
        private String defaultPayScheduleUuid;
        private List<PayScheduleAssignmentBodyEmployeesInner> employees;
        private List<PayScheduleAssignmentBodyDepartmentsInner> departments;
        private String xGustoAPIVersion;

        private AssignEmployeesToSchedulesRequestBuilder(String type, String companyId) {
            this.type = type;
            this.companyId = companyId;
        }

        /**
         * Set hourlyPayScheduleUuid
         * @param hourlyPayScheduleUuid Pay schedule for hourly employees. (optional)
         * @return AssignEmployeesToSchedulesRequestBuilder
         */
        public AssignEmployeesToSchedulesRequestBuilder hourlyPayScheduleUuid(String hourlyPayScheduleUuid) {
            this.hourlyPayScheduleUuid = hourlyPayScheduleUuid;
            return this;
        }
        
        /**
         * Set salariedPayScheduleUuid
         * @param salariedPayScheduleUuid Pay schedule for salaried employees. (optional)
         * @return AssignEmployeesToSchedulesRequestBuilder
         */
        public AssignEmployeesToSchedulesRequestBuilder salariedPayScheduleUuid(String salariedPayScheduleUuid) {
            this.salariedPayScheduleUuid = salariedPayScheduleUuid;
            return this;
        }
        
        /**
         * Set defaultPayScheduleUuid
         * @param defaultPayScheduleUuid Default pay schedule for employees. (optional)
         * @return AssignEmployeesToSchedulesRequestBuilder
         */
        public AssignEmployeesToSchedulesRequestBuilder defaultPayScheduleUuid(String defaultPayScheduleUuid) {
            this.defaultPayScheduleUuid = defaultPayScheduleUuid;
            return this;
        }
        
        /**
         * Set employees
         * @param employees List of employees and their pay schedules. (optional)
         * @return AssignEmployeesToSchedulesRequestBuilder
         */
        public AssignEmployeesToSchedulesRequestBuilder employees(List<PayScheduleAssignmentBodyEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set departments
         * @param departments List of departments and their pay schedules. (optional)
         * @return AssignEmployeesToSchedulesRequestBuilder
         */
        public AssignEmployeesToSchedulesRequestBuilder departments(List<PayScheduleAssignmentBodyDepartmentsInner> departments) {
            this.departments = departments;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return AssignEmployeesToSchedulesRequestBuilder
         */
        public AssignEmployeesToSchedulesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for assignEmployeesToSchedules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayScheduleAssignmentBody payScheduleAssignmentBody = buildBodyParams();
            return assignEmployeesToSchedulesCall(companyId, xGustoAPIVersion, payScheduleAssignmentBody, _callback);
        }

        private PayScheduleAssignmentBody buildBodyParams() {
            PayScheduleAssignmentBody payScheduleAssignmentBody = new PayScheduleAssignmentBody();
            if (this.type != null)
            payScheduleAssignmentBody.type(PayScheduleAssignmentBody.TypeEnum.fromValue(this.type));
            payScheduleAssignmentBody.hourlyPayScheduleUuid(this.hourlyPayScheduleUuid);
            payScheduleAssignmentBody.salariedPayScheduleUuid(this.salariedPayScheduleUuid);
            payScheduleAssignmentBody.defaultPayScheduleUuid(this.defaultPayScheduleUuid);
            payScheduleAssignmentBody.employees(this.employees);
            payScheduleAssignmentBody.departments(this.departments);
            return payScheduleAssignmentBody;
        }

        /**
         * Execute assignEmployeesToSchedules request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PayScheduleAssignmentBody payScheduleAssignmentBody = buildBodyParams();
            assignEmployeesToSchedulesWithHttpInfo(companyId, xGustoAPIVersion, payScheduleAssignmentBody);
        }

        /**
         * Execute assignEmployeesToSchedules request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PayScheduleAssignmentBody payScheduleAssignmentBody = buildBodyParams();
            return assignEmployeesToSchedulesWithHttpInfo(companyId, xGustoAPIVersion, payScheduleAssignmentBody);
        }

        /**
         * Execute assignEmployeesToSchedules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PayScheduleAssignmentBody payScheduleAssignmentBody = buildBodyParams();
            return assignEmployeesToSchedulesAsync(companyId, xGustoAPIVersion, payScheduleAssignmentBody, _callback);
        }
    }

    /**
     * Assign pay schedules for a company
     * This endpoints assigns employees to specified pay schedules based on the pay schedule type.  scope: &#x60;pay_schedules:write&#x60;
     * @param companyId The UUID of the company (required)
     * @return AssignEmployeesToSchedulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public AssignEmployeesToSchedulesRequestBuilder assignEmployeesToSchedules(String type, String companyId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new AssignEmployeesToSchedulesRequestBuilder(type, companyId);
    }
    private okhttp3.Call createNewCall(String companyId, String xGustoAPIVersion, PaySchedulesCreateNewRequest paySchedulesCreateNewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paySchedulesCreateNewRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(String companyId, String xGustoAPIVersion, PaySchedulesCreateNewRequest paySchedulesCreateNewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createNew(Async)");
        }

        return createNewCall(companyId, xGustoAPIVersion, paySchedulesCreateNewRequest, _callback);

    }


    private ApiResponse<PaySchedule> createNewWithHttpInfo(String companyId, String xGustoAPIVersion, PaySchedulesCreateNewRequest paySchedulesCreateNewRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(companyId, xGustoAPIVersion, paySchedulesCreateNewRequest, null);
        Type localVarReturnType = new TypeToken<PaySchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(String companyId, String xGustoAPIVersion, PaySchedulesCreateNewRequest paySchedulesCreateNewRequest, final ApiCallback<PaySchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(companyId, xGustoAPIVersion, paySchedulesCreateNewRequest, _callback);
        Type localVarReturnType = new TypeToken<PaySchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private final String frequency;
        private final String anchorPayDate;
        private final String anchorEndOfPayPeriod;
        private final String companyId;
        private Integer day1;
        private Integer day2;
        private String customName;
        private String xGustoAPIVersion;

        private CreateNewRequestBuilder(String frequency, String anchorPayDate, String anchorEndOfPayPeriod, String companyId) {
            this.frequency = frequency;
            this.anchorPayDate = anchorPayDate;
            this.anchorEndOfPayPeriod = anchorEndOfPayPeriod;
            this.companyId = companyId;
        }

        /**
         * Set day1
         * @param day1 An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder day1(Integer day1) {
            this.day1 = day1;
            return this;
        }
        
        /**
         * Set day2
         * @param day2 An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the \\\&quot;Twice per month\\\&quot; frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder day2(Integer day2) {
            this.day2 = day2;
            return this;
        }
        
        /**
         * Set customName
         * @param customName A custom pay schedule name, defaults to the pay frequency description. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder customName(String customName) {
            this.customName = customName;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaySchedulesCreateNewRequest paySchedulesCreateNewRequest = buildBodyParams();
            return createNewCall(companyId, xGustoAPIVersion, paySchedulesCreateNewRequest, _callback);
        }

        private PaySchedulesCreateNewRequest buildBodyParams() {
            PaySchedulesCreateNewRequest paySchedulesCreateNewRequest = new PaySchedulesCreateNewRequest();
            if (this.frequency != null)
            paySchedulesCreateNewRequest.frequency(PaySchedulesCreateNewRequest.FrequencyEnum.fromValue(this.frequency));
            paySchedulesCreateNewRequest.anchorPayDate(this.anchorPayDate);
            paySchedulesCreateNewRequest.anchorEndOfPayPeriod(this.anchorEndOfPayPeriod);
            paySchedulesCreateNewRequest.day1(this.day1);
            paySchedulesCreateNewRequest.day2(this.day2);
            paySchedulesCreateNewRequest.customName(this.customName);
            return paySchedulesCreateNewRequest;
        }

        /**
         * Execute createNew request
         * @return PaySchedule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PaySchedule execute() throws ApiException {
            PaySchedulesCreateNewRequest paySchedulesCreateNewRequest = buildBodyParams();
            ApiResponse<PaySchedule> localVarResp = createNewWithHttpInfo(companyId, xGustoAPIVersion, paySchedulesCreateNewRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;PaySchedule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaySchedule> executeWithHttpInfo() throws ApiException {
            PaySchedulesCreateNewRequest paySchedulesCreateNewRequest = buildBodyParams();
            return createNewWithHttpInfo(companyId, xGustoAPIVersion, paySchedulesCreateNewRequest);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaySchedule> _callback) throws ApiException {
            PaySchedulesCreateNewRequest paySchedulesCreateNewRequest = buildBodyParams();
            return createNewAsync(companyId, xGustoAPIVersion, paySchedulesCreateNewRequest, _callback);
        }
    }

    /**
     * Create a new pay schedule
     * If a company does not have any pay schedules, this endpoint will create a single pay schedule and assign it to all employees. This is a common use case during company onboarding.  If a company has an existing active pay schedule and want to support multiple pay schedules, this endpoint will create a pay schedule that is not assigned to any employee.  Be sure to **[check state laws](https://www.dol.gov/agencies/whd/state/payday)** to know what schedule is right for your customers.
     * @param companyId The UUID of the company (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew(String frequency, String anchorPayDate, String anchorEndOfPayPeriod, String companyId) throws IllegalArgumentException {
        if (frequency == null) throw new IllegalArgumentException("\"frequency\" is required but got null");
            

        if (anchorPayDate == null) throw new IllegalArgumentException("\"anchorPayDate\" is required but got null");
            

        if (anchorEndOfPayPeriod == null) throw new IllegalArgumentException("\"anchorEndOfPayPeriod\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateNewRequestBuilder(frequency, anchorPayDate, anchorEndOfPayPeriod, companyId);
    }
    private okhttp3.Call getAssignmentsCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules/assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignmentsValidateBeforeCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAssignments(Async)");
        }

        return getAssignmentsCall(companyId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PayScheduleAssignment> getAssignmentsWithHttpInfo(String companyId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAssignmentsValidateBeforeCall(companyId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PayScheduleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssignmentsAsync(String companyId, String xGustoAPIVersion, final ApiCallback<PayScheduleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignmentsValidateBeforeCall(companyId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PayScheduleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssignmentsRequestBuilder {
        private final String companyId;
        private String xGustoAPIVersion;

        private GetAssignmentsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAssignmentsRequestBuilder
         */
        public GetAssignmentsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAssignments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssignmentsCall(companyId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAssignments request
         * @return PayScheduleAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayScheduleAssignment execute() throws ApiException {
            ApiResponse<PayScheduleAssignment> localVarResp = getAssignmentsWithHttpInfo(companyId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssignments request with HTTP info returned
         * @return ApiResponse&lt;PayScheduleAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayScheduleAssignment> executeWithHttpInfo() throws ApiException {
            return getAssignmentsWithHttpInfo(companyId, xGustoAPIVersion);
        }

        /**
         * Execute getAssignments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayScheduleAssignment> _callback) throws ApiException {
            return getAssignmentsAsync(companyId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get pay schedule assignments for a company
     * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: &#x60;pay_schedules:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetAssignmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAssignmentsRequestBuilder getAssignments(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAssignmentsRequestBuilder(companyId);
    }
    private okhttp3.Call getDetailsCall(String companyId, String payScheduleId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "pay_schedule_id" + "}", localVarApiClient.escapeString(payScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String companyId, String payScheduleId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getDetails(Async)");
        }

        // verify the required parameter 'payScheduleId' is set
        if (payScheduleId == null) {
            throw new ApiException("Missing the required parameter 'payScheduleId' when calling getDetails(Async)");
        }

        return getDetailsCall(companyId, payScheduleId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PaySchedule> getDetailsWithHttpInfo(String companyId, String payScheduleId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyId, payScheduleId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PaySchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String companyId, String payScheduleId, String xGustoAPIVersion, final ApiCallback<PaySchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyId, payScheduleId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PaySchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String companyId;
        private final String payScheduleId;
        private String xGustoAPIVersion;

        private GetDetailsRequestBuilder(String companyId, String payScheduleId) {
            this.companyId = companyId;
            this.payScheduleId = payScheduleId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(companyId, payScheduleId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getDetails request
         * @return PaySchedule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PaySchedule execute() throws ApiException {
            ApiResponse<PaySchedule> localVarResp = getDetailsWithHttpInfo(companyId, payScheduleId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;PaySchedule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaySchedule> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(companyId, payScheduleId, xGustoAPIVersion);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaySchedule> _callback) throws ApiException {
            return getDetailsAsync(companyId, payScheduleId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a pay schedule
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: &#x60;pay_schedules:read&#x60;
     * @param companyId The UUID of the company (required)
     * @param payScheduleId The UUID of the pay schedule (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String companyId, String payScheduleId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payScheduleId == null) throw new IllegalArgumentException("\"payScheduleId\" is required but got null");
            

        return new GetDetailsRequestBuilder(companyId, payScheduleId);
    }
    private okhttp3.Call getPayPeriodsCall(String companyId, String startDate, String endDate, String payrollTypes, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_periods"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (payrollTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payroll_types", payrollTypes));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayPeriodsValidateBeforeCall(String companyId, String startDate, String endDate, String payrollTypes, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getPayPeriods(Async)");
        }

        return getPayPeriodsCall(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<PayPeriod>> getPayPeriodsWithHttpInfo(String companyId, String startDate, String endDate, String payrollTypes, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayPeriodsValidateBeforeCall(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<PayPeriod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayPeriodsAsync(String companyId, String startDate, String endDate, String payrollTypes, String xGustoAPIVersion, final ApiCallback<List<PayPeriod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayPeriodsValidateBeforeCall(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<PayPeriod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayPeriodsRequestBuilder {
        private final String companyId;
        private String startDate;
        private String endDate;
        private String payrollTypes;
        private String xGustoAPIVersion;

        private GetPayPeriodsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return GetPayPeriodsRequestBuilder
         */
        public GetPayPeriodsRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return GetPayPeriodsRequestBuilder
         */
        public GetPayPeriodsRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set payrollTypes
         * @param payrollTypes regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in. (optional)
         * @return GetPayPeriodsRequestBuilder
         */
        public GetPayPeriodsRequestBuilder payrollTypes(String payrollTypes) {
            this.payrollTypes = payrollTypes;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetPayPeriodsRequestBuilder
         */
        public GetPayPeriodsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getPayPeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayPeriodsCall(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getPayPeriods request
         * @return List&lt;PayPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<PayPeriod> execute() throws ApiException {
            ApiResponse<List<PayPeriod>> localVarResp = getPayPeriodsWithHttpInfo(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayPeriods request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayPeriod&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayPeriod>> executeWithHttpInfo() throws ApiException {
            return getPayPeriodsWithHttpInfo(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion);
        }

        /**
         * Execute getPayPeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayPeriod>> _callback) throws ApiException {
            return getPayPeriodsAsync(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get pay periods for a company
     * Pay periods are the foundation of payroll. Compensation, time &amp; attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version &#39;2023-04-01&#39;, the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetPayPeriodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetPayPeriodsRequestBuilder getPayPeriods(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetPayPeriodsRequestBuilder(companyId);
    }
    private okhttp3.Call getUnprocessedTerminationPayPeriodsCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_periods/unprocessed_termination_pay_periods"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnprocessedTerminationPayPeriodsValidateBeforeCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getUnprocessedTerminationPayPeriods(Async)");
        }

        return getUnprocessedTerminationPayPeriodsCall(companyId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<UnprocessedTerminationPayPeriod>> getUnprocessedTerminationPayPeriodsWithHttpInfo(String companyId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getUnprocessedTerminationPayPeriodsValidateBeforeCall(companyId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<UnprocessedTerminationPayPeriod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUnprocessedTerminationPayPeriodsAsync(String companyId, String xGustoAPIVersion, final ApiCallback<List<UnprocessedTerminationPayPeriod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnprocessedTerminationPayPeriodsValidateBeforeCall(companyId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<UnprocessedTerminationPayPeriod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUnprocessedTerminationPayPeriodsRequestBuilder {
        private final String companyId;
        private String xGustoAPIVersion;

        private GetUnprocessedTerminationPayPeriodsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetUnprocessedTerminationPayPeriodsRequestBuilder
         */
        public GetUnprocessedTerminationPayPeriodsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getUnprocessedTerminationPayPeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnprocessedTerminationPayPeriodsCall(companyId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getUnprocessedTerminationPayPeriods request
         * @return List&lt;UnprocessedTerminationPayPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<UnprocessedTerminationPayPeriod> execute() throws ApiException {
            ApiResponse<List<UnprocessedTerminationPayPeriod>> localVarResp = getUnprocessedTerminationPayPeriodsWithHttpInfo(companyId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUnprocessedTerminationPayPeriods request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UnprocessedTerminationPayPeriod&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UnprocessedTerminationPayPeriod>> executeWithHttpInfo() throws ApiException {
            return getUnprocessedTerminationPayPeriodsWithHttpInfo(companyId, xGustoAPIVersion);
        }

        /**
         * Execute getUnprocessedTerminationPayPeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UnprocessedTerminationPayPeriod>> _callback) throws ApiException {
            return getUnprocessedTerminationPayPeriodsAsync(companyId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get termination pay periods for a company
     * When a payroll admin terminates an employee and selects \&quot;Dismissal Payroll\&quot; as the employee&#39;s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetUnprocessedTerminationPayPeriodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetUnprocessedTerminationPayPeriodsRequestBuilder getUnprocessedTerminationPayPeriods(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetUnprocessedTerminationPayPeriodsRequestBuilder(companyId);
    }
    private okhttp3.Call listForCompanyCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForCompanyValidateBeforeCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listForCompany(Async)");
        }

        return listForCompanyCall(companyId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<PaySchedule>> listForCompanyWithHttpInfo(String companyId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listForCompanyValidateBeforeCall(companyId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<PaySchedule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForCompanyAsync(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<List<PaySchedule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForCompanyValidateBeforeCall(companyId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<PaySchedule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForCompanyRequestBuilder {
        private final String companyId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private ListForCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return ListForCompanyRequestBuilder
         */
        public ListForCompanyRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return ListForCompanyRequestBuilder
         */
        public ListForCompanyRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListForCompanyRequestBuilder
         */
        public ListForCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listForCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForCompanyCall(companyId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listForCompany request
         * @return List&lt;PaySchedule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<PaySchedule> execute() throws ApiException {
            ApiResponse<List<PaySchedule>> localVarResp = listForCompanyWithHttpInfo(companyId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForCompany request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PaySchedule&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PaySchedule>> executeWithHttpInfo() throws ApiException {
            return listForCompanyWithHttpInfo(companyId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute listForCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PaySchedule>> _callback) throws ApiException {
            return listForCompanyAsync(companyId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get the pay schedules for a company
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: &#x60;pay_schedules:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return ListForCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListForCompanyRequestBuilder listForCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListForCompanyRequestBuilder(companyId);
    }
    private okhttp3.Call previewAssignmentsForCompanyCall(String companyId, String xGustoAPIVersion, PayScheduleAssignmentBody payScheduleAssignmentBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payScheduleAssignmentBody;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules/assignment_preview"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewAssignmentsForCompanyValidateBeforeCall(String companyId, String xGustoAPIVersion, PayScheduleAssignmentBody payScheduleAssignmentBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling previewAssignmentsForCompany(Async)");
        }

        return previewAssignmentsForCompanyCall(companyId, xGustoAPIVersion, payScheduleAssignmentBody, _callback);

    }


    private ApiResponse<PayScheduleAssignmentPreview> previewAssignmentsForCompanyWithHttpInfo(String companyId, String xGustoAPIVersion, PayScheduleAssignmentBody payScheduleAssignmentBody) throws ApiException {
        okhttp3.Call localVarCall = previewAssignmentsForCompanyValidateBeforeCall(companyId, xGustoAPIVersion, payScheduleAssignmentBody, null);
        Type localVarReturnType = new TypeToken<PayScheduleAssignmentPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call previewAssignmentsForCompanyAsync(String companyId, String xGustoAPIVersion, PayScheduleAssignmentBody payScheduleAssignmentBody, final ApiCallback<PayScheduleAssignmentPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewAssignmentsForCompanyValidateBeforeCall(companyId, xGustoAPIVersion, payScheduleAssignmentBody, _callback);
        Type localVarReturnType = new TypeToken<PayScheduleAssignmentPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreviewAssignmentsForCompanyRequestBuilder {
        private final String type;
        private final String companyId;
        private String hourlyPayScheduleUuid;
        private String salariedPayScheduleUuid;
        private String defaultPayScheduleUuid;
        private List<PayScheduleAssignmentBodyEmployeesInner> employees;
        private List<PayScheduleAssignmentBodyDepartmentsInner> departments;
        private String xGustoAPIVersion;

        private PreviewAssignmentsForCompanyRequestBuilder(String type, String companyId) {
            this.type = type;
            this.companyId = companyId;
        }

        /**
         * Set hourlyPayScheduleUuid
         * @param hourlyPayScheduleUuid Pay schedule for hourly employees. (optional)
         * @return PreviewAssignmentsForCompanyRequestBuilder
         */
        public PreviewAssignmentsForCompanyRequestBuilder hourlyPayScheduleUuid(String hourlyPayScheduleUuid) {
            this.hourlyPayScheduleUuid = hourlyPayScheduleUuid;
            return this;
        }
        
        /**
         * Set salariedPayScheduleUuid
         * @param salariedPayScheduleUuid Pay schedule for salaried employees. (optional)
         * @return PreviewAssignmentsForCompanyRequestBuilder
         */
        public PreviewAssignmentsForCompanyRequestBuilder salariedPayScheduleUuid(String salariedPayScheduleUuid) {
            this.salariedPayScheduleUuid = salariedPayScheduleUuid;
            return this;
        }
        
        /**
         * Set defaultPayScheduleUuid
         * @param defaultPayScheduleUuid Default pay schedule for employees. (optional)
         * @return PreviewAssignmentsForCompanyRequestBuilder
         */
        public PreviewAssignmentsForCompanyRequestBuilder defaultPayScheduleUuid(String defaultPayScheduleUuid) {
            this.defaultPayScheduleUuid = defaultPayScheduleUuid;
            return this;
        }
        
        /**
         * Set employees
         * @param employees List of employees and their pay schedules. (optional)
         * @return PreviewAssignmentsForCompanyRequestBuilder
         */
        public PreviewAssignmentsForCompanyRequestBuilder employees(List<PayScheduleAssignmentBodyEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set departments
         * @param departments List of departments and their pay schedules. (optional)
         * @return PreviewAssignmentsForCompanyRequestBuilder
         */
        public PreviewAssignmentsForCompanyRequestBuilder departments(List<PayScheduleAssignmentBodyDepartmentsInner> departments) {
            this.departments = departments;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return PreviewAssignmentsForCompanyRequestBuilder
         */
        public PreviewAssignmentsForCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for previewAssignmentsForCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayScheduleAssignmentBody payScheduleAssignmentBody = buildBodyParams();
            return previewAssignmentsForCompanyCall(companyId, xGustoAPIVersion, payScheduleAssignmentBody, _callback);
        }

        private PayScheduleAssignmentBody buildBodyParams() {
            PayScheduleAssignmentBody payScheduleAssignmentBody = new PayScheduleAssignmentBody();
            if (this.type != null)
            payScheduleAssignmentBody.type(PayScheduleAssignmentBody.TypeEnum.fromValue(this.type));
            payScheduleAssignmentBody.hourlyPayScheduleUuid(this.hourlyPayScheduleUuid);
            payScheduleAssignmentBody.salariedPayScheduleUuid(this.salariedPayScheduleUuid);
            payScheduleAssignmentBody.defaultPayScheduleUuid(this.defaultPayScheduleUuid);
            payScheduleAssignmentBody.employees(this.employees);
            payScheduleAssignmentBody.departments(this.departments);
            return payScheduleAssignmentBody;
        }

        /**
         * Execute previewAssignmentsForCompany request
         * @return PayScheduleAssignmentPreview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayScheduleAssignmentPreview execute() throws ApiException {
            PayScheduleAssignmentBody payScheduleAssignmentBody = buildBodyParams();
            ApiResponse<PayScheduleAssignmentPreview> localVarResp = previewAssignmentsForCompanyWithHttpInfo(companyId, xGustoAPIVersion, payScheduleAssignmentBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute previewAssignmentsForCompany request with HTTP info returned
         * @return ApiResponse&lt;PayScheduleAssignmentPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayScheduleAssignmentPreview> executeWithHttpInfo() throws ApiException {
            PayScheduleAssignmentBody payScheduleAssignmentBody = buildBodyParams();
            return previewAssignmentsForCompanyWithHttpInfo(companyId, xGustoAPIVersion, payScheduleAssignmentBody);
        }

        /**
         * Execute previewAssignmentsForCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayScheduleAssignmentPreview> _callback) throws ApiException {
            PayScheduleAssignmentBody payScheduleAssignmentBody = buildBodyParams();
            return previewAssignmentsForCompanyAsync(companyId, xGustoAPIVersion, payScheduleAssignmentBody, _callback);
        }
    }

    /**
     * Preview pay schedule assignments for a company
     * This endpoints returns the employee changes, including pay period and transition pay periods, for changing the pay schedule.  scope: &#x60;pay_schedules:write&#x60;
     * @param companyId The UUID of the company (required)
     * @return PreviewAssignmentsForCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public PreviewAssignmentsForCompanyRequestBuilder previewAssignmentsForCompany(String type, String companyId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new PreviewAssignmentsForCompanyRequestBuilder(type, companyId);
    }
    private okhttp3.Call previewPayScheduleDatesCall(String companyId, String frequency, String anchorPayDate, String anchorEndOfPayPeriod, Integer day1, Integer day2, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules/preview"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (frequency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("frequency", frequency));
        }

        if (anchorPayDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anchor_pay_date", anchorPayDate));
        }

        if (anchorEndOfPayPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anchor_end_of_pay_period", anchorEndOfPayPeriod));
        }

        if (day1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day_1", day1));
        }

        if (day2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day_2", day2));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewPayScheduleDatesValidateBeforeCall(String companyId, String frequency, String anchorPayDate, String anchorEndOfPayPeriod, Integer day1, Integer day2, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling previewPayScheduleDates(Async)");
        }

        return previewPayScheduleDatesCall(companyId, frequency, anchorPayDate, anchorEndOfPayPeriod, day1, day2, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PaySchedulesPreviewPayScheduleDatesResponse> previewPayScheduleDatesWithHttpInfo(String companyId, String frequency, String anchorPayDate, String anchorEndOfPayPeriod, Integer day1, Integer day2, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = previewPayScheduleDatesValidateBeforeCall(companyId, frequency, anchorPayDate, anchorEndOfPayPeriod, day1, day2, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PaySchedulesPreviewPayScheduleDatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call previewPayScheduleDatesAsync(String companyId, String frequency, String anchorPayDate, String anchorEndOfPayPeriod, Integer day1, Integer day2, String xGustoAPIVersion, final ApiCallback<PaySchedulesPreviewPayScheduleDatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewPayScheduleDatesValidateBeforeCall(companyId, frequency, anchorPayDate, anchorEndOfPayPeriod, day1, day2, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PaySchedulesPreviewPayScheduleDatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreviewPayScheduleDatesRequestBuilder {
        private final String companyId;
        private String frequency;
        private String anchorPayDate;
        private String anchorEndOfPayPeriod;
        private Integer day1;
        private Integer day2;
        private String xGustoAPIVersion;

        private PreviewPayScheduleDatesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set frequency
         * @param frequency The frequency that employees on this pay schedule are paid with Gusto. (optional)
         * @return PreviewPayScheduleDatesRequestBuilder
         */
        public PreviewPayScheduleDatesRequestBuilder frequency(String frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set anchorPayDate
         * @param anchorPayDate The first date that employees on this pay schedule are paid with Gusto. (optional)
         * @return PreviewPayScheduleDatesRequestBuilder
         */
        public PreviewPayScheduleDatesRequestBuilder anchorPayDate(String anchorPayDate) {
            this.anchorPayDate = anchorPayDate;
            return this;
        }
        
        /**
         * Set anchorEndOfPayPeriod
         * @param anchorEndOfPayPeriod The last date of the first pay period. This can be the same date as the anchor pay date. (optional)
         * @return PreviewPayScheduleDatesRequestBuilder
         */
        public PreviewPayScheduleDatesRequestBuilder anchorEndOfPayPeriod(String anchorEndOfPayPeriod) {
            this.anchorEndOfPayPeriod = anchorEndOfPayPeriod;
            return this;
        }
        
        /**
         * Set day1
         * @param day1 An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies. (optional)
         * @return PreviewPayScheduleDatesRequestBuilder
         */
        public PreviewPayScheduleDatesRequestBuilder day1(Integer day1) {
            this.day1 = day1;
            return this;
        }
        
        /**
         * Set day2
         * @param day2 An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the \&quot;Twice per month\&quot; frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies. (optional)
         * @return PreviewPayScheduleDatesRequestBuilder
         */
        public PreviewPayScheduleDatesRequestBuilder day2(Integer day2) {
            this.day2 = day2;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return PreviewPayScheduleDatesRequestBuilder
         */
        public PreviewPayScheduleDatesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for previewPayScheduleDates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return previewPayScheduleDatesCall(companyId, frequency, anchorPayDate, anchorEndOfPayPeriod, day1, day2, xGustoAPIVersion, _callback);
        }


        /**
         * Execute previewPayScheduleDates request
         * @return PaySchedulesPreviewPayScheduleDatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PaySchedulesPreviewPayScheduleDatesResponse execute() throws ApiException {
            ApiResponse<PaySchedulesPreviewPayScheduleDatesResponse> localVarResp = previewPayScheduleDatesWithHttpInfo(companyId, frequency, anchorPayDate, anchorEndOfPayPeriod, day1, day2, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute previewPayScheduleDates request with HTTP info returned
         * @return ApiResponse&lt;PaySchedulesPreviewPayScheduleDatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaySchedulesPreviewPayScheduleDatesResponse> executeWithHttpInfo() throws ApiException {
            return previewPayScheduleDatesWithHttpInfo(companyId, frequency, anchorPayDate, anchorEndOfPayPeriod, day1, day2, xGustoAPIVersion);
        }

        /**
         * Execute previewPayScheduleDates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaySchedulesPreviewPayScheduleDatesResponse> _callback) throws ApiException {
            return previewPayScheduleDatesAsync(companyId, frequency, anchorPayDate, anchorEndOfPayPeriod, day1, day2, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Preview pay schedule dates
     * Provides a preview of a pay schedule with the specified parameters  scope: &#x60;pay_schedules:write&#x60;
     * @param companyId The UUID of the company (required)
     * @return PreviewPayScheduleDatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewPayScheduleDatesRequestBuilder previewPayScheduleDates(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new PreviewPayScheduleDatesRequestBuilder(companyId);
    }
    private okhttp3.Call updatePayScheduleCall(String companyId, String payScheduleId, String xGustoAPIVersion, PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paySchedulesUpdatePayScheduleRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "pay_schedule_id" + "}", localVarApiClient.escapeString(payScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayScheduleValidateBeforeCall(String companyId, String payScheduleId, String xGustoAPIVersion, PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updatePaySchedule(Async)");
        }

        // verify the required parameter 'payScheduleId' is set
        if (payScheduleId == null) {
            throw new ApiException("Missing the required parameter 'payScheduleId' when calling updatePaySchedule(Async)");
        }

        return updatePayScheduleCall(companyId, payScheduleId, xGustoAPIVersion, paySchedulesUpdatePayScheduleRequest, _callback);

    }


    private ApiResponse<PaySchedule> updatePayScheduleWithHttpInfo(String companyId, String payScheduleId, String xGustoAPIVersion, PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePayScheduleValidateBeforeCall(companyId, payScheduleId, xGustoAPIVersion, paySchedulesUpdatePayScheduleRequest, null);
        Type localVarReturnType = new TypeToken<PaySchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePayScheduleAsync(String companyId, String payScheduleId, String xGustoAPIVersion, PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest, final ApiCallback<PaySchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayScheduleValidateBeforeCall(companyId, payScheduleId, xGustoAPIVersion, paySchedulesUpdatePayScheduleRequest, _callback);
        Type localVarReturnType = new TypeToken<PaySchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePayScheduleRequestBuilder {
        private final String version;
        private final String companyId;
        private final String payScheduleId;
        private String frequency;
        private String anchorPayDate;
        private String anchorEndOfPayPeriod;
        private Integer day1;
        private Integer day2;
        private String customName;
        private Boolean autoPilot;
        private String xGustoAPIVersion;

        private UpdatePayScheduleRequestBuilder(String version, String companyId, String payScheduleId) {
            this.version = version;
            this.companyId = companyId;
            this.payScheduleId = payScheduleId;
        }

        /**
         * Set frequency
         * @param frequency The frequency that employees on this pay schedule are paid with Gusto. (optional)
         * @return UpdatePayScheduleRequestBuilder
         */
        public UpdatePayScheduleRequestBuilder frequency(String frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set anchorPayDate
         * @param anchorPayDate The first date that employees on this pay schedule are paid with Gusto. (optional)
         * @return UpdatePayScheduleRequestBuilder
         */
        public UpdatePayScheduleRequestBuilder anchorPayDate(String anchorPayDate) {
            this.anchorPayDate = anchorPayDate;
            return this;
        }
        
        /**
         * Set anchorEndOfPayPeriod
         * @param anchorEndOfPayPeriod The last date of the first pay period. This can be the same date as the anchor pay date. (optional)
         * @return UpdatePayScheduleRequestBuilder
         */
        public UpdatePayScheduleRequestBuilder anchorEndOfPayPeriod(String anchorEndOfPayPeriod) {
            this.anchorEndOfPayPeriod = anchorEndOfPayPeriod;
            return this;
        }
        
        /**
         * Set day1
         * @param day1 An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies. (optional)
         * @return UpdatePayScheduleRequestBuilder
         */
        public UpdatePayScheduleRequestBuilder day1(Integer day1) {
            this.day1 = day1;
            return this;
        }
        
        /**
         * Set day2
         * @param day2 An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the \\\&quot;Twice per month\\\&quot; frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies. (optional)
         * @return UpdatePayScheduleRequestBuilder
         */
        public UpdatePayScheduleRequestBuilder day2(Integer day2) {
            this.day2 = day2;
            return this;
        }
        
        /**
         * Set customName
         * @param customName A custom pay schedule name. (optional)
         * @return UpdatePayScheduleRequestBuilder
         */
        public UpdatePayScheduleRequestBuilder customName(String customName) {
            this.customName = customName;
            return this;
        }
        
        /**
         * Set autoPilot
         * @param autoPilot With Autopilot® enabled, payroll will run automatically one day before your payroll deadlines. (optional)
         * @return UpdatePayScheduleRequestBuilder
         */
        public UpdatePayScheduleRequestBuilder autoPilot(Boolean autoPilot) {
            this.autoPilot = autoPilot;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdatePayScheduleRequestBuilder
         */
        public UpdatePayScheduleRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updatePaySchedule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest = buildBodyParams();
            return updatePayScheduleCall(companyId, payScheduleId, xGustoAPIVersion, paySchedulesUpdatePayScheduleRequest, _callback);
        }

        private PaySchedulesUpdatePayScheduleRequest buildBodyParams() {
            PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest = new PaySchedulesUpdatePayScheduleRequest();
            paySchedulesUpdatePayScheduleRequest.version(this.version);
            if (this.frequency != null)
            paySchedulesUpdatePayScheduleRequest.frequency(PaySchedulesUpdatePayScheduleRequest.FrequencyEnum.fromValue(this.frequency));
            paySchedulesUpdatePayScheduleRequest.anchorPayDate(this.anchorPayDate);
            paySchedulesUpdatePayScheduleRequest.anchorEndOfPayPeriod(this.anchorEndOfPayPeriod);
            paySchedulesUpdatePayScheduleRequest.day1(this.day1);
            paySchedulesUpdatePayScheduleRequest.day2(this.day2);
            paySchedulesUpdatePayScheduleRequest.customName(this.customName);
            paySchedulesUpdatePayScheduleRequest.autoPilot(this.autoPilot);
            return paySchedulesUpdatePayScheduleRequest;
        }

        /**
         * Execute updatePaySchedule request
         * @return PaySchedule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PaySchedule execute() throws ApiException {
            PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest = buildBodyParams();
            ApiResponse<PaySchedule> localVarResp = updatePayScheduleWithHttpInfo(companyId, payScheduleId, xGustoAPIVersion, paySchedulesUpdatePayScheduleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePaySchedule request with HTTP info returned
         * @return ApiResponse&lt;PaySchedule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaySchedule> executeWithHttpInfo() throws ApiException {
            PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest = buildBodyParams();
            return updatePayScheduleWithHttpInfo(companyId, payScheduleId, xGustoAPIVersion, paySchedulesUpdatePayScheduleRequest);
        }

        /**
         * Execute updatePaySchedule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaySchedule> _callback) throws ApiException {
            PaySchedulesUpdatePayScheduleRequest paySchedulesUpdatePayScheduleRequest = buildBodyParams();
            return updatePayScheduleAsync(companyId, payScheduleId, xGustoAPIVersion, paySchedulesUpdatePayScheduleRequest, _callback);
        }
    }

    /**
     * Update a pay schedule
     * Updates a pay schedule.  scope: &#x60;pay_schedules:write&#x60;
     * @param companyId The UUID of the company (required)
     * @param payScheduleId The UUID of the pay schedule (required)
     * @return UpdatePayScheduleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePayScheduleRequestBuilder updatePaySchedule(String version, String companyId, String payScheduleId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payScheduleId == null) throw new IllegalArgumentException("\"payScheduleId\" is required but got null");
            

        return new UpdatePayScheduleRequestBuilder(version, companyId, payScheduleId);
    }
}
