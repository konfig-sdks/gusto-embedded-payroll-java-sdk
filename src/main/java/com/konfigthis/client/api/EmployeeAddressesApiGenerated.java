/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeAddress;
import com.konfigthis.client.model.EmployeeAddressesCreateHomeAddressRequest;
import com.konfigthis.client.model.EmployeeAddressesCreateWorkAddressRequest;
import com.konfigthis.client.model.EmployeeAddressesUpdateHomeAddressRequest;
import com.konfigthis.client.model.EmployeeAddressesUpdateWorkAddressRequest;
import com.konfigthis.client.model.EmployeeWorkAddress;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeAddressesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeAddressesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeAddressesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createHomeAddressCall(String employeeId, String xGustoAPIVersion, EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeAddressesCreateHomeAddressRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/home_addresses"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHomeAddressValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createHomeAddress(Async)");
        }

        return createHomeAddressCall(employeeId, xGustoAPIVersion, employeeAddressesCreateHomeAddressRequest, _callback);

    }


    private ApiResponse<EmployeeAddress> createHomeAddressWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = createHomeAddressValidateBeforeCall(employeeId, xGustoAPIVersion, employeeAddressesCreateHomeAddressRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createHomeAddressAsync(String employeeId, String xGustoAPIVersion, EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest, final ApiCallback<EmployeeAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHomeAddressValidateBeforeCall(employeeId, xGustoAPIVersion, employeeAddressesCreateHomeAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateHomeAddressRequestBuilder {
        private final String employeeId;
        private String street1;
        private String street2;
        private String city;
        private String state;
        private String zip;
        private LocalDate effectiveDate;
        private Boolean courtesyWithholding;
        private String xGustoAPIVersion;

        private CreateHomeAddressRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set street1
         * @param street1  (optional)
         * @return CreateHomeAddressRequestBuilder
         */
        public CreateHomeAddressRequestBuilder street1(String street1) {
            this.street1 = street1;
            return this;
        }
        
        /**
         * Set street2
         * @param street2  (optional)
         * @return CreateHomeAddressRequestBuilder
         */
        public CreateHomeAddressRequestBuilder street2(String street2) {
            this.street2 = street2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return CreateHomeAddressRequestBuilder
         */
        public CreateHomeAddressRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return CreateHomeAddressRequestBuilder
         */
        public CreateHomeAddressRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip  (optional)
         * @return CreateHomeAddressRequestBuilder
         */
        public CreateHomeAddressRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return CreateHomeAddressRequestBuilder
         */
        public CreateHomeAddressRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set courtesyWithholding
         * @param courtesyWithholding  (optional)
         * @return CreateHomeAddressRequestBuilder
         */
        public CreateHomeAddressRequestBuilder courtesyWithholding(Boolean courtesyWithholding) {
            this.courtesyWithholding = courtesyWithholding;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateHomeAddressRequestBuilder
         */
        public CreateHomeAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createHomeAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest = buildBodyParams();
            return createHomeAddressCall(employeeId, xGustoAPIVersion, employeeAddressesCreateHomeAddressRequest, _callback);
        }

        private EmployeeAddressesCreateHomeAddressRequest buildBodyParams() {
            EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest = new EmployeeAddressesCreateHomeAddressRequest();
            employeeAddressesCreateHomeAddressRequest.street1(this.street1);
            employeeAddressesCreateHomeAddressRequest.street2(this.street2);
            employeeAddressesCreateHomeAddressRequest.city(this.city);
            employeeAddressesCreateHomeAddressRequest.state(this.state);
            employeeAddressesCreateHomeAddressRequest.zip(this.zip);
            employeeAddressesCreateHomeAddressRequest.effectiveDate(this.effectiveDate);
            employeeAddressesCreateHomeAddressRequest.courtesyWithholding(this.courtesyWithholding);
            return employeeAddressesCreateHomeAddressRequest;
        }

        /**
         * Execute createHomeAddress request
         * @return EmployeeAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAddress execute() throws ApiException {
            EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest = buildBodyParams();
            ApiResponse<EmployeeAddress> localVarResp = createHomeAddressWithHttpInfo(employeeId, xGustoAPIVersion, employeeAddressesCreateHomeAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createHomeAddress request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAddress> executeWithHttpInfo() throws ApiException {
            EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest = buildBodyParams();
            return createHomeAddressWithHttpInfo(employeeId, xGustoAPIVersion, employeeAddressesCreateHomeAddressRequest);
        }

        /**
         * Execute createHomeAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAddress> _callback) throws ApiException {
            EmployeeAddressesCreateHomeAddressRequest employeeAddressesCreateHomeAddressRequest = buildBodyParams();
            return createHomeAddressAsync(employeeId, xGustoAPIVersion, employeeAddressesCreateHomeAddressRequest, _callback);
        }
    }

    /**
     * Create an employee&#39;s home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: &#x60;employees:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateHomeAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateHomeAddressRequestBuilder createHomeAddress(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateHomeAddressRequestBuilder(employeeId);
    }
    private okhttp3.Call createWorkAddressCall(String employeeId, String xGustoAPIVersion, EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeAddressesCreateWorkAddressRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/work_addresses"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkAddressValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createWorkAddress(Async)");
        }

        return createWorkAddressCall(employeeId, xGustoAPIVersion, employeeAddressesCreateWorkAddressRequest, _callback);

    }


    private ApiResponse<EmployeeWorkAddress> createWorkAddressWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = createWorkAddressValidateBeforeCall(employeeId, xGustoAPIVersion, employeeAddressesCreateWorkAddressRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeWorkAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWorkAddressAsync(String employeeId, String xGustoAPIVersion, EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest, final ApiCallback<EmployeeWorkAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkAddressValidateBeforeCall(employeeId, xGustoAPIVersion, employeeAddressesCreateWorkAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeWorkAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWorkAddressRequestBuilder {
        private final String employeeId;
        private String locationUuid;
        private LocalDate effectiveDate;
        private String xGustoAPIVersion;

        private CreateWorkAddressRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set locationUuid
         * @param locationUuid Reference to a company location (optional)
         * @return CreateWorkAddressRequestBuilder
         */
        public CreateWorkAddressRequestBuilder locationUuid(String locationUuid) {
            this.locationUuid = locationUuid;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate Date the employee began working at the company location (optional)
         * @return CreateWorkAddressRequestBuilder
         */
        public CreateWorkAddressRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateWorkAddressRequestBuilder
         */
        public CreateWorkAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createWorkAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest = buildBodyParams();
            return createWorkAddressCall(employeeId, xGustoAPIVersion, employeeAddressesCreateWorkAddressRequest, _callback);
        }

        private EmployeeAddressesCreateWorkAddressRequest buildBodyParams() {
            EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest = new EmployeeAddressesCreateWorkAddressRequest();
            employeeAddressesCreateWorkAddressRequest.locationUuid(this.locationUuid);
            employeeAddressesCreateWorkAddressRequest.effectiveDate(this.effectiveDate);
            return employeeAddressesCreateWorkAddressRequest;
        }

        /**
         * Execute createWorkAddress request
         * @return EmployeeWorkAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeWorkAddress execute() throws ApiException {
            EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest = buildBodyParams();
            ApiResponse<EmployeeWorkAddress> localVarResp = createWorkAddressWithHttpInfo(employeeId, xGustoAPIVersion, employeeAddressesCreateWorkAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWorkAddress request with HTTP info returned
         * @return ApiResponse&lt;EmployeeWorkAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeWorkAddress> executeWithHttpInfo() throws ApiException {
            EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest = buildBodyParams();
            return createWorkAddressWithHttpInfo(employeeId, xGustoAPIVersion, employeeAddressesCreateWorkAddressRequest);
        }

        /**
         * Execute createWorkAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeWorkAddress> _callback) throws ApiException {
            EmployeeAddressesCreateWorkAddressRequest employeeAddressesCreateWorkAddressRequest = buildBodyParams();
            return createWorkAddressAsync(employeeId, xGustoAPIVersion, employeeAddressesCreateWorkAddressRequest, _callback);
        }
    }

    /**
     * Create an employee work address
     * The work address of an employee describes when an employee began working at an associated company location.  scope: &#x60;employees:manage&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateWorkAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateWorkAddressRequestBuilder createWorkAddress(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateWorkAddressRequestBuilder(employeeId);
    }
    private okhttp3.Call deleteHomeCall(String homeAddressUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/home_addresses/{home_address_uuid}"
            .replace("{" + "home_address_uuid" + "}", localVarApiClient.escapeString(homeAddressUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHomeValidateBeforeCall(String homeAddressUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'homeAddressUuid' is set
        if (homeAddressUuid == null) {
            throw new ApiException("Missing the required parameter 'homeAddressUuid' when calling deleteHome(Async)");
        }

        return deleteHomeCall(homeAddressUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteHomeWithHttpInfo(String homeAddressUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteHomeValidateBeforeCall(homeAddressUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteHomeAsync(String homeAddressUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHomeValidateBeforeCall(homeAddressUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteHomeRequestBuilder {
        private final String homeAddressUuid;
        private String xGustoAPIVersion;

        private DeleteHomeRequestBuilder(String homeAddressUuid) {
            this.homeAddressUuid = homeAddressUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteHomeRequestBuilder
         */
        public DeleteHomeRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteHome
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteHomeCall(homeAddressUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteHome request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteHomeWithHttpInfo(homeAddressUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteHome request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteHomeWithHttpInfo(homeAddressUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteHome request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteHomeAsync(homeAddressUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an employee&#39;s home address
     * Used for deleting an employee&#39;s home address.  Cannot delete the employee&#39;s active home address.  scope: &#x60;employees:write&#x60;
     * @param homeAddressUuid The UUID of the home address (required)
     * @return DeleteHomeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteHomeRequestBuilder deleteHome(String homeAddressUuid) throws IllegalArgumentException {
        if (homeAddressUuid == null) throw new IllegalArgumentException("\"homeAddressUuid\" is required but got null");
            

        return new DeleteHomeRequestBuilder(homeAddressUuid);
    }
    private okhttp3.Call deleteWorkAddressCall(String workAddressUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/work_addresses/{work_address_uuid}"
            .replace("{" + "work_address_uuid" + "}", localVarApiClient.escapeString(workAddressUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkAddressValidateBeforeCall(String workAddressUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workAddressUuid' is set
        if (workAddressUuid == null) {
            throw new ApiException("Missing the required parameter 'workAddressUuid' when calling deleteWorkAddress(Async)");
        }

        return deleteWorkAddressCall(workAddressUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteWorkAddressWithHttpInfo(String workAddressUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkAddressValidateBeforeCall(workAddressUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWorkAddressAsync(String workAddressUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkAddressValidateBeforeCall(workAddressUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteWorkAddressRequestBuilder {
        private final String workAddressUuid;
        private String xGustoAPIVersion;

        private DeleteWorkAddressRequestBuilder(String workAddressUuid) {
            this.workAddressUuid = workAddressUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteWorkAddressRequestBuilder
         */
        public DeleteWorkAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteWorkAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkAddressCall(workAddressUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteWorkAddress request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWorkAddressWithHttpInfo(workAddressUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteWorkAddress request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWorkAddressWithHttpInfo(workAddressUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteWorkAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWorkAddressAsync(workAddressUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an employee&#39;s work address
     * Used for deleting an employee&#39;s work address.  Cannot delete the employee&#39;s active work address.  scope: &#x60;employees:manage&#x60;
     * @param workAddressUuid The UUID of the work address (required)
     * @return DeleteWorkAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteWorkAddressRequestBuilder deleteWorkAddress(String workAddressUuid) throws IllegalArgumentException {
        if (workAddressUuid == null) throw new IllegalArgumentException("\"workAddressUuid\" is required but got null");
            

        return new DeleteWorkAddressRequestBuilder(workAddressUuid);
    }
    private okhttp3.Call getHomeAddressCall(String homeAddressUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/home_addresses/{home_address_uuid}"
            .replace("{" + "home_address_uuid" + "}", localVarApiClient.escapeString(homeAddressUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeAddressValidateBeforeCall(String homeAddressUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'homeAddressUuid' is set
        if (homeAddressUuid == null) {
            throw new ApiException("Missing the required parameter 'homeAddressUuid' when calling getHomeAddress(Async)");
        }

        return getHomeAddressCall(homeAddressUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<EmployeeAddress> getHomeAddressWithHttpInfo(String homeAddressUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getHomeAddressValidateBeforeCall(homeAddressUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<EmployeeAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeAddressAsync(String homeAddressUuid, String xGustoAPIVersion, final ApiCallback<EmployeeAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeAddressValidateBeforeCall(homeAddressUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeAddressRequestBuilder {
        private final String homeAddressUuid;
        private String xGustoAPIVersion;

        private GetHomeAddressRequestBuilder(String homeAddressUuid) {
            this.homeAddressUuid = homeAddressUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetHomeAddressRequestBuilder
         */
        public GetHomeAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getHomeAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeAddressCall(homeAddressUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getHomeAddress request
         * @return EmployeeAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAddress execute() throws ApiException {
            ApiResponse<EmployeeAddress> localVarResp = getHomeAddressWithHttpInfo(homeAddressUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeAddress request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAddress> executeWithHttpInfo() throws ApiException {
            return getHomeAddressWithHttpInfo(homeAddressUuid, xGustoAPIVersion);
        }

        /**
         * Execute getHomeAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAddress> _callback) throws ApiException {
            return getHomeAddressAsync(homeAddressUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee&#39;s home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: &#x60;employees:read&#x60;
     * @param homeAddressUuid The UUID of the home address (required)
     * @return GetHomeAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeAddressRequestBuilder getHomeAddress(String homeAddressUuid) throws IllegalArgumentException {
        if (homeAddressUuid == null) throw new IllegalArgumentException("\"homeAddressUuid\" is required but got null");
            

        return new GetHomeAddressRequestBuilder(homeAddressUuid);
    }
    private okhttp3.Call getHomeAddressesCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/home_addresses"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeAddressesValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getHomeAddresses(Async)");
        }

        return getHomeAddressesCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<EmployeeAddress>> getHomeAddressesWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getHomeAddressesValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<EmployeeAddress>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeAddressesAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<List<EmployeeAddress>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeAddressesValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeAddress>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeAddressesRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private GetHomeAddressesRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetHomeAddressesRequestBuilder
         */
        public GetHomeAddressesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getHomeAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee addresses </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeAddressesCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getHomeAddresses request
         * @return List&lt;EmployeeAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee addresses </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeAddress> execute() throws ApiException {
            ApiResponse<List<EmployeeAddress>> localVarResp = getHomeAddressesWithHttpInfo(employeeId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeAddresses request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeAddress&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee addresses </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeAddress>> executeWithHttpInfo() throws ApiException {
            return getHomeAddressesWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute getHomeAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee addresses </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeAddress>> _callback) throws ApiException {
            return getHomeAddressesAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee&#39;s home addresses
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: &#x60;employees:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetHomeAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of employee addresses </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeAddressesRequestBuilder getHomeAddresses(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetHomeAddressesRequestBuilder(employeeId);
    }
    private okhttp3.Call getWorkAddressCall(String workAddressUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/work_addresses/{work_address_uuid}"
            .replace("{" + "work_address_uuid" + "}", localVarApiClient.escapeString(workAddressUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkAddressValidateBeforeCall(String workAddressUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workAddressUuid' is set
        if (workAddressUuid == null) {
            throw new ApiException("Missing the required parameter 'workAddressUuid' when calling getWorkAddress(Async)");
        }

        return getWorkAddressCall(workAddressUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<EmployeeWorkAddress> getWorkAddressWithHttpInfo(String workAddressUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getWorkAddressValidateBeforeCall(workAddressUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<EmployeeWorkAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkAddressAsync(String workAddressUuid, String xGustoAPIVersion, final ApiCallback<EmployeeWorkAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkAddressValidateBeforeCall(workAddressUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<EmployeeWorkAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkAddressRequestBuilder {
        private final String workAddressUuid;
        private String xGustoAPIVersion;

        private GetWorkAddressRequestBuilder(String workAddressUuid) {
            this.workAddressUuid = workAddressUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetWorkAddressRequestBuilder
         */
        public GetWorkAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getWorkAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkAddressCall(workAddressUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getWorkAddress request
         * @return EmployeeWorkAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeWorkAddress execute() throws ApiException {
            ApiResponse<EmployeeWorkAddress> localVarResp = getWorkAddressWithHttpInfo(workAddressUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkAddress request with HTTP info returned
         * @return ApiResponse&lt;EmployeeWorkAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeWorkAddress> executeWithHttpInfo() throws ApiException {
            return getWorkAddressWithHttpInfo(workAddressUuid, xGustoAPIVersion);
        }

        /**
         * Execute getWorkAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeWorkAddress> _callback) throws ApiException {
            return getWorkAddressAsync(workAddressUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee work address
     * The work address of an employee is used for payroll tax purposes.  scope: &#x60;employees:read&#x60;
     * @param workAddressUuid The UUID of the work address (required)
     * @return GetWorkAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkAddressRequestBuilder getWorkAddress(String workAddressUuid) throws IllegalArgumentException {
        if (workAddressUuid == null) throw new IllegalArgumentException("\"workAddressUuid\" is required but got null");
            

        return new GetWorkAddressRequestBuilder(workAddressUuid);
    }
    private okhttp3.Call listWorkAddressesCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/work_addresses"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkAddressesValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listWorkAddresses(Async)");
        }

        return listWorkAddressesCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<EmployeeWorkAddress>> listWorkAddressesWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listWorkAddressesValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<EmployeeWorkAddress>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkAddressesAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<List<EmployeeWorkAddress>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkAddressesValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeWorkAddress>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkAddressesRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private ListWorkAddressesRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListWorkAddressesRequestBuilder
         */
        public ListWorkAddressesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listWorkAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee work addresses </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkAddressesCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listWorkAddresses request
         * @return List&lt;EmployeeWorkAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee work addresses </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeWorkAddress> execute() throws ApiException {
            ApiResponse<List<EmployeeWorkAddress>> localVarResp = listWorkAddressesWithHttpInfo(employeeId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkAddresses request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeWorkAddress&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee work addresses </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeWorkAddress>> executeWithHttpInfo() throws ApiException {
            return listWorkAddressesWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute listWorkAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee work addresses </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeWorkAddress>> _callback) throws ApiException {
            return listWorkAddressesAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee&#39;s work addresses
     * Returns a list of an employee&#39;s work addresses. Each address includes its effective date and a boolean signifying if it is the currently active work address.  scope: &#x60;employees:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return ListWorkAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of employee work addresses </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkAddressesRequestBuilder listWorkAddresses(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListWorkAddressesRequestBuilder(employeeId);
    }
    private okhttp3.Call updateHomeAddressCall(String homeAddressUuid, String xGustoAPIVersion, EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeAddressesUpdateHomeAddressRequest;

        // create path and map variables
        String localVarPath = "/v1/home_addresses/{home_address_uuid}"
            .replace("{" + "home_address_uuid" + "}", localVarApiClient.escapeString(homeAddressUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHomeAddressValidateBeforeCall(String homeAddressUuid, String xGustoAPIVersion, EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'homeAddressUuid' is set
        if (homeAddressUuid == null) {
            throw new ApiException("Missing the required parameter 'homeAddressUuid' when calling updateHomeAddress(Async)");
        }

        return updateHomeAddressCall(homeAddressUuid, xGustoAPIVersion, employeeAddressesUpdateHomeAddressRequest, _callback);

    }


    private ApiResponse<EmployeeAddress> updateHomeAddressWithHttpInfo(String homeAddressUuid, String xGustoAPIVersion, EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = updateHomeAddressValidateBeforeCall(homeAddressUuid, xGustoAPIVersion, employeeAddressesUpdateHomeAddressRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateHomeAddressAsync(String homeAddressUuid, String xGustoAPIVersion, EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest, final ApiCallback<EmployeeAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHomeAddressValidateBeforeCall(homeAddressUuid, xGustoAPIVersion, employeeAddressesUpdateHomeAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateHomeAddressRequestBuilder {
        private final String version;
        private final String homeAddressUuid;
        private String street1;
        private String street2;
        private String city;
        private String state;
        private String zip;
        private LocalDate effectiveDate;
        private Boolean courtesyWithholding;
        private String xGustoAPIVersion;

        private UpdateHomeAddressRequestBuilder(String version, String homeAddressUuid) {
            this.version = version;
            this.homeAddressUuid = homeAddressUuid;
        }

        /**
         * Set street1
         * @param street1  (optional)
         * @return UpdateHomeAddressRequestBuilder
         */
        public UpdateHomeAddressRequestBuilder street1(String street1) {
            this.street1 = street1;
            return this;
        }
        
        /**
         * Set street2
         * @param street2  (optional)
         * @return UpdateHomeAddressRequestBuilder
         */
        public UpdateHomeAddressRequestBuilder street2(String street2) {
            this.street2 = street2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return UpdateHomeAddressRequestBuilder
         */
        public UpdateHomeAddressRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateHomeAddressRequestBuilder
         */
        public UpdateHomeAddressRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip  (optional)
         * @return UpdateHomeAddressRequestBuilder
         */
        public UpdateHomeAddressRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return UpdateHomeAddressRequestBuilder
         */
        public UpdateHomeAddressRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set courtesyWithholding
         * @param courtesyWithholding  (optional)
         * @return UpdateHomeAddressRequestBuilder
         */
        public UpdateHomeAddressRequestBuilder courtesyWithholding(Boolean courtesyWithholding) {
            this.courtesyWithholding = courtesyWithholding;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateHomeAddressRequestBuilder
         */
        public UpdateHomeAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateHomeAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest = buildBodyParams();
            return updateHomeAddressCall(homeAddressUuid, xGustoAPIVersion, employeeAddressesUpdateHomeAddressRequest, _callback);
        }

        private EmployeeAddressesUpdateHomeAddressRequest buildBodyParams() {
            EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest = new EmployeeAddressesUpdateHomeAddressRequest();
            employeeAddressesUpdateHomeAddressRequest.version(this.version);
            employeeAddressesUpdateHomeAddressRequest.street1(this.street1);
            employeeAddressesUpdateHomeAddressRequest.street2(this.street2);
            employeeAddressesUpdateHomeAddressRequest.city(this.city);
            employeeAddressesUpdateHomeAddressRequest.state(this.state);
            employeeAddressesUpdateHomeAddressRequest.zip(this.zip);
            employeeAddressesUpdateHomeAddressRequest.effectiveDate(this.effectiveDate);
            employeeAddressesUpdateHomeAddressRequest.courtesyWithholding(this.courtesyWithholding);
            return employeeAddressesUpdateHomeAddressRequest;
        }

        /**
         * Execute updateHomeAddress request
         * @return EmployeeAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAddress execute() throws ApiException {
            EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest = buildBodyParams();
            ApiResponse<EmployeeAddress> localVarResp = updateHomeAddressWithHttpInfo(homeAddressUuid, xGustoAPIVersion, employeeAddressesUpdateHomeAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateHomeAddress request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAddress> executeWithHttpInfo() throws ApiException {
            EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest = buildBodyParams();
            return updateHomeAddressWithHttpInfo(homeAddressUuid, xGustoAPIVersion, employeeAddressesUpdateHomeAddressRequest);
        }

        /**
         * Execute updateHomeAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAddress> _callback) throws ApiException {
            EmployeeAddressesUpdateHomeAddressRequest employeeAddressesUpdateHomeAddressRequest = buildBodyParams();
            return updateHomeAddressAsync(homeAddressUuid, xGustoAPIVersion, employeeAddressesUpdateHomeAddressRequest, _callback);
        }
    }

    /**
     * Update an employee&#39;s home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: &#x60;employees:write&#x60;
     * @param homeAddressUuid The UUID of the home address (required)
     * @return UpdateHomeAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHomeAddressRequestBuilder updateHomeAddress(String version, String homeAddressUuid) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (homeAddressUuid == null) throw new IllegalArgumentException("\"homeAddressUuid\" is required but got null");
            

        return new UpdateHomeAddressRequestBuilder(version, homeAddressUuid);
    }
    private okhttp3.Call updateWorkAddressCall(String workAddressUuid, String xGustoAPIVersion, EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeAddressesUpdateWorkAddressRequest;

        // create path and map variables
        String localVarPath = "/v1/work_addresses/{work_address_uuid}"
            .replace("{" + "work_address_uuid" + "}", localVarApiClient.escapeString(workAddressUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkAddressValidateBeforeCall(String workAddressUuid, String xGustoAPIVersion, EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workAddressUuid' is set
        if (workAddressUuid == null) {
            throw new ApiException("Missing the required parameter 'workAddressUuid' when calling updateWorkAddress(Async)");
        }

        return updateWorkAddressCall(workAddressUuid, xGustoAPIVersion, employeeAddressesUpdateWorkAddressRequest, _callback);

    }


    private ApiResponse<EmployeeWorkAddress> updateWorkAddressWithHttpInfo(String workAddressUuid, String xGustoAPIVersion, EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkAddressValidateBeforeCall(workAddressUuid, xGustoAPIVersion, employeeAddressesUpdateWorkAddressRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeWorkAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkAddressAsync(String workAddressUuid, String xGustoAPIVersion, EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest, final ApiCallback<EmployeeWorkAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkAddressValidateBeforeCall(workAddressUuid, xGustoAPIVersion, employeeAddressesUpdateWorkAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeWorkAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWorkAddressRequestBuilder {
        private final String workAddressUuid;
        private String version;
        private String locationUuid;
        private LocalDate effectiveDate;
        private String xGustoAPIVersion;

        private UpdateWorkAddressRequestBuilder(String workAddressUuid) {
            this.workAddressUuid = workAddressUuid;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. (optional)
         * @return UpdateWorkAddressRequestBuilder
         */
        public UpdateWorkAddressRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set locationUuid
         * @param locationUuid Reference to a company location (optional)
         * @return UpdateWorkAddressRequestBuilder
         */
        public UpdateWorkAddressRequestBuilder locationUuid(String locationUuid) {
            this.locationUuid = locationUuid;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return UpdateWorkAddressRequestBuilder
         */
        public UpdateWorkAddressRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateWorkAddressRequestBuilder
         */
        public UpdateWorkAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateWorkAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest = buildBodyParams();
            return updateWorkAddressCall(workAddressUuid, xGustoAPIVersion, employeeAddressesUpdateWorkAddressRequest, _callback);
        }

        private EmployeeAddressesUpdateWorkAddressRequest buildBodyParams() {
            EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest = new EmployeeAddressesUpdateWorkAddressRequest();
            employeeAddressesUpdateWorkAddressRequest.version(this.version);
            employeeAddressesUpdateWorkAddressRequest.locationUuid(this.locationUuid);
            employeeAddressesUpdateWorkAddressRequest.effectiveDate(this.effectiveDate);
            return employeeAddressesUpdateWorkAddressRequest;
        }

        /**
         * Execute updateWorkAddress request
         * @return EmployeeWorkAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeWorkAddress execute() throws ApiException {
            EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest = buildBodyParams();
            ApiResponse<EmployeeWorkAddress> localVarResp = updateWorkAddressWithHttpInfo(workAddressUuid, xGustoAPIVersion, employeeAddressesUpdateWorkAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWorkAddress request with HTTP info returned
         * @return ApiResponse&lt;EmployeeWorkAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeWorkAddress> executeWithHttpInfo() throws ApiException {
            EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest = buildBodyParams();
            return updateWorkAddressWithHttpInfo(workAddressUuid, xGustoAPIVersion, employeeAddressesUpdateWorkAddressRequest);
        }

        /**
         * Execute updateWorkAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeWorkAddress> _callback) throws ApiException {
            EmployeeAddressesUpdateWorkAddressRequest employeeAddressesUpdateWorkAddressRequest = buildBodyParams();
            return updateWorkAddressAsync(workAddressUuid, xGustoAPIVersion, employeeAddressesUpdateWorkAddressRequest, _callback);
        }
    }

    /**
     * Update an employee work address
     * The work address of an employee is used for payroll tax purposes.  scope: &#x60;employees:manage&#x60;
     * @param workAddressUuid The UUID of the work address (required)
     * @return UpdateWorkAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkAddressRequestBuilder updateWorkAddress(String workAddressUuid) throws IllegalArgumentException {
        if (workAddressUuid == null) throw new IllegalArgumentException("\"workAddressUuid\" is required but got null");
            

        return new UpdateWorkAddressRequestBuilder(workAddressUuid);
    }
}
