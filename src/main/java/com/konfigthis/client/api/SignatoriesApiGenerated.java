/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SignatoriesCreateInviteRequest;
import com.konfigthis.client.model.SignatoriesCreateSignatoryWithCompleteInformationRequest;
import com.konfigthis.client.model.SignatoriesCreateSignatoryWithCompleteInformationRequestHomeAddress;
import com.konfigthis.client.model.SignatoriesUpdateRequest;
import com.konfigthis.client.model.SignatoriesUpdateRequestHomeAddress;
import com.konfigthis.client.model.Signatory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SignatoriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SignatoriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SignatoriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInviteCall(String companyUuid, String xGustoAPIVersion, SignatoriesCreateInviteRequest signatoriesCreateInviteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signatoriesCreateInviteRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/signatories/invite"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInviteValidateBeforeCall(String companyUuid, String xGustoAPIVersion, SignatoriesCreateInviteRequest signatoriesCreateInviteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling createInvite(Async)");
        }

        return createInviteCall(companyUuid, xGustoAPIVersion, signatoriesCreateInviteRequest, _callback);

    }


    private ApiResponse<Signatory> createInviteWithHttpInfo(String companyUuid, String xGustoAPIVersion, SignatoriesCreateInviteRequest signatoriesCreateInviteRequest) throws ApiException {
        okhttp3.Call localVarCall = createInviteValidateBeforeCall(companyUuid, xGustoAPIVersion, signatoriesCreateInviteRequest, null);
        Type localVarReturnType = new TypeToken<Signatory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInviteAsync(String companyUuid, String xGustoAPIVersion, SignatoriesCreateInviteRequest signatoriesCreateInviteRequest, final ApiCallback<Signatory> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInviteValidateBeforeCall(companyUuid, xGustoAPIVersion, signatoriesCreateInviteRequest, _callback);
        Type localVarReturnType = new TypeToken<Signatory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInviteRequestBuilder {
        private final String email;
        private final String companyUuid;
        private String title;
        private String firstName;
        private String lastName;
        private String xGustoAPIVersion;

        private CreateInviteRequestBuilder(String email, String companyUuid) {
            this.email = email;
            this.companyUuid = companyUuid;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createInvite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SignatoriesCreateInviteRequest signatoriesCreateInviteRequest = buildBodyParams();
            return createInviteCall(companyUuid, xGustoAPIVersion, signatoriesCreateInviteRequest, _callback);
        }

        private SignatoriesCreateInviteRequest buildBodyParams() {
            SignatoriesCreateInviteRequest signatoriesCreateInviteRequest = new SignatoriesCreateInviteRequest();
            signatoriesCreateInviteRequest.title(this.title);
            signatoriesCreateInviteRequest.firstName(this.firstName);
            signatoriesCreateInviteRequest.lastName(this.lastName);
            signatoriesCreateInviteRequest.email(this.email);
            return signatoriesCreateInviteRequest;
        }

        /**
         * Execute createInvite request
         * @return Signatory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Signatory execute() throws ApiException {
            SignatoriesCreateInviteRequest signatoriesCreateInviteRequest = buildBodyParams();
            ApiResponse<Signatory> localVarResp = createInviteWithHttpInfo(companyUuid, xGustoAPIVersion, signatoriesCreateInviteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInvite request with HTTP info returned
         * @return ApiResponse&lt;Signatory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Signatory> executeWithHttpInfo() throws ApiException {
            SignatoriesCreateInviteRequest signatoriesCreateInviteRequest = buildBodyParams();
            return createInviteWithHttpInfo(companyUuid, xGustoAPIVersion, signatoriesCreateInviteRequest);
        }

        /**
         * Execute createInvite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Signatory> _callback) throws ApiException {
            SignatoriesCreateInviteRequest signatoriesCreateInviteRequest = buildBodyParams();
            return createInviteAsync(companyUuid, xGustoAPIVersion, signatoriesCreateInviteRequest, _callback);
        }
    }

    /**
     * Invite a signatory
     * Create a signatory with minimal information. This signatory can be invited to provide more information through the &#x60;PUT /v1/companies/{company_uuid}/signatories/{signatory_uuid}&#x60; endpoint. This will start the identity verification process and allow the signatory to be verified to sign documents.
     * @param companyUuid The UUID of the company (required)
     * @return CreateInviteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateInviteRequestBuilder createInvite(String email, String companyUuid) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new CreateInviteRequestBuilder(email, companyUuid);
    }
    private okhttp3.Call createSignatoryWithCompleteInformationCall(String companyUuid, String xGustoAPIVersion, SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signatoriesCreateSignatoryWithCompleteInformationRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/signatories"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSignatoryWithCompleteInformationValidateBeforeCall(String companyUuid, String xGustoAPIVersion, SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling createSignatoryWithCompleteInformation(Async)");
        }

        return createSignatoryWithCompleteInformationCall(companyUuid, xGustoAPIVersion, signatoriesCreateSignatoryWithCompleteInformationRequest, _callback);

    }


    private ApiResponse<Signatory> createSignatoryWithCompleteInformationWithHttpInfo(String companyUuid, String xGustoAPIVersion, SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = createSignatoryWithCompleteInformationValidateBeforeCall(companyUuid, xGustoAPIVersion, signatoriesCreateSignatoryWithCompleteInformationRequest, null);
        Type localVarReturnType = new TypeToken<Signatory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSignatoryWithCompleteInformationAsync(String companyUuid, String xGustoAPIVersion, SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest, final ApiCallback<Signatory> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSignatoryWithCompleteInformationValidateBeforeCall(companyUuid, xGustoAPIVersion, signatoriesCreateSignatoryWithCompleteInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<Signatory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSignatoryWithCompleteInformationRequestBuilder {
        private final String title;
        private final String ssn;
        private final String firstName;
        private final String lastName;
        private final String email;
        private final String phone;
        private final String birthday;
        private final SignatoriesCreateSignatoryWithCompleteInformationRequestHomeAddress homeAddress;
        private final String companyUuid;
        private String middleInitial;
        private String xGustoAPIVersion;

        private CreateSignatoryWithCompleteInformationRequestBuilder(String title, String ssn, String firstName, String lastName, String email, String phone, String birthday, SignatoriesCreateSignatoryWithCompleteInformationRequestHomeAddress homeAddress, String companyUuid) {
            this.title = title;
            this.ssn = ssn;
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.phone = phone;
            this.birthday = birthday;
            this.homeAddress = homeAddress;
            this.companyUuid = companyUuid;
        }

        /**
         * Set middleInitial
         * @param middleInitial  (optional)
         * @return CreateSignatoryWithCompleteInformationRequestBuilder
         */
        public CreateSignatoryWithCompleteInformationRequestBuilder middleInitial(String middleInitial) {
            this.middleInitial = middleInitial;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateSignatoryWithCompleteInformationRequestBuilder
         */
        public CreateSignatoryWithCompleteInformationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createSignatoryWithCompleteInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest = buildBodyParams();
            return createSignatoryWithCompleteInformationCall(companyUuid, xGustoAPIVersion, signatoriesCreateSignatoryWithCompleteInformationRequest, _callback);
        }

        private SignatoriesCreateSignatoryWithCompleteInformationRequest buildBodyParams() {
            SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest = new SignatoriesCreateSignatoryWithCompleteInformationRequest();
            signatoriesCreateSignatoryWithCompleteInformationRequest.title(this.title);
            signatoriesCreateSignatoryWithCompleteInformationRequest.ssn(this.ssn);
            signatoriesCreateSignatoryWithCompleteInformationRequest.firstName(this.firstName);
            signatoriesCreateSignatoryWithCompleteInformationRequest.middleInitial(this.middleInitial);
            signatoriesCreateSignatoryWithCompleteInformationRequest.lastName(this.lastName);
            signatoriesCreateSignatoryWithCompleteInformationRequest.email(this.email);
            signatoriesCreateSignatoryWithCompleteInformationRequest.phone(this.phone);
            signatoriesCreateSignatoryWithCompleteInformationRequest.birthday(this.birthday);
            signatoriesCreateSignatoryWithCompleteInformationRequest.homeAddress(this.homeAddress);
            return signatoriesCreateSignatoryWithCompleteInformationRequest;
        }

        /**
         * Execute createSignatoryWithCompleteInformation request
         * @return Signatory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Signatory execute() throws ApiException {
            SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest = buildBodyParams();
            ApiResponse<Signatory> localVarResp = createSignatoryWithCompleteInformationWithHttpInfo(companyUuid, xGustoAPIVersion, signatoriesCreateSignatoryWithCompleteInformationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSignatoryWithCompleteInformation request with HTTP info returned
         * @return ApiResponse&lt;Signatory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Signatory> executeWithHttpInfo() throws ApiException {
            SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest = buildBodyParams();
            return createSignatoryWithCompleteInformationWithHttpInfo(companyUuid, xGustoAPIVersion, signatoriesCreateSignatoryWithCompleteInformationRequest);
        }

        /**
         * Execute createSignatoryWithCompleteInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Signatory> _callback) throws ApiException {
            SignatoriesCreateSignatoryWithCompleteInformationRequest signatoriesCreateSignatoryWithCompleteInformationRequest = buildBodyParams();
            return createSignatoryWithCompleteInformationAsync(companyUuid, xGustoAPIVersion, signatoriesCreateSignatoryWithCompleteInformationRequest, _callback);
        }
    }

    /**
     * Create a signatory
     * Create a company signatory with complete information. A signatory can legally sign forms once the identity verification process is successful.  scope: &#x60;signatories:manage&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return CreateSignatoryWithCompleteInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateSignatoryWithCompleteInformationRequestBuilder createSignatoryWithCompleteInformation(String title, String ssn, String firstName, String lastName, String email, String phone, String birthday, SignatoriesCreateSignatoryWithCompleteInformationRequestHomeAddress homeAddress, String companyUuid) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (ssn == null) throw new IllegalArgumentException("\"ssn\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (phone == null) throw new IllegalArgumentException("\"phone\" is required but got null");
            

        if (birthday == null) throw new IllegalArgumentException("\"birthday\" is required but got null");
            

        if (homeAddress == null) throw new IllegalArgumentException("\"homeAddress\" is required but got null");
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new CreateSignatoryWithCompleteInformationRequestBuilder(title, ssn, firstName, lastName, email, phone, birthday, homeAddress, companyUuid);
    }
    private okhttp3.Call deleteSignatoryCall(String companyUuid, String signatoryUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/signatories/{signatory_uuid}"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()))
            .replace("{" + "signatory_uuid" + "}", localVarApiClient.escapeString(signatoryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSignatoryValidateBeforeCall(String companyUuid, String signatoryUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling deleteSignatory(Async)");
        }

        // verify the required parameter 'signatoryUuid' is set
        if (signatoryUuid == null) {
            throw new ApiException("Missing the required parameter 'signatoryUuid' when calling deleteSignatory(Async)");
        }

        return deleteSignatoryCall(companyUuid, signatoryUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteSignatoryWithHttpInfo(String companyUuid, String signatoryUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSignatoryValidateBeforeCall(companyUuid, signatoryUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSignatoryAsync(String companyUuid, String signatoryUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSignatoryValidateBeforeCall(companyUuid, signatoryUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSignatoryRequestBuilder {
        private final String companyUuid;
        private final String signatoryUuid;
        private String xGustoAPIVersion;

        private DeleteSignatoryRequestBuilder(String companyUuid, String signatoryUuid) {
            this.companyUuid = companyUuid;
            this.signatoryUuid = signatoryUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteSignatoryRequestBuilder
         */
        public DeleteSignatoryRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteSignatory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSignatoryCall(companyUuid, signatoryUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteSignatory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSignatoryWithHttpInfo(companyUuid, signatoryUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteSignatory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSignatoryWithHttpInfo(companyUuid, signatoryUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteSignatory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSignatoryAsync(companyUuid, signatoryUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a signatory
     * Delete a company signatory.  scope: &#x60;signatories:manage&#x60;
     * @param companyUuid The UUID of the company (required)
     * @param signatoryUuid The UUID of the signatory (required)
     * @return DeleteSignatoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSignatoryRequestBuilder deleteSignatory(String companyUuid, String signatoryUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        if (signatoryUuid == null) throw new IllegalArgumentException("\"signatoryUuid\" is required but got null");
            

        return new DeleteSignatoryRequestBuilder(companyUuid, signatoryUuid);
    }
    private okhttp3.Call getCompanySignatoriesCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/signatories"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanySignatoriesValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getCompanySignatories(Async)");
        }

        return getCompanySignatoriesCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Signatory>> getCompanySignatoriesWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCompanySignatoriesValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Signatory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanySignatoriesAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<List<Signatory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanySignatoriesValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Signatory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanySignatoriesRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetCompanySignatoriesRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompanySignatoriesRequestBuilder
         */
        public GetCompanySignatoriesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompanySignatories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanySignatoriesCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCompanySignatories request
         * @return List&lt;Signatory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Signatory> execute() throws ApiException {
            ApiResponse<List<Signatory>> localVarResp = getCompanySignatoriesWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanySignatories request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Signatory&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Signatory>> executeWithHttpInfo() throws ApiException {
            return getCompanySignatoriesWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getCompanySignatories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Signatory>> _callback) throws ApiException {
            return getCompanySignatoriesAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all company signatories
     * Returns company signatories. Currently we only support a single signatory per company.  scope: &#x60;signatories:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetCompanySignatoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanySignatoriesRequestBuilder getCompanySignatories(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetCompanySignatoriesRequestBuilder(companyUuid);
    }
    private okhttp3.Call updateCall(String companyUuid, String signatoryUuid, String xGustoAPIVersion, SignatoriesUpdateRequest signatoriesUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signatoriesUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/signatories/{signatory_uuid}"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()))
            .replace("{" + "signatory_uuid" + "}", localVarApiClient.escapeString(signatoryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String companyUuid, String signatoryUuid, String xGustoAPIVersion, SignatoriesUpdateRequest signatoriesUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling update(Async)");
        }

        // verify the required parameter 'signatoryUuid' is set
        if (signatoryUuid == null) {
            throw new ApiException("Missing the required parameter 'signatoryUuid' when calling update(Async)");
        }

        return updateCall(companyUuid, signatoryUuid, xGustoAPIVersion, signatoriesUpdateRequest, _callback);

    }


    private ApiResponse<Signatory> updateWithHttpInfo(String companyUuid, String signatoryUuid, String xGustoAPIVersion, SignatoriesUpdateRequest signatoriesUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(companyUuid, signatoryUuid, xGustoAPIVersion, signatoriesUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Signatory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(String companyUuid, String signatoryUuid, String xGustoAPIVersion, SignatoriesUpdateRequest signatoriesUpdateRequest, final ApiCallback<Signatory> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(companyUuid, signatoryUuid, xGustoAPIVersion, signatoriesUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Signatory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String companyUuid;
        private final String signatoryUuid;
        private String title;
        private String version;
        private String firstName;
        private String middleInitial;
        private String lastName;
        private String phone;
        private String birthday;
        private String ssn;
        private SignatoriesUpdateRequestHomeAddress homeAddress;
        private String xGustoAPIVersion;

        private UpdateRequestBuilder(String companyUuid, String signatoryUuid) {
            this.companyUuid = companyUuid;
            this.signatoryUuid = signatoryUuid;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set version
         * @param version The current version of the object. See the versioning guide for information on how to use this field. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleInitial
         * @param middleInitial  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder middleInitial(String middleInitial) {
            this.middleInitial = middleInitial;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set phone
         * @param phone  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set birthday
         * @param birthday  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder birthday(String birthday) {
            this.birthday = birthday;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set homeAddress
         * @param homeAddress  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder homeAddress(SignatoriesUpdateRequestHomeAddress homeAddress) {
            this.homeAddress = homeAddress;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SignatoriesUpdateRequest signatoriesUpdateRequest = buildBodyParams();
            return updateCall(companyUuid, signatoryUuid, xGustoAPIVersion, signatoriesUpdateRequest, _callback);
        }

        private SignatoriesUpdateRequest buildBodyParams() {
            SignatoriesUpdateRequest signatoriesUpdateRequest = new SignatoriesUpdateRequest();
            signatoriesUpdateRequest.title(this.title);
            signatoriesUpdateRequest.version(this.version);
            signatoriesUpdateRequest.firstName(this.firstName);
            signatoriesUpdateRequest.middleInitial(this.middleInitial);
            signatoriesUpdateRequest.lastName(this.lastName);
            signatoriesUpdateRequest.phone(this.phone);
            signatoriesUpdateRequest.birthday(this.birthday);
            signatoriesUpdateRequest.ssn(this.ssn);
            signatoriesUpdateRequest.homeAddress(this.homeAddress);
            return signatoriesUpdateRequest;
        }

        /**
         * Execute update request
         * @return Signatory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Signatory execute() throws ApiException {
            SignatoriesUpdateRequest signatoriesUpdateRequest = buildBodyParams();
            ApiResponse<Signatory> localVarResp = updateWithHttpInfo(companyUuid, signatoryUuid, xGustoAPIVersion, signatoriesUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;Signatory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Signatory> executeWithHttpInfo() throws ApiException {
            SignatoriesUpdateRequest signatoriesUpdateRequest = buildBodyParams();
            return updateWithHttpInfo(companyUuid, signatoryUuid, xGustoAPIVersion, signatoriesUpdateRequest);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Signatory> _callback) throws ApiException {
            SignatoriesUpdateRequest signatoriesUpdateRequest = buildBodyParams();
            return updateAsync(companyUuid, signatoryUuid, xGustoAPIVersion, signatoriesUpdateRequest, _callback);
        }
    }

    /**
     * Update a signatory
     * Update a signatory that has been either invited or created. If the signatory has been created with minimal information through the &#x60;POST /v1/companies/{company_uuid}/signatories/invite&#x60; endpoint, then the first update must contain all attributes specified in the request body in order to start the identity verification process.  scope: &#x60;signatories:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @param signatoryUuid The UUID of the signatory (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update(String companyUuid, String signatoryUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        if (signatoryUuid == null) throw new IllegalArgumentException("\"signatoryUuid\" is required but got null");
            

        return new UpdateRequestBuilder(companyUuid, signatoryUuid);
    }
}
