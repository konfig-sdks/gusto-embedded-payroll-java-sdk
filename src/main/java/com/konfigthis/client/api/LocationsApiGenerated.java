/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.LocationsCreateCompanyLocationRequest;
import com.konfigthis.client.model.LocationsCreateCompanyLocationRequest1;
import com.konfigthis.client.model.LocationsUpdateLocationRequest;
import com.konfigthis.client.model.MinimumWage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCompanyLocationCall(String companyId, String xGustoAPIVersion, LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationsCreateCompanyLocationRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/locations"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompanyLocationValidateBeforeCall(String companyId, String xGustoAPIVersion, LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createCompanyLocation(Async)");
        }

        return createCompanyLocationCall(companyId, xGustoAPIVersion, locationsCreateCompanyLocationRequest, _callback);

    }


    private ApiResponse<Location> createCompanyLocationWithHttpInfo(String companyId, String xGustoAPIVersion, LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest) throws ApiException {
        okhttp3.Call localVarCall = createCompanyLocationValidateBeforeCall(companyId, xGustoAPIVersion, locationsCreateCompanyLocationRequest, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCompanyLocationAsync(String companyId, String xGustoAPIVersion, LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompanyLocationValidateBeforeCall(companyId, xGustoAPIVersion, locationsCreateCompanyLocationRequest, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCompanyLocationRequestBuilder {
        private final String phoneNumber;
        private final String street1;
        private final String city;
        private final String state;
        private final String zip;
        private final String companyId;
        private String street2;
        private String country;
        private Boolean mailingAddress;
        private Boolean filingAddress;
        private String xGustoAPIVersion;

        private CreateCompanyLocationRequestBuilder(String phoneNumber, String street1, String city, String state, String zip, String companyId) {
            this.phoneNumber = phoneNumber;
            this.street1 = street1;
            this.city = city;
            this.state = state;
            this.zip = zip;
            this.companyId = companyId;
        }

        /**
         * Set street2
         * @param street2  (optional)
         * @return CreateCompanyLocationRequestBuilder
         */
        public CreateCompanyLocationRequestBuilder street2(String street2) {
            this.street2 = street2;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional, default to USA)
         * @return CreateCompanyLocationRequestBuilder
         */
        public CreateCompanyLocationRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set mailingAddress
         * @param mailingAddress Specify if this location is the company&#39;s mailing address. (optional)
         * @return CreateCompanyLocationRequestBuilder
         */
        public CreateCompanyLocationRequestBuilder mailingAddress(Boolean mailingAddress) {
            this.mailingAddress = mailingAddress;
            return this;
        }
        
        /**
         * Set filingAddress
         * @param filingAddress Specify if this location is the company&#39;s filing address. (optional)
         * @return CreateCompanyLocationRequestBuilder
         */
        public CreateCompanyLocationRequestBuilder filingAddress(Boolean filingAddress) {
            this.filingAddress = filingAddress;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateCompanyLocationRequestBuilder
         */
        public CreateCompanyLocationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createCompanyLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest = buildBodyParams();
            return createCompanyLocationCall(companyId, xGustoAPIVersion, locationsCreateCompanyLocationRequest, _callback);
        }

        private LocationsCreateCompanyLocationRequest buildBodyParams() {
            LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest = new LocationsCreateCompanyLocationRequest();
            locationsCreateCompanyLocationRequest.phoneNumber(this.phoneNumber);
            locationsCreateCompanyLocationRequest.street1(this.street1);
            locationsCreateCompanyLocationRequest.street2(this.street2);
            locationsCreateCompanyLocationRequest.city(this.city);
            locationsCreateCompanyLocationRequest.state(this.state);
            locationsCreateCompanyLocationRequest.zip(this.zip);
            locationsCreateCompanyLocationRequest.country(this.country);
            locationsCreateCompanyLocationRequest.mailingAddress(this.mailingAddress);
            locationsCreateCompanyLocationRequest.filingAddress(this.filingAddress);
            return locationsCreateCompanyLocationRequest;
        }

        /**
         * Execute createCompanyLocation request
         * @return Location
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Location execute() throws ApiException {
            LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest = buildBodyParams();
            ApiResponse<Location> localVarResp = createCompanyLocationWithHttpInfo(companyId, xGustoAPIVersion, locationsCreateCompanyLocationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCompanyLocation request with HTTP info returned
         * @return ApiResponse&lt;Location&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Location> executeWithHttpInfo() throws ApiException {
            LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest = buildBodyParams();
            return createCompanyLocationWithHttpInfo(companyId, xGustoAPIVersion, locationsCreateCompanyLocationRequest);
        }

        /**
         * Execute createCompanyLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Location> _callback) throws ApiException {
            LocationsCreateCompanyLocationRequest locationsCreateCompanyLocationRequest = buildBodyParams();
            return createCompanyLocationAsync(companyId, xGustoAPIVersion, locationsCreateCompanyLocationRequest, _callback);
        }
    }

    /**
     * Create a company location
     * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: &#x60;companies.write&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateCompanyLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompanyLocationRequestBuilder createCompanyLocation(String phoneNumber, String street1, String city, String state, String zip, String companyId) throws IllegalArgumentException {
        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
            

        if (street1 == null) throw new IllegalArgumentException("\"street1\" is required but got null");
            

        if (city == null) throw new IllegalArgumentException("\"city\" is required but got null");
            

        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
            

        if (zip == null) throw new IllegalArgumentException("\"zip\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateCompanyLocationRequestBuilder(phoneNumber, street1, city, state, zip, companyId);
    }
    private okhttp3.Call getByIdCall(String locationId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/locations/{location_id}"
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String locationId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getById(Async)");
        }

        return getByIdCall(locationId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Location> getByIdWithHttpInfo(String locationId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(locationId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String locationId, String xGustoAPIVersion, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(locationId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String locationId;
        private String xGustoAPIVersion;

        private GetByIdRequestBuilder(String locationId) {
            this.locationId = locationId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(locationId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getById request
         * @return Location
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Location execute() throws ApiException {
            ApiResponse<Location> localVarResp = getByIdWithHttpInfo(locationId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Location&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Location> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(locationId, xGustoAPIVersion);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Location> _callback) throws ApiException {
            return getByIdAsync(locationId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a location
     * Get a location.  scope: &#x60;companies:read&#x60;
     * @param locationId The UUID of the location (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String locationId) throws IllegalArgumentException {
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
            

        return new GetByIdRequestBuilder(locationId);
    }
    private okhttp3.Call getCompanyLocationsCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/locations"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyLocationsValidateBeforeCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompanyLocations(Async)");
        }

        return getCompanyLocationsCall(companyId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Location>> getCompanyLocationsWithHttpInfo(String companyId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCompanyLocationsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Location>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyLocationsAsync(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<List<Location>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyLocationsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Location>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyLocationsRequestBuilder {
        private final String companyId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetCompanyLocationsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetCompanyLocationsRequestBuilder
         */
        public GetCompanyLocationsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetCompanyLocationsRequestBuilder
         */
        public GetCompanyLocationsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompanyLocationsRequestBuilder
         */
        public GetCompanyLocationsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompanyLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyLocationsCall(companyId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCompanyLocations request
         * @return List&lt;Location&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Location> execute() throws ApiException {
            ApiResponse<List<Location>> localVarResp = getCompanyLocationsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyLocations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Location&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Location>> executeWithHttpInfo() throws ApiException {
            return getCompanyLocationsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getCompanyLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Location>> _callback) throws ApiException {
            return getCompanyLocationsAsync(companyId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get company locations
     * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: &#x60;companies:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetCompanyLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyLocationsRequestBuilder getCompanyLocations(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCompanyLocationsRequestBuilder(companyId);
    }
    private okhttp3.Call getMinimumWagesCall(String locationUuid, String effectiveDate, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/locations/{location_uuid}/minimum_wages"
            .replace("{" + "location_uuid" + "}", localVarApiClient.escapeString(locationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effective_date", effectiveDate));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMinimumWagesValidateBeforeCall(String locationUuid, String effectiveDate, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationUuid' is set
        if (locationUuid == null) {
            throw new ApiException("Missing the required parameter 'locationUuid' when calling getMinimumWages(Async)");
        }

        return getMinimumWagesCall(locationUuid, effectiveDate, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<MinimumWage>> getMinimumWagesWithHttpInfo(String locationUuid, String effectiveDate, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getMinimumWagesValidateBeforeCall(locationUuid, effectiveDate, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<MinimumWage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMinimumWagesAsync(String locationUuid, String effectiveDate, String xGustoAPIVersion, final ApiCallback<List<MinimumWage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMinimumWagesValidateBeforeCall(locationUuid, effectiveDate, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<MinimumWage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMinimumWagesRequestBuilder {
        private final String locationUuid;
        private String effectiveDate;
        private String xGustoAPIVersion;

        private GetMinimumWagesRequestBuilder(String locationUuid) {
            this.locationUuid = locationUuid;
        }

        /**
         * Set effectiveDate
         * @param effectiveDate  (optional)
         * @return GetMinimumWagesRequestBuilder
         */
        public GetMinimumWagesRequestBuilder effectiveDate(String effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetMinimumWagesRequestBuilder
         */
        public GetMinimumWagesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getMinimumWages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMinimumWagesCall(locationUuid, effectiveDate, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getMinimumWages request
         * @return List&lt;MinimumWage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<MinimumWage> execute() throws ApiException {
            ApiResponse<List<MinimumWage>> localVarResp = getMinimumWagesWithHttpInfo(locationUuid, effectiveDate, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMinimumWages request with HTTP info returned
         * @return ApiResponse&lt;List&lt;MinimumWage&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<MinimumWage>> executeWithHttpInfo() throws ApiException {
            return getMinimumWagesWithHttpInfo(locationUuid, effectiveDate, xGustoAPIVersion);
        }

        /**
         * Execute getMinimumWages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<MinimumWage>> _callback) throws ApiException {
            return getMinimumWagesAsync(locationUuid, effectiveDate, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get minimum wages for a location
     * Get minimum wages for a location  scope: &#x60;companies:read&#x60;
     * @param locationUuid The UUID of the location (required)
     * @return GetMinimumWagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetMinimumWagesRequestBuilder getMinimumWages(String locationUuid) throws IllegalArgumentException {
        if (locationUuid == null) throw new IllegalArgumentException("\"locationUuid\" is required but got null");
            

        return new GetMinimumWagesRequestBuilder(locationUuid);
    }
    private okhttp3.Call updateLocationCall(String locationId, String xGustoAPIVersion, LocationsUpdateLocationRequest locationsUpdateLocationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationsUpdateLocationRequest;

        // create path and map variables
        String localVarPath = "/v1/locations/{location_id}"
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLocationValidateBeforeCall(String locationId, String xGustoAPIVersion, LocationsUpdateLocationRequest locationsUpdateLocationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling updateLocation(Async)");
        }

        return updateLocationCall(locationId, xGustoAPIVersion, locationsUpdateLocationRequest, _callback);

    }


    private ApiResponse<Location> updateLocationWithHttpInfo(String locationId, String xGustoAPIVersion, LocationsUpdateLocationRequest locationsUpdateLocationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLocationValidateBeforeCall(locationId, xGustoAPIVersion, locationsUpdateLocationRequest, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLocationAsync(String locationId, String xGustoAPIVersion, LocationsUpdateLocationRequest locationsUpdateLocationRequest, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLocationValidateBeforeCall(locationId, xGustoAPIVersion, locationsUpdateLocationRequest, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateLocationRequestBuilder {
        private final String locationId;
        private String version;
        private String phoneNumber;
        private String street1;
        private String street2;
        private String city;
        private String state;
        private String zip;
        private String country;
        private Boolean mailingAddress;
        private Boolean filingAddress;
        private String xGustoAPIVersion;

        private UpdateLocationRequestBuilder(String locationId) {
            this.locationId = locationId;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field. (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber  (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set street1
         * @param street1  (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder street1(String street1) {
            this.street1 = street1;
            return this;
        }
        
        /**
         * Set street2
         * @param street2  (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder street2(String street2) {
            this.street2 = street2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip  (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set mailingAddress
         * @param mailingAddress For a company location, specify if this location is the company&#39;s mailing address. A company has a single mailing address, so this designation will override any previous selection. (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder mailingAddress(Boolean mailingAddress) {
            this.mailingAddress = mailingAddress;
            return this;
        }
        
        /**
         * Set filingAddress
         * @param filingAddress For a company location, specify if this location is the company&#39;s filing address. A company has a single filing address, so this designation will override any previous selection. (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder filingAddress(Boolean filingAddress) {
            this.filingAddress = filingAddress;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateLocationRequestBuilder
         */
        public UpdateLocationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocationsUpdateLocationRequest locationsUpdateLocationRequest = buildBodyParams();
            return updateLocationCall(locationId, xGustoAPIVersion, locationsUpdateLocationRequest, _callback);
        }

        private LocationsUpdateLocationRequest buildBodyParams() {
            LocationsUpdateLocationRequest locationsUpdateLocationRequest = new LocationsUpdateLocationRequest();
            return locationsUpdateLocationRequest;
        }

        /**
         * Execute updateLocation request
         * @return Location
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Location execute() throws ApiException {
            LocationsUpdateLocationRequest locationsUpdateLocationRequest = buildBodyParams();
            ApiResponse<Location> localVarResp = updateLocationWithHttpInfo(locationId, xGustoAPIVersion, locationsUpdateLocationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateLocation request with HTTP info returned
         * @return ApiResponse&lt;Location&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Location> executeWithHttpInfo() throws ApiException {
            LocationsUpdateLocationRequest locationsUpdateLocationRequest = buildBodyParams();
            return updateLocationWithHttpInfo(locationId, xGustoAPIVersion, locationsUpdateLocationRequest);
        }

        /**
         * Execute updateLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Location> _callback) throws ApiException {
            LocationsUpdateLocationRequest locationsUpdateLocationRequest = buildBodyParams();
            return updateLocationAsync(locationId, xGustoAPIVersion, locationsUpdateLocationRequest, _callback);
        }
    }

    /**
     * Update a location
     * Update a location.  scope: &#x60;companies.write&#x60;
     * @param locationId The UUID of the location (required)
     * @return UpdateLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLocationRequestBuilder updateLocation(String locationId) throws IllegalArgumentException {
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
            

        return new UpdateLocationRequestBuilder(locationId);
    }
}
