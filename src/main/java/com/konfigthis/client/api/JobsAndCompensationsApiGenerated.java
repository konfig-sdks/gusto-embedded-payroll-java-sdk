/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Compensation;
import com.konfigthis.client.model.FlsaStatusType;
import com.konfigthis.client.model.Job;
import com.konfigthis.client.model.JobsAndCompensationsCreateCompensationRequest;
import com.konfigthis.client.model.JobsAndCompensationsCreateCompensationRequestMinimumWagesInner;
import com.konfigthis.client.model.JobsAndCompensationsCreateJobRequest;
import com.konfigthis.client.model.JobsAndCompensationsUpdateCompensationRequest;
import com.konfigthis.client.model.JobsAndCompensationsUpdateJobRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobsAndCompensationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsAndCompensationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobsAndCompensationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCompensationCall(String jobId, String xGustoAPIVersion, JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsAndCompensationsCreateCompensationRequest;

        // create path and map variables
        String localVarPath = "/v1/jobs/{job_id}/compensations"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompensationValidateBeforeCall(String jobId, String xGustoAPIVersion, JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling createCompensation(Async)");
        }

        return createCompensationCall(jobId, xGustoAPIVersion, jobsAndCompensationsCreateCompensationRequest, _callback);

    }


    private ApiResponse<Compensation> createCompensationWithHttpInfo(String jobId, String xGustoAPIVersion, JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest) throws ApiException {
        okhttp3.Call localVarCall = createCompensationValidateBeforeCall(jobId, xGustoAPIVersion, jobsAndCompensationsCreateCompensationRequest, null);
        Type localVarReturnType = new TypeToken<Compensation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCompensationAsync(String jobId, String xGustoAPIVersion, JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest, final ApiCallback<Compensation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompensationValidateBeforeCall(jobId, xGustoAPIVersion, jobsAndCompensationsCreateCompensationRequest, _callback);
        Type localVarReturnType = new TypeToken<Compensation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCompensationRequestBuilder {
        private final String paymentUnit;
        private final FlsaStatusType flsaStatus;
        private final String jobId;
        private String rate;
        private String effectiveDate;
        private Boolean adjustForMinimumWage;
        private List<JobsAndCompensationsCreateCompensationRequestMinimumWagesInner> minimumWages;
        private String xGustoAPIVersion;

        private CreateCompensationRequestBuilder(String paymentUnit, FlsaStatusType flsaStatus, String jobId) {
            this.paymentUnit = paymentUnit;
            this.flsaStatus = flsaStatus;
            this.jobId = jobId;
        }

        /**
         * Set rate
         * @param rate The dollar amount paid per payment unit. (optional)
         * @return CreateCompensationRequestBuilder
         */
        public CreateCompensationRequestBuilder rate(String rate) {
            this.rate = rate;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date when the compensation takes effect. (optional)
         * @return CreateCompensationRequestBuilder
         */
        public CreateCompensationRequestBuilder effectiveDate(String effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set adjustForMinimumWage
         * @param adjustForMinimumWage Determines whether the compensation should be adjusted for minimum wage. Only applies to Nonexempt employees. (optional)
         * @return CreateCompensationRequestBuilder
         */
        public CreateCompensationRequestBuilder adjustForMinimumWage(Boolean adjustForMinimumWage) {
            this.adjustForMinimumWage = adjustForMinimumWage;
            return this;
        }
        
        /**
         * Set minimumWages
         * @param minimumWages  (optional)
         * @return CreateCompensationRequestBuilder
         */
        public CreateCompensationRequestBuilder minimumWages(List<JobsAndCompensationsCreateCompensationRequestMinimumWagesInner> minimumWages) {
            this.minimumWages = minimumWages;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateCompensationRequestBuilder
         */
        public CreateCompensationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createCompensation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest = buildBodyParams();
            return createCompensationCall(jobId, xGustoAPIVersion, jobsAndCompensationsCreateCompensationRequest, _callback);
        }

        private JobsAndCompensationsCreateCompensationRequest buildBodyParams() {
            JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest = new JobsAndCompensationsCreateCompensationRequest();
            jobsAndCompensationsCreateCompensationRequest.rate(this.rate);
            if (this.paymentUnit != null)
            jobsAndCompensationsCreateCompensationRequest.paymentUnit(JobsAndCompensationsCreateCompensationRequest.PaymentUnitEnum.fromValue(this.paymentUnit));
            jobsAndCompensationsCreateCompensationRequest.effectiveDate(this.effectiveDate);
            jobsAndCompensationsCreateCompensationRequest.flsaStatus(this.flsaStatus);
            jobsAndCompensationsCreateCompensationRequest.adjustForMinimumWage(this.adjustForMinimumWage);
            jobsAndCompensationsCreateCompensationRequest.minimumWages(this.minimumWages);
            return jobsAndCompensationsCreateCompensationRequest;
        }

        /**
         * Execute createCompensation request
         * @return Compensation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Compensation execute() throws ApiException {
            JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest = buildBodyParams();
            ApiResponse<Compensation> localVarResp = createCompensationWithHttpInfo(jobId, xGustoAPIVersion, jobsAndCompensationsCreateCompensationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCompensation request with HTTP info returned
         * @return ApiResponse&lt;Compensation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Compensation> executeWithHttpInfo() throws ApiException {
            JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest = buildBodyParams();
            return createCompensationWithHttpInfo(jobId, xGustoAPIVersion, jobsAndCompensationsCreateCompensationRequest);
        }

        /**
         * Execute createCompensation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Compensation> _callback) throws ApiException {
            JobsAndCompensationsCreateCompensationRequest jobsAndCompensationsCreateCompensationRequest = buildBodyParams();
            return createCompensationAsync(jobId, xGustoAPIVersion, jobsAndCompensationsCreateCompensationRequest, _callback);
        }
    }

    /**
     * Create a compensation
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;.  scope: &#x60;jobs:write&#x60;
     * @param jobId The UUID of the job (required)
     * @return CreateCompensationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompensationRequestBuilder createCompensation(String paymentUnit, FlsaStatusType flsaStatus, String jobId) throws IllegalArgumentException {
        if (paymentUnit == null) throw new IllegalArgumentException("\"paymentUnit\" is required but got null");
            

        if (flsaStatus == null) throw new IllegalArgumentException("\"flsaStatus\" is required but got null");
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new CreateCompensationRequestBuilder(paymentUnit, flsaStatus, jobId);
    }
    private okhttp3.Call createJobCall(String employeeId, String xGustoAPIVersion, JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsAndCompensationsCreateJobRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/jobs"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobValidateBeforeCall(String employeeId, String xGustoAPIVersion, JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createJob(Async)");
        }

        return createJobCall(employeeId, xGustoAPIVersion, jobsAndCompensationsCreateJobRequest, _callback);

    }


    private ApiResponse<Job> createJobWithHttpInfo(String employeeId, String xGustoAPIVersion, JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest) throws ApiException {
        okhttp3.Call localVarCall = createJobValidateBeforeCall(employeeId, xGustoAPIVersion, jobsAndCompensationsCreateJobRequest, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createJobAsync(String employeeId, String xGustoAPIVersion, JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJobValidateBeforeCall(employeeId, xGustoAPIVersion, jobsAndCompensationsCreateJobRequest, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateJobRequestBuilder {
        private final String title;
        private final String hireDate;
        private final String employeeId;
        private Boolean twoPercentShareholder;
        private Boolean stateWcCovered;
        private String stateWcClassCode;
        private String xGustoAPIVersion;

        private CreateJobRequestBuilder(String title, String hireDate, String employeeId) {
            this.title = title;
            this.hireDate = hireDate;
            this.employeeId = employeeId;
        }

        /**
         * Set twoPercentShareholder
         * @param twoPercentShareholder Whether the employee owns at least 2% of the company. (optional)
         * @return CreateJobRequestBuilder
         */
        public CreateJobRequestBuilder twoPercentShareholder(Boolean twoPercentShareholder) {
            this.twoPercentShareholder = twoPercentShareholder;
            return this;
        }
        
        /**
         * Set stateWcCovered
         * @param stateWcCovered Whether this job is eligible for workers&#39; compensation coverage in the state of Washington (WA). (optional)
         * @return CreateJobRequestBuilder
         */
        public CreateJobRequestBuilder stateWcCovered(Boolean stateWcCovered) {
            this.stateWcCovered = stateWcCovered;
            return this;
        }
        
        /**
         * Set stateWcClassCode
         * @param stateWcClassCode The risk class code for workers&#39; compensation in Washington state. Please visit [Washington state&#39;s Risk Class page](https://www.lni.wa.gov/insurance/rates-risk-classes/risk-classes-for-workers-compensation/risk-class-lookup#/) to learn more. (optional)
         * @return CreateJobRequestBuilder
         */
        public CreateJobRequestBuilder stateWcClassCode(String stateWcClassCode) {
            this.stateWcClassCode = stateWcClassCode;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateJobRequestBuilder
         */
        public CreateJobRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest = buildBodyParams();
            return createJobCall(employeeId, xGustoAPIVersion, jobsAndCompensationsCreateJobRequest, _callback);
        }

        private JobsAndCompensationsCreateJobRequest buildBodyParams() {
            JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest = new JobsAndCompensationsCreateJobRequest();
            jobsAndCompensationsCreateJobRequest.title(this.title);
            jobsAndCompensationsCreateJobRequest.hireDate(this.hireDate);
            jobsAndCompensationsCreateJobRequest.twoPercentShareholder(this.twoPercentShareholder);
            jobsAndCompensationsCreateJobRequest.stateWcCovered(this.stateWcCovered);
            jobsAndCompensationsCreateJobRequest.stateWcClassCode(this.stateWcClassCode);
            return jobsAndCompensationsCreateJobRequest;
        }

        /**
         * Execute createJob request
         * @return Job
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Job execute() throws ApiException {
            JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest = buildBodyParams();
            ApiResponse<Job> localVarResp = createJobWithHttpInfo(employeeId, xGustoAPIVersion, jobsAndCompensationsCreateJobRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createJob request with HTTP info returned
         * @return ApiResponse&lt;Job&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Job> executeWithHttpInfo() throws ApiException {
            JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest = buildBodyParams();
            return createJobWithHttpInfo(employeeId, xGustoAPIVersion, jobsAndCompensationsCreateJobRequest);
        }

        /**
         * Execute createJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Job> _callback) throws ApiException {
            JobsAndCompensationsCreateJobRequest jobsAndCompensationsCreateJobRequest = buildBodyParams();
            return createJobAsync(employeeId, xGustoAPIVersion, jobsAndCompensationsCreateJobRequest, _callback);
        }
    }

    /**
     * Create a job
     * Create a job.  scope: &#x60;jobs:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateJobRequestBuilder createJob(String title, String hireDate, String employeeId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (hireDate == null) throw new IllegalArgumentException("\"hireDate\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateJobRequestBuilder(title, hireDate, employeeId);
    }
    private okhttp3.Call deleteJobByIdCall(String jobId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobByIdValidateBeforeCall(String jobId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling deleteJobById(Async)");
        }

        return deleteJobByIdCall(jobId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteJobByIdWithHttpInfo(String jobId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteJobByIdValidateBeforeCall(jobId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteJobByIdAsync(String jobId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobByIdValidateBeforeCall(jobId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteJobByIdRequestBuilder {
        private final String jobId;
        private String xGustoAPIVersion;

        private DeleteJobByIdRequestBuilder(String jobId) {
            this.jobId = jobId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteJobByIdRequestBuilder
         */
        public DeleteJobByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteJobById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteJobByIdCall(jobId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteJobById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteJobByIdWithHttpInfo(jobId, xGustoAPIVersion);
        }

        /**
         * Execute deleteJobById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteJobByIdWithHttpInfo(jobId, xGustoAPIVersion);
        }

        /**
         * Execute deleteJobById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteJobByIdAsync(jobId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an individual job
     * Deletes a specific job that an employee holds.  scope: &#x60;jobs:write&#x60;
     * @param jobId The UUID of the job (required)
     * @return DeleteJobByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteJobByIdRequestBuilder deleteJobById(String jobId) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new DeleteJobByIdRequestBuilder(jobId);
    }
    private okhttp3.Call getCompensationByIdCall(String compensationId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/compensations/{compensation_id}"
            .replace("{" + "compensation_id" + "}", localVarApiClient.escapeString(compensationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompensationByIdValidateBeforeCall(String compensationId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'compensationId' is set
        if (compensationId == null) {
            throw new ApiException("Missing the required parameter 'compensationId' when calling getCompensationById(Async)");
        }

        return getCompensationByIdCall(compensationId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Compensation> getCompensationByIdWithHttpInfo(String compensationId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCompensationByIdValidateBeforeCall(compensationId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Compensation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompensationByIdAsync(String compensationId, String xGustoAPIVersion, final ApiCallback<Compensation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompensationByIdValidateBeforeCall(compensationId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Compensation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompensationByIdRequestBuilder {
        private final String compensationId;
        private String xGustoAPIVersion;

        private GetCompensationByIdRequestBuilder(String compensationId) {
            this.compensationId = compensationId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompensationByIdRequestBuilder
         */
        public GetCompensationByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompensationById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompensationByIdCall(compensationId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCompensationById request
         * @return Compensation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Compensation execute() throws ApiException {
            ApiResponse<Compensation> localVarResp = getCompensationByIdWithHttpInfo(compensationId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompensationById request with HTTP info returned
         * @return ApiResponse&lt;Compensation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Compensation> executeWithHttpInfo() throws ApiException {
            return getCompensationByIdWithHttpInfo(compensationId, xGustoAPIVersion);
        }

        /**
         * Execute getCompensationById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Compensation> _callback) throws ApiException {
            return getCompensationByIdAsync(compensationId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a compensation
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;.  scope: &#x60;jobs:read&#x60; 
     * @param compensationId The UUID of the compensation (required)
     * @return GetCompensationByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompensationByIdRequestBuilder getCompensationById(String compensationId) throws IllegalArgumentException {
        if (compensationId == null) throw new IllegalArgumentException("\"compensationId\" is required but got null");
            

        return new GetCompensationByIdRequestBuilder(compensationId);
    }
    private okhttp3.Call getEmployeeJobsCall(String employeeId, Double page, Double per, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/jobs"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeJobsValidateBeforeCall(String employeeId, Double page, Double per, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeeJobs(Async)");
        }

        return getEmployeeJobsCall(employeeId, page, per, include, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Job>> getEmployeeJobsWithHttpInfo(String employeeId, Double page, Double per, String include, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeJobsValidateBeforeCall(employeeId, page, per, include, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeJobsAsync(String employeeId, Double page, Double per, String include, String xGustoAPIVersion, final ApiCallback<List<Job>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeJobsValidateBeforeCall(employeeId, page, per, include, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeJobsRequestBuilder {
        private final String employeeId;
        private Double page;
        private Double per;
        private String include;
        private String xGustoAPIVersion;

        private GetEmployeeJobsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetEmployeeJobsRequestBuilder
         */
        public GetEmployeeJobsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetEmployeeJobsRequestBuilder
         */
        public GetEmployeeJobsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set include
         * @param include Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation (optional)
         * @return GetEmployeeJobsRequestBuilder
         */
        public GetEmployeeJobsRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetEmployeeJobsRequestBuilder
         */
        public GetEmployeeJobsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getEmployeeJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeJobsCall(employeeId, page, per, include, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getEmployeeJobs request
         * @return List&lt;Job&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Job> execute() throws ApiException {
            ApiResponse<List<Job>> localVarResp = getEmployeeJobsWithHttpInfo(employeeId, page, per, include, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeJobs request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Job&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Job>> executeWithHttpInfo() throws ApiException {
            return getEmployeeJobsWithHttpInfo(employeeId, page, per, include, xGustoAPIVersion);
        }

        /**
         * Execute getEmployeeJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Job>> _callback) throws ApiException {
            return getEmployeeJobsAsync(employeeId, page, per, include, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get jobs for an employee
     * Get all of the jobs that an employee holds.  scope: &#x60;jobs:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetEmployeeJobsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeJobsRequestBuilder getEmployeeJobs(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetEmployeeJobsRequestBuilder(employeeId);
    }
    private okhttp3.Call getJobCompensationsCall(String jobId, Double page, Double per, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/jobs/{job_id}/compensations"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobCompensationsValidateBeforeCall(String jobId, Double page, Double per, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getJobCompensations(Async)");
        }

        return getJobCompensationsCall(jobId, page, per, include, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Compensation>> getJobCompensationsWithHttpInfo(String jobId, Double page, Double per, String include, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getJobCompensationsValidateBeforeCall(jobId, page, per, include, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Compensation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobCompensationsAsync(String jobId, Double page, Double per, String include, String xGustoAPIVersion, final ApiCallback<List<Compensation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobCompensationsValidateBeforeCall(jobId, page, per, include, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Compensation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobCompensationsRequestBuilder {
        private final String jobId;
        private Double page;
        private Double per;
        private String include;
        private String xGustoAPIVersion;

        private GetJobCompensationsRequestBuilder(String jobId) {
            this.jobId = jobId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetJobCompensationsRequestBuilder
         */
        public GetJobCompensationsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetJobCompensationsRequestBuilder
         */
        public GetJobCompensationsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set include
         * @param include Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation (optional)
         * @return GetJobCompensationsRequestBuilder
         */
        public GetJobCompensationsRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetJobCompensationsRequestBuilder
         */
        public GetJobCompensationsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getJobCompensations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobCompensationsCall(jobId, page, per, include, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getJobCompensations request
         * @return List&lt;Compensation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Compensation> execute() throws ApiException {
            ApiResponse<List<Compensation>> localVarResp = getJobCompensationsWithHttpInfo(jobId, page, per, include, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobCompensations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Compensation&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Compensation>> executeWithHttpInfo() throws ApiException {
            return getJobCompensationsWithHttpInfo(jobId, page, per, include, xGustoAPIVersion);
        }

        /**
         * Execute getJobCompensations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Compensation>> _callback) throws ApiException {
            return getJobCompensationsAsync(jobId, page, per, include, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get compensations for a job
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;. By default the API returns only the current compensation - see the &#x60;include&#x60; query parameter for retrieving all compensations.  Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same &#x60;job_uuid&#x60; as another will fail with a relevant error.  Use &#x60;flsa_status&#x60; to determine if an employee is eligible for overtime.  scope: &#x60;jobs:read&#x60;
     * @param jobId The UUID of the job (required)
     * @return GetJobCompensationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetJobCompensationsRequestBuilder getJobCompensations(String jobId) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new GetJobCompensationsRequestBuilder(jobId);
    }
    private okhttp3.Call getJobDetailsCall(String jobId, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobDetailsValidateBeforeCall(String jobId, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getJobDetails(Async)");
        }

        return getJobDetailsCall(jobId, include, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Job> getJobDetailsWithHttpInfo(String jobId, String include, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getJobDetailsValidateBeforeCall(jobId, include, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobDetailsAsync(String jobId, String include, String xGustoAPIVersion, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobDetailsValidateBeforeCall(jobId, include, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobDetailsRequestBuilder {
        private final String jobId;
        private String include;
        private String xGustoAPIVersion;

        private GetJobDetailsRequestBuilder(String jobId) {
            this.jobId = jobId;
        }

        /**
         * Set include
         * @param include Available options: - all_compensations: Include all effective dated compensations for the job instead of only the current compensation (optional)
         * @return GetJobDetailsRequestBuilder
         */
        public GetJobDetailsRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetJobDetailsRequestBuilder
         */
        public GetJobDetailsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getJobDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobDetailsCall(jobId, include, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getJobDetails request
         * @return Job
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Job execute() throws ApiException {
            ApiResponse<Job> localVarResp = getJobDetailsWithHttpInfo(jobId, include, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobDetails request with HTTP info returned
         * @return ApiResponse&lt;Job&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Job> executeWithHttpInfo() throws ApiException {
            return getJobDetailsWithHttpInfo(jobId, include, xGustoAPIVersion);
        }

        /**
         * Execute getJobDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Job> _callback) throws ApiException {
            return getJobDetailsAsync(jobId, include, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a job
     * Get a job.  scope: &#x60;jobs:read&#x60;
     * @param jobId The UUID of the job (required)
     * @return GetJobDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetJobDetailsRequestBuilder getJobDetails(String jobId) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new GetJobDetailsRequestBuilder(jobId);
    }
    private okhttp3.Call removeCompensationCall(String compensationId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/compensations/{compensation_id}"
            .replace("{" + "compensation_id" + "}", localVarApiClient.escapeString(compensationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCompensationValidateBeforeCall(String compensationId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'compensationId' is set
        if (compensationId == null) {
            throw new ApiException("Missing the required parameter 'compensationId' when calling removeCompensation(Async)");
        }

        return removeCompensationCall(compensationId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> removeCompensationWithHttpInfo(String compensationId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = removeCompensationValidateBeforeCall(compensationId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCompensationAsync(String compensationId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCompensationValidateBeforeCall(compensationId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCompensationRequestBuilder {
        private final String compensationId;
        private String xGustoAPIVersion;

        private RemoveCompensationRequestBuilder(String compensationId) {
            this.compensationId = compensationId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return RemoveCompensationRequestBuilder
         */
        public RemoveCompensationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for removeCompensation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCompensationCall(compensationId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute removeCompensation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeCompensationWithHttpInfo(compensationId, xGustoAPIVersion);
        }

        /**
         * Execute removeCompensation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeCompensationWithHttpInfo(compensationId, xGustoAPIVersion);
        }

        /**
         * Execute removeCompensation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeCompensationAsync(compensationId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a compensation
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;. This endpoint deletes a compensation for a job that hasn&#39;t been processed on payroll.  scope: &#x60;jobs:write&#x60; 
     * @param compensationId The UUID of the compensation (required)
     * @return RemoveCompensationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCompensationRequestBuilder removeCompensation(String compensationId) throws IllegalArgumentException {
        if (compensationId == null) throw new IllegalArgumentException("\"compensationId\" is required but got null");
            

        return new RemoveCompensationRequestBuilder(compensationId);
    }
    private okhttp3.Call updateCompensationCall(String compensationId, String xGustoAPIVersion, JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsAndCompensationsUpdateCompensationRequest;

        // create path and map variables
        String localVarPath = "/v1/compensations/{compensation_id}"
            .replace("{" + "compensation_id" + "}", localVarApiClient.escapeString(compensationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompensationValidateBeforeCall(String compensationId, String xGustoAPIVersion, JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'compensationId' is set
        if (compensationId == null) {
            throw new ApiException("Missing the required parameter 'compensationId' when calling updateCompensation(Async)");
        }

        return updateCompensationCall(compensationId, xGustoAPIVersion, jobsAndCompensationsUpdateCompensationRequest, _callback);

    }


    private ApiResponse<Compensation> updateCompensationWithHttpInfo(String compensationId, String xGustoAPIVersion, JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCompensationValidateBeforeCall(compensationId, xGustoAPIVersion, jobsAndCompensationsUpdateCompensationRequest, null);
        Type localVarReturnType = new TypeToken<Compensation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompensationAsync(String compensationId, String xGustoAPIVersion, JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest, final ApiCallback<Compensation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompensationValidateBeforeCall(compensationId, xGustoAPIVersion, jobsAndCompensationsUpdateCompensationRequest, _callback);
        Type localVarReturnType = new TypeToken<Compensation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompensationRequestBuilder {
        private final String version;
        private final String compensationId;
        private String rate;
        private String paymentUnit;
        private FlsaStatusType flsaStatus;
        private Boolean adjustForMinimumWage;
        private List<JobsAndCompensationsCreateCompensationRequestMinimumWagesInner> minimumWages;
        private String xGustoAPIVersion;

        private UpdateCompensationRequestBuilder(String version, String compensationId) {
            this.version = version;
            this.compensationId = compensationId;
        }

        /**
         * Set rate
         * @param rate The dollar amount paid per payment unit. (optional)
         * @return UpdateCompensationRequestBuilder
         */
        public UpdateCompensationRequestBuilder rate(String rate) {
            this.rate = rate;
            return this;
        }
        
        /**
         * Set paymentUnit
         * @param paymentUnit The unit accompanying the compensation rate. If the employee is an owner, rate should be &#39;Paycheck&#39;. (optional)
         * @return UpdateCompensationRequestBuilder
         */
        public UpdateCompensationRequestBuilder paymentUnit(String paymentUnit) {
            this.paymentUnit = paymentUnit;
            return this;
        }
        
        /**
         * Set flsaStatus
         * @param flsaStatus  (optional)
         * @return UpdateCompensationRequestBuilder
         */
        public UpdateCompensationRequestBuilder flsaStatus(FlsaStatusType flsaStatus) {
            this.flsaStatus = flsaStatus;
            return this;
        }
        
        /**
         * Set adjustForMinimumWage
         * @param adjustForMinimumWage Determines whether the compensation should be adjusted for minimum wage. Only applies to Nonexempt employees. (optional)
         * @return UpdateCompensationRequestBuilder
         */
        public UpdateCompensationRequestBuilder adjustForMinimumWage(Boolean adjustForMinimumWage) {
            this.adjustForMinimumWage = adjustForMinimumWage;
            return this;
        }
        
        /**
         * Set minimumWages
         * @param minimumWages  (optional)
         * @return UpdateCompensationRequestBuilder
         */
        public UpdateCompensationRequestBuilder minimumWages(List<JobsAndCompensationsCreateCompensationRequestMinimumWagesInner> minimumWages) {
            this.minimumWages = minimumWages;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateCompensationRequestBuilder
         */
        public UpdateCompensationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateCompensation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest = buildBodyParams();
            return updateCompensationCall(compensationId, xGustoAPIVersion, jobsAndCompensationsUpdateCompensationRequest, _callback);
        }

        private JobsAndCompensationsUpdateCompensationRequest buildBodyParams() {
            JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest = new JobsAndCompensationsUpdateCompensationRequest();
            jobsAndCompensationsUpdateCompensationRequest.version(this.version);
            jobsAndCompensationsUpdateCompensationRequest.rate(this.rate);
            if (this.paymentUnit != null)
            jobsAndCompensationsUpdateCompensationRequest.paymentUnit(JobsAndCompensationsUpdateCompensationRequest.PaymentUnitEnum.fromValue(this.paymentUnit));
            jobsAndCompensationsUpdateCompensationRequest.flsaStatus(this.flsaStatus);
            jobsAndCompensationsUpdateCompensationRequest.adjustForMinimumWage(this.adjustForMinimumWage);
            jobsAndCompensationsUpdateCompensationRequest.minimumWages(this.minimumWages);
            return jobsAndCompensationsUpdateCompensationRequest;
        }

        /**
         * Execute updateCompensation request
         * @return Compensation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Compensation execute() throws ApiException {
            JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest = buildBodyParams();
            ApiResponse<Compensation> localVarResp = updateCompensationWithHttpInfo(compensationId, xGustoAPIVersion, jobsAndCompensationsUpdateCompensationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompensation request with HTTP info returned
         * @return ApiResponse&lt;Compensation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Compensation> executeWithHttpInfo() throws ApiException {
            JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest = buildBodyParams();
            return updateCompensationWithHttpInfo(compensationId, xGustoAPIVersion, jobsAndCompensationsUpdateCompensationRequest);
        }

        /**
         * Execute updateCompensation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Compensation> _callback) throws ApiException {
            JobsAndCompensationsUpdateCompensationRequest jobsAndCompensationsUpdateCompensationRequest = buildBodyParams();
            return updateCompensationAsync(compensationId, xGustoAPIVersion, jobsAndCompensationsUpdateCompensationRequest, _callback);
        }
    }

    /**
     * Update a compensation
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent &#x60;effective_date&#x60;.  scope: &#x60;jobs:write&#x60;
     * @param compensationId The UUID of the compensation (required)
     * @return UpdateCompensationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompensationRequestBuilder updateCompensation(String version, String compensationId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (compensationId == null) throw new IllegalArgumentException("\"compensationId\" is required but got null");
            

        return new UpdateCompensationRequestBuilder(version, compensationId);
    }
    private okhttp3.Call updateJobCall(String jobId, String xGustoAPIVersion, JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsAndCompensationsUpdateJobRequest;

        // create path and map variables
        String localVarPath = "/v1/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobValidateBeforeCall(String jobId, String xGustoAPIVersion, JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling updateJob(Async)");
        }

        return updateJobCall(jobId, xGustoAPIVersion, jobsAndCompensationsUpdateJobRequest, _callback);

    }


    private ApiResponse<Job> updateJobWithHttpInfo(String jobId, String xGustoAPIVersion, JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest) throws ApiException {
        okhttp3.Call localVarCall = updateJobValidateBeforeCall(jobId, xGustoAPIVersion, jobsAndCompensationsUpdateJobRequest, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateJobAsync(String jobId, String xGustoAPIVersion, JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobValidateBeforeCall(jobId, xGustoAPIVersion, jobsAndCompensationsUpdateJobRequest, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateJobRequestBuilder {
        private final String version;
        private final String jobId;
        private String title;
        private String hireDate;
        private Boolean twoPercentShareholder;
        private Boolean stateWcCovered;
        private String stateWcClassCode;
        private String xGustoAPIVersion;

        private UpdateJobRequestBuilder(String version, String jobId) {
            this.version = version;
            this.jobId = jobId;
        }

        /**
         * Set title
         * @param title The job title (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set hireDate
         * @param hireDate The date when the employee was hired or rehired for the job. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder hireDate(String hireDate) {
            this.hireDate = hireDate;
            return this;
        }
        
        /**
         * Set twoPercentShareholder
         * @param twoPercentShareholder Whether the employee owns at least 2% of the company. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder twoPercentShareholder(Boolean twoPercentShareholder) {
            this.twoPercentShareholder = twoPercentShareholder;
            return this;
        }
        
        /**
         * Set stateWcCovered
         * @param stateWcCovered Whether this job is eligible for workers&#39; compensation coverage in the state of Washington (WA). (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder stateWcCovered(Boolean stateWcCovered) {
            this.stateWcCovered = stateWcCovered;
            return this;
        }
        
        /**
         * Set stateWcClassCode
         * @param stateWcClassCode The risk class code for workers&#39; compensation in Washington state. Please visit [Washington state&#39;s Risk Class page](https://www.lni.wa.gov/insurance/rates-risk-classes/risk-classes-for-workers-compensation/risk-class-lookup#/) to learn more. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder stateWcClassCode(String stateWcClassCode) {
            this.stateWcClassCode = stateWcClassCode;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateJobRequestBuilder
         */
        public UpdateJobRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest = buildBodyParams();
            return updateJobCall(jobId, xGustoAPIVersion, jobsAndCompensationsUpdateJobRequest, _callback);
        }

        private JobsAndCompensationsUpdateJobRequest buildBodyParams() {
            JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest = new JobsAndCompensationsUpdateJobRequest();
            jobsAndCompensationsUpdateJobRequest.title(this.title);
            jobsAndCompensationsUpdateJobRequest.version(this.version);
            jobsAndCompensationsUpdateJobRequest.hireDate(this.hireDate);
            jobsAndCompensationsUpdateJobRequest.twoPercentShareholder(this.twoPercentShareholder);
            jobsAndCompensationsUpdateJobRequest.stateWcCovered(this.stateWcCovered);
            jobsAndCompensationsUpdateJobRequest.stateWcClassCode(this.stateWcClassCode);
            return jobsAndCompensationsUpdateJobRequest;
        }

        /**
         * Execute updateJob request
         * @return Job
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Job execute() throws ApiException {
            JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest = buildBodyParams();
            ApiResponse<Job> localVarResp = updateJobWithHttpInfo(jobId, xGustoAPIVersion, jobsAndCompensationsUpdateJobRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateJob request with HTTP info returned
         * @return ApiResponse&lt;Job&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Job> executeWithHttpInfo() throws ApiException {
            JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest = buildBodyParams();
            return updateJobWithHttpInfo(jobId, xGustoAPIVersion, jobsAndCompensationsUpdateJobRequest);
        }

        /**
         * Execute updateJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Job> _callback) throws ApiException {
            JobsAndCompensationsUpdateJobRequest jobsAndCompensationsUpdateJobRequest = buildBodyParams();
            return updateJobAsync(jobId, xGustoAPIVersion, jobsAndCompensationsUpdateJobRequest, _callback);
        }
    }

    /**
     * Update a job
     * Update a job.  scope: &#x60;jobs:write&#x60;
     * @param jobId The UUID of the job (required)
     * @return UpdateJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobRequestBuilder updateJob(String version, String jobId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new UpdateJobRequestBuilder(version, jobId);
    }
}
