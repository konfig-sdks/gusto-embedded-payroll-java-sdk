/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeEmploymentsCreateTerminationRequest;
import com.konfigthis.client.model.EmployeeEmploymentsGetHistoryResponseInner;
import com.konfigthis.client.model.EmployeeEmploymentsUpdateRehireRequest;
import com.konfigthis.client.model.EmployeeEmploymentsUpdateTerminationRequest;
import com.konfigthis.client.model.Rehire;
import com.konfigthis.client.model.RehireBody;
import com.konfigthis.client.model.Termination;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeEmploymentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeEmploymentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeEmploymentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRehireCall(String employeeId, String xGustoAPIVersion, RehireBody rehireBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rehireBody;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/rehire"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRehireValidateBeforeCall(String employeeId, String xGustoAPIVersion, RehireBody rehireBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createRehire(Async)");
        }

        return createRehireCall(employeeId, xGustoAPIVersion, rehireBody, _callback);

    }


    private ApiResponse<Rehire> createRehireWithHttpInfo(String employeeId, String xGustoAPIVersion, RehireBody rehireBody) throws ApiException {
        okhttp3.Call localVarCall = createRehireValidateBeforeCall(employeeId, xGustoAPIVersion, rehireBody, null);
        Type localVarReturnType = new TypeToken<Rehire>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRehireAsync(String employeeId, String xGustoAPIVersion, RehireBody rehireBody, final ApiCallback<Rehire> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRehireValidateBeforeCall(employeeId, xGustoAPIVersion, rehireBody, _callback);
        Type localVarReturnType = new TypeToken<Rehire>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRehireRequestBuilder {
        private final String effectiveDate;
        private final Boolean fileNewHireReport;
        private final String workLocationUuid;
        private final String employeeId;
        private String employmentStatus;
        private Boolean twoPercentShareholder;
        private String xGustoAPIVersion;

        private CreateRehireRequestBuilder(String effectiveDate, Boolean fileNewHireReport, String workLocationUuid, String employeeId) {
            this.effectiveDate = effectiveDate;
            this.fileNewHireReport = fileNewHireReport;
            this.workLocationUuid = workLocationUuid;
            this.employeeId = employeeId;
        }

        /**
         * Set employmentStatus
         * @param employmentStatus The employee&#39;s employment status. Supplying an invalid option will set the employment_status to *not_set*. (optional)
         * @return CreateRehireRequestBuilder
         */
        public CreateRehireRequestBuilder employmentStatus(String employmentStatus) {
            this.employmentStatus = employmentStatus;
            return this;
        }
        
        /**
         * Set twoPercentShareholder
         * @param twoPercentShareholder Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type. (optional)
         * @return CreateRehireRequestBuilder
         */
        public CreateRehireRequestBuilder twoPercentShareholder(Boolean twoPercentShareholder) {
            this.twoPercentShareholder = twoPercentShareholder;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateRehireRequestBuilder
         */
        public CreateRehireRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createRehire
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RehireBody rehireBody = buildBodyParams();
            return createRehireCall(employeeId, xGustoAPIVersion, rehireBody, _callback);
        }

        private RehireBody buildBodyParams() {
            RehireBody rehireBody = new RehireBody();
            rehireBody.effectiveDate(this.effectiveDate);
            rehireBody.fileNewHireReport(this.fileNewHireReport);
            rehireBody.workLocationUuid(this.workLocationUuid);
            if (this.employmentStatus != null)
            rehireBody.employmentStatus(RehireBody.EmploymentStatusEnum.fromValue(this.employmentStatus));
            rehireBody.twoPercentShareholder(this.twoPercentShareholder);
            return rehireBody;
        }

        /**
         * Execute createRehire request
         * @return Rehire
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Rehire execute() throws ApiException {
            RehireBody rehireBody = buildBodyParams();
            ApiResponse<Rehire> localVarResp = createRehireWithHttpInfo(employeeId, xGustoAPIVersion, rehireBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRehire request with HTTP info returned
         * @return ApiResponse&lt;Rehire&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Rehire> executeWithHttpInfo() throws ApiException {
            RehireBody rehireBody = buildBodyParams();
            return createRehireWithHttpInfo(employeeId, xGustoAPIVersion, rehireBody);
        }

        /**
         * Execute createRehire request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Rehire> _callback) throws ApiException {
            RehireBody rehireBody = buildBodyParams();
            return createRehireAsync(employeeId, xGustoAPIVersion, rehireBody, _callback);
        }
    }

    /**
     * Create an employee rehire
     * Rehire is created whenever an employee is scheduled to return to the company.  scope: &#x60;employments:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateRehireRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateRehireRequestBuilder createRehire(String effectiveDate, Boolean fileNewHireReport, String workLocationUuid, String employeeId) throws IllegalArgumentException {
        if (effectiveDate == null) throw new IllegalArgumentException("\"effectiveDate\" is required but got null");
            

        if (fileNewHireReport == null) throw new IllegalArgumentException("\"fileNewHireReport\" is required but got null");
        if (workLocationUuid == null) throw new IllegalArgumentException("\"workLocationUuid\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateRehireRequestBuilder(effectiveDate, fileNewHireReport, workLocationUuid, employeeId);
    }
    private okhttp3.Call createTerminationCall(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeEmploymentsCreateTerminationRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/terminations"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTerminationValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createTermination(Async)");
        }

        return createTerminationCall(employeeId, xGustoAPIVersion, employeeEmploymentsCreateTerminationRequest, _callback);

    }


    private ApiResponse<Termination> createTerminationWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest) throws ApiException {
        okhttp3.Call localVarCall = createTerminationValidateBeforeCall(employeeId, xGustoAPIVersion, employeeEmploymentsCreateTerminationRequest, null);
        Type localVarReturnType = new TypeToken<Termination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTerminationAsync(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest, final ApiCallback<Termination> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTerminationValidateBeforeCall(employeeId, xGustoAPIVersion, employeeEmploymentsCreateTerminationRequest, _callback);
        Type localVarReturnType = new TypeToken<Termination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTerminationRequestBuilder {
        private final String effectiveDate;
        private final String employeeId;
        private Boolean runTerminationPayroll;
        private String xGustoAPIVersion;

        private CreateTerminationRequestBuilder(String effectiveDate, String employeeId) {
            this.effectiveDate = effectiveDate;
            this.employeeId = employeeId;
        }

        /**
         * Set runTerminationPayroll
         * @param runTerminationPayroll If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule. (optional)
         * @return CreateTerminationRequestBuilder
         */
        public CreateTerminationRequestBuilder runTerminationPayroll(Boolean runTerminationPayroll) {
            this.runTerminationPayroll = runTerminationPayroll;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateTerminationRequestBuilder
         */
        public CreateTerminationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createTermination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example Response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest = buildBodyParams();
            return createTerminationCall(employeeId, xGustoAPIVersion, employeeEmploymentsCreateTerminationRequest, _callback);
        }

        private EmployeeEmploymentsCreateTerminationRequest buildBodyParams() {
            EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest = new EmployeeEmploymentsCreateTerminationRequest();
            employeeEmploymentsCreateTerminationRequest.effectiveDate(this.effectiveDate);
            employeeEmploymentsCreateTerminationRequest.runTerminationPayroll(this.runTerminationPayroll);
            return employeeEmploymentsCreateTerminationRequest;
        }

        /**
         * Execute createTermination request
         * @return Termination
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example Response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Termination execute() throws ApiException {
            EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest = buildBodyParams();
            ApiResponse<Termination> localVarResp = createTerminationWithHttpInfo(employeeId, xGustoAPIVersion, employeeEmploymentsCreateTerminationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTermination request with HTTP info returned
         * @return ApiResponse&lt;Termination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example Response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Termination> executeWithHttpInfo() throws ApiException {
            EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest = buildBodyParams();
            return createTerminationWithHttpInfo(employeeId, xGustoAPIVersion, employeeEmploymentsCreateTerminationRequest);
        }

        /**
         * Execute createTermination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example Response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Termination> _callback) throws ApiException {
            EmployeeEmploymentsCreateTerminationRequest employeeEmploymentsCreateTerminationRequest = buildBodyParams();
            return createTerminationAsync(employeeId, xGustoAPIVersion, employeeEmploymentsCreateTerminationRequest, _callback);
        }
    }

    /**
     * Create an employee termination
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: &#x60;employments:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateTerminationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateTerminationRequestBuilder createTermination(String effectiveDate, String employeeId) throws IllegalArgumentException {
        if (effectiveDate == null) throw new IllegalArgumentException("\"effectiveDate\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateTerminationRequestBuilder(effectiveDate, employeeId);
    }
    private okhttp3.Call deleteTerminationCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/terminations"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTerminationValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deleteTermination(Async)");
        }

        return deleteTerminationCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteTerminationWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteTerminationValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTerminationAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTerminationValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTerminationRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private DeleteTerminationRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteTerminationRequestBuilder
         */
        public DeleteTerminationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteTermination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTerminationCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteTermination request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTerminationWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute deleteTermination request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTerminationWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute deleteTermination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTerminationAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an employee termination
     * Delete an employee termination.  scope: &#x60;employments:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return DeleteTerminationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTerminationRequestBuilder deleteTermination(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new DeleteTerminationRequestBuilder(employeeId);
    }
    private okhttp3.Call getHistoryCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/employment_history"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getHistory(Async)");
        }

        return getHistoryCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<EmployeeEmploymentsGetHistoryResponseInner>> getHistoryWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<EmployeeEmploymentsGetHistoryResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHistoryAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<List<EmployeeEmploymentsGetHistoryResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeEmploymentsGetHistoryResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHistoryRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private GetHistoryRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getHistory request
         * @return List&lt;EmployeeEmploymentsGetHistoryResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeEmploymentsGetHistoryResponseInner> execute() throws ApiException {
            ApiResponse<List<EmployeeEmploymentsGetHistoryResponseInner>> localVarResp = getHistoryWithHttpInfo(employeeId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeEmploymentsGetHistoryResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeEmploymentsGetHistoryResponseInner>> executeWithHttpInfo() throws ApiException {
            return getHistoryWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute getHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeEmploymentsGetHistoryResponseInner>> _callback) throws ApiException {
            return getHistoryAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get employment history for an employee
     * Retrieve the employment history for a given employee, which includes termination and rehire.  scope: &#x60;employments:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoryRequestBuilder getHistory(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetHistoryRequestBuilder(employeeId);
    }
    private okhttp3.Call getRehireCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/rehire"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRehireValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getRehire(Async)");
        }

        return getRehireCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Rehire> getRehireWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getRehireValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Rehire>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRehireAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<Rehire> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRehireValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Rehire>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRehireRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private GetRehireRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetRehireRequestBuilder
         */
        public GetRehireRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getRehire
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRehireCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getRehire request
         * @return Rehire
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public Rehire execute() throws ApiException {
            ApiResponse<Rehire> localVarResp = getRehireWithHttpInfo(employeeId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRehire request with HTTP info returned
         * @return ApiResponse&lt;Rehire&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Rehire> executeWithHttpInfo() throws ApiException {
            return getRehireWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute getRehire request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Rehire> _callback) throws ApiException {
            return getRehireAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee rehire
     * Retrieve an employee&#39;s rehire, which contains information on when the employee returns to work.  scope: &#x60;employments:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetRehireRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public GetRehireRequestBuilder getRehire(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetRehireRequestBuilder(employeeId);
    }
    private okhttp3.Call listEmployeeTerminationsCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/terminations"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeTerminationsValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listEmployeeTerminations(Async)");
        }

        return listEmployeeTerminationsCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Termination>> listEmployeeTerminationsWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeTerminationsValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Termination>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeeTerminationsAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<List<Termination>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeTerminationsValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Termination>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeeTerminationsRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private ListEmployeeTerminationsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListEmployeeTerminationsRequestBuilder
         */
        public ListEmployeeTerminationsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listEmployeeTerminations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeTerminationsCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listEmployeeTerminations request
         * @return List&lt;Termination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Termination> execute() throws ApiException {
            ApiResponse<List<Termination>> localVarResp = listEmployeeTerminationsWithHttpInfo(employeeId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeeTerminations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Termination&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Termination>> executeWithHttpInfo() throws ApiException {
            return listEmployeeTerminationsWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute listEmployeeTerminations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Termination>> _callback) throws ApiException {
            return listEmployeeTerminationsAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get terminations for an employee
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: &#x60;employments:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return ListEmployeeTerminationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeTerminationsRequestBuilder listEmployeeTerminations(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListEmployeeTerminationsRequestBuilder(employeeId);
    }
    private okhttp3.Call removeRehireCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/rehire"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRehireValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling removeRehire(Async)");
        }

        return removeRehireCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> removeRehireWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = removeRehireValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeRehireAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRehireValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRehireRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private RemoveRehireRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return RemoveRehireRequestBuilder
         */
        public RemoveRehireRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for removeRehire
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeRehireCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute removeRehire request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeRehireWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute removeRehire request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeRehireWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute removeRehire request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeRehireAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an employee rehire
     * Delete an employee rehire. An employee rehire cannot be deleted if it&#39;s active (past effective date).  scope: &#x60;employments:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return RemoveRehireRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRehireRequestBuilder removeRehire(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new RemoveRehireRequestBuilder(employeeId);
    }
    private okhttp3.Call updateRehireCall(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeEmploymentsUpdateRehireRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/rehire"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRehireValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateRehire(Async)");
        }

        return updateRehireCall(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateRehireRequest, _callback);

    }


    private ApiResponse<Rehire> updateRehireWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRehireValidateBeforeCall(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateRehireRequest, null);
        Type localVarReturnType = new TypeToken<Rehire>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRehireAsync(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest, final ApiCallback<Rehire> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRehireValidateBeforeCall(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateRehireRequest, _callback);
        Type localVarReturnType = new TypeToken<Rehire>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRehireRequestBuilder {
        private final String employeeId;
        private String version;
        private String effectiveDate;
        private Boolean fileNewHireReport;
        private String workLocationUuid;
        private String employmentStatus;
        private Boolean twoPercentShareholder;
        private String xGustoAPIVersion;

        private UpdateRehireRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field. (optional)
         * @return UpdateRehireRequestBuilder
         */
        public UpdateRehireRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The day when the employee returns to work. (optional)
         * @return UpdateRehireRequestBuilder
         */
        public UpdateRehireRequestBuilder effectiveDate(String effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set fileNewHireReport
         * @param fileNewHireReport The boolean flag indicating whether Gusto will file a new hire report for the employee. (optional)
         * @return UpdateRehireRequestBuilder
         */
        public UpdateRehireRequestBuilder fileNewHireReport(Boolean fileNewHireReport) {
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }
        
        /**
         * Set workLocationUuid
         * @param workLocationUuid The uuid of the employee&#39;s work location. (optional)
         * @return UpdateRehireRequestBuilder
         */
        public UpdateRehireRequestBuilder workLocationUuid(String workLocationUuid) {
            this.workLocationUuid = workLocationUuid;
            return this;
        }
        
        /**
         * Set employmentStatus
         * @param employmentStatus The employee&#39;s employment status. Supplying an invalid option will set the employment_status to *not_set*. (optional)
         * @return UpdateRehireRequestBuilder
         */
        public UpdateRehireRequestBuilder employmentStatus(String employmentStatus) {
            this.employmentStatus = employmentStatus;
            return this;
        }
        
        /**
         * Set twoPercentShareholder
         * @param twoPercentShareholder Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type. (optional)
         * @return UpdateRehireRequestBuilder
         */
        public UpdateRehireRequestBuilder twoPercentShareholder(Boolean twoPercentShareholder) {
            this.twoPercentShareholder = twoPercentShareholder;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateRehireRequestBuilder
         */
        public UpdateRehireRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateRehire
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest = buildBodyParams();
            return updateRehireCall(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateRehireRequest, _callback);
        }

        private EmployeeEmploymentsUpdateRehireRequest buildBodyParams() {
            EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest = new EmployeeEmploymentsUpdateRehireRequest();
            return employeeEmploymentsUpdateRehireRequest;
        }

        /**
         * Execute updateRehire request
         * @return Rehire
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public Rehire execute() throws ApiException {
            EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest = buildBodyParams();
            ApiResponse<Rehire> localVarResp = updateRehireWithHttpInfo(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateRehireRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRehire request with HTTP info returned
         * @return ApiResponse&lt;Rehire&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Rehire> executeWithHttpInfo() throws ApiException {
            EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest = buildBodyParams();
            return updateRehireWithHttpInfo(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateRehireRequest);
        }

        /**
         * Execute updateRehire request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Rehire> _callback) throws ApiException {
            EmployeeEmploymentsUpdateRehireRequest employeeEmploymentsUpdateRehireRequest = buildBodyParams();
            return updateRehireAsync(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateRehireRequest, _callback);
        }
    }

    /**
     * Update an employee rehire
     * Update an employee&#39;s rehire.  scope: &#x60;employments:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return UpdateRehireRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRehireRequestBuilder updateRehire(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateRehireRequestBuilder(employeeId);
    }
    private okhttp3.Call updateTerminationCall(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeEmploymentsUpdateTerminationRequest;

        // create path and map variables
        String localVarPath = "/v1/terminations/{employee_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTerminationValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateTermination(Async)");
        }

        return updateTerminationCall(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateTerminationRequest, _callback);

    }


    private ApiResponse<Termination> updateTerminationWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTerminationValidateBeforeCall(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateTerminationRequest, null);
        Type localVarReturnType = new TypeToken<Termination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTerminationAsync(String employeeId, String xGustoAPIVersion, EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest, final ApiCallback<Termination> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTerminationValidateBeforeCall(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateTerminationRequest, _callback);
        Type localVarReturnType = new TypeToken<Termination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTerminationRequestBuilder {
        private final String employeeId;
        private String version;
        private String effectiveDate;
        private Boolean runTerminationPayroll;
        private String xGustoAPIVersion;

        private UpdateTerminationRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field. (optional)
         * @return UpdateTerminationRequestBuilder
         */
        public UpdateTerminationRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The employee&#39;s last day of work. (optional)
         * @return UpdateTerminationRequestBuilder
         */
        public UpdateTerminationRequestBuilder effectiveDate(String effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set runTerminationPayroll
         * @param runTerminationPayroll If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule. (optional)
         * @return UpdateTerminationRequestBuilder
         */
        public UpdateTerminationRequestBuilder runTerminationPayroll(Boolean runTerminationPayroll) {
            this.runTerminationPayroll = runTerminationPayroll;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateTerminationRequestBuilder
         */
        public UpdateTerminationRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateTermination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest = buildBodyParams();
            return updateTerminationCall(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateTerminationRequest, _callback);
        }

        private EmployeeEmploymentsUpdateTerminationRequest buildBodyParams() {
            EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest = new EmployeeEmploymentsUpdateTerminationRequest();
            return employeeEmploymentsUpdateTerminationRequest;
        }

        /**
         * Execute updateTermination request
         * @return Termination
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example Response </td><td>  -  </td></tr>
         </table>
         */
        public Termination execute() throws ApiException {
            EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest = buildBodyParams();
            ApiResponse<Termination> localVarResp = updateTerminationWithHttpInfo(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateTerminationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTermination request with HTTP info returned
         * @return ApiResponse&lt;Termination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Termination> executeWithHttpInfo() throws ApiException {
            EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest = buildBodyParams();
            return updateTerminationWithHttpInfo(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateTerminationRequest);
        }

        /**
         * Execute updateTermination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Termination> _callback) throws ApiException {
            EmployeeEmploymentsUpdateTerminationRequest employeeEmploymentsUpdateTerminationRequest = buildBodyParams();
            return updateTerminationAsync(employeeId, xGustoAPIVersion, employeeEmploymentsUpdateTerminationRequest, _callback);
        }
    }

    /**
     * Update an employee termination
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: &#x60;employments:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return UpdateTerminationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTerminationRequestBuilder updateTermination(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateTerminationRequestBuilder(employeeId);
    }
}
