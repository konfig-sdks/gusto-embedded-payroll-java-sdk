/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContractorPayment;
import com.konfigthis.client.model.ContractorPaymentReceipt;
import com.konfigthis.client.model.ContractorPaymentsCreatePaymentRequest;
import com.konfigthis.client.model.ContractorPaymentsPreviewDebitDateRequest;
import com.konfigthis.client.model.ContractorPaymentsPreviewDebitDateRequestContractorPaymentsInner;
import com.konfigthis.client.model.ContractorPaymentsPreviewDebitDateResponse;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractorPaymentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractorPaymentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractorPaymentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelPaymentCall(String companyId, String contractorPaymentId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "contractor_payment_id" + "}", localVarApiClient.escapeString(contractorPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPaymentValidateBeforeCall(String companyId, String contractorPaymentId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling cancelPayment(Async)");
        }

        // verify the required parameter 'contractorPaymentId' is set
        if (contractorPaymentId == null) {
            throw new ApiException("Missing the required parameter 'contractorPaymentId' when calling cancelPayment(Async)");
        }

        return cancelPaymentCall(companyId, contractorPaymentId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> cancelPaymentWithHttpInfo(String companyId, String contractorPaymentId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = cancelPaymentValidateBeforeCall(companyId, contractorPaymentId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelPaymentAsync(String companyId, String contractorPaymentId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPaymentValidateBeforeCall(companyId, contractorPaymentId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelPaymentRequestBuilder {
        private final String companyId;
        private final String contractorPaymentId;
        private String xGustoAPIVersion;

        private CancelPaymentRequestBuilder(String companyId, String contractorPaymentId) {
            this.companyId = companyId;
            this.contractorPaymentId = contractorPaymentId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CancelPaymentRequestBuilder
         */
        public CancelPaymentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for cancelPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelPaymentCall(companyId, contractorPaymentId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute cancelPayment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelPaymentWithHttpInfo(companyId, contractorPaymentId, xGustoAPIVersion);
        }

        /**
         * Execute cancelPayment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelPaymentWithHttpInfo(companyId, contractorPaymentId, xGustoAPIVersion);
        }

        /**
         * Execute cancelPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelPaymentAsync(companyId, contractorPaymentId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Cancel a contractor payment
     * Cancels and deletes a contractor payment. If the contractor payment has already started processing, the payment cannot be cancelled.  scope: &#x60;payrolls:run&#x60;
     * @param companyId The UUID of the company (required)
     * @param contractorPaymentId The UUID of the contractor payment (required)
     * @return CancelPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CancelPaymentRequestBuilder cancelPayment(String companyId, String contractorPaymentId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (contractorPaymentId == null) throw new IllegalArgumentException("\"contractorPaymentId\" is required but got null");
            

        return new CancelPaymentRequestBuilder(companyId, contractorPaymentId);
    }
    private okhttp3.Call createPaymentCall(String companyId, String xGustoAPIVersion, ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorPaymentsCreatePaymentRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/contractor_payments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentValidateBeforeCall(String companyId, String xGustoAPIVersion, ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createPayment(Async)");
        }

        return createPaymentCall(companyId, xGustoAPIVersion, contractorPaymentsCreatePaymentRequest, _callback);

    }


    private ApiResponse<ContractorPayment> createPaymentWithHttpInfo(String companyId, String xGustoAPIVersion, ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(companyId, xGustoAPIVersion, contractorPaymentsCreatePaymentRequest, null);
        Type localVarReturnType = new TypeToken<ContractorPayment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPaymentAsync(String companyId, String xGustoAPIVersion, ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest, final ApiCallback<ContractorPayment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(companyId, xGustoAPIVersion, contractorPaymentsCreatePaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractorPayment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePaymentRequestBuilder {
        private final String contractorUuid;
        private final LocalDate date;
        private final String companyId;
        private String paymentMethod;
        private Double wage;
        private Double hours;
        private Double bonus;
        private Double reimbursement;
        private String xGustoAPIVersion;

        private CreatePaymentRequestBuilder(String contractorUuid, LocalDate date, String companyId) {
            this.contractorUuid = contractorUuid;
            this.date = date;
            this.companyId = companyId;
        }

        /**
         * Set paymentMethod
         * @param paymentMethod  (optional, default to Direct Deposit)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder paymentMethod(String paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }
        
        /**
         * Set wage
         * @param wage If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder wage(Double wage) {
            this.wage = wage;
            return this;
        }
        
        /**
         * Set hours
         * @param hours If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder hours(Double hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set bonus
         * @param bonus If the contractor is on an hourly wage, this is the bonus the contractor earned (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder bonus(Double bonus) {
            this.bonus = bonus;
            return this;
        }
        
        /**
         * Set reimbursement
         * @param reimbursement Reimbursed wages for the contractor (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder reimbursement(Double reimbursement) {
            this.reimbursement = reimbursement;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest = buildBodyParams();
            return createPaymentCall(companyId, xGustoAPIVersion, contractorPaymentsCreatePaymentRequest, _callback);
        }

        private ContractorPaymentsCreatePaymentRequest buildBodyParams() {
            ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest = new ContractorPaymentsCreatePaymentRequest();
            contractorPaymentsCreatePaymentRequest.contractorUuid(this.contractorUuid);
            contractorPaymentsCreatePaymentRequest.date(this.date);
            if (this.paymentMethod != null)
            contractorPaymentsCreatePaymentRequest.paymentMethod(ContractorPaymentsCreatePaymentRequest.PaymentMethodEnum.fromValue(this.paymentMethod));
            contractorPaymentsCreatePaymentRequest.wage(this.wage);
            contractorPaymentsCreatePaymentRequest.hours(this.hours);
            contractorPaymentsCreatePaymentRequest.bonus(this.bonus);
            contractorPaymentsCreatePaymentRequest.reimbursement(this.reimbursement);
            return contractorPaymentsCreatePaymentRequest;
        }

        /**
         * Execute createPayment request
         * @return ContractorPayment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorPayment execute() throws ApiException {
            ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest = buildBodyParams();
            ApiResponse<ContractorPayment> localVarResp = createPaymentWithHttpInfo(companyId, xGustoAPIVersion, contractorPaymentsCreatePaymentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPayment request with HTTP info returned
         * @return ApiResponse&lt;ContractorPayment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorPayment> executeWithHttpInfo() throws ApiException {
            ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest = buildBodyParams();
            return createPaymentWithHttpInfo(companyId, xGustoAPIVersion, contractorPaymentsCreatePaymentRequest);
        }

        /**
         * Execute createPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorPayment> _callback) throws ApiException {
            ContractorPaymentsCreatePaymentRequest contractorPaymentsCreatePaymentRequest = buildBodyParams();
            return createPaymentAsync(companyId, xGustoAPIVersion, contractorPaymentsCreatePaymentRequest, _callback);
        }
    }

    /**
     * Create a contractor payment
     * Pay a contractor. Information needed depends on the contractor&#39;s wage type (hourly vs fixed)  scope: &#x60;payrolls:run&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreatePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentRequestBuilder createPayment(String contractorUuid, LocalDate date, String companyId) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreatePaymentRequestBuilder(contractorUuid, date, companyId);
    }
    private okhttp3.Call fundContractorPaymentCall(String contractorPaymentUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractor_payments/{contractor_payment_uuid}/fund"
            .replace("{" + "contractor_payment_uuid" + "}", localVarApiClient.escapeString(contractorPaymentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fundContractorPaymentValidateBeforeCall(String contractorPaymentUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorPaymentUuid' is set
        if (contractorPaymentUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorPaymentUuid' when calling fundContractorPayment(Async)");
        }

        return fundContractorPaymentCall(contractorPaymentUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<ContractorPayment> fundContractorPaymentWithHttpInfo(String contractorPaymentUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = fundContractorPaymentValidateBeforeCall(contractorPaymentUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<ContractorPayment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call fundContractorPaymentAsync(String contractorPaymentUuid, String xGustoAPIVersion, final ApiCallback<ContractorPayment> _callback) throws ApiException {

        okhttp3.Call localVarCall = fundContractorPaymentValidateBeforeCall(contractorPaymentUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<ContractorPayment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FundContractorPaymentRequestBuilder {
        private final String contractorPaymentUuid;
        private String xGustoAPIVersion;

        private FundContractorPaymentRequestBuilder(String contractorPaymentUuid) {
            this.contractorPaymentUuid = contractorPaymentUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return FundContractorPaymentRequestBuilder
         */
        public FundContractorPaymentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for fundContractorPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return fundContractorPaymentCall(contractorPaymentUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute fundContractorPayment request
         * @return ContractorPayment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorPayment execute() throws ApiException {
            ApiResponse<ContractorPayment> localVarResp = fundContractorPaymentWithHttpInfo(contractorPaymentUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute fundContractorPayment request with HTTP info returned
         * @return ApiResponse&lt;ContractorPayment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorPayment> executeWithHttpInfo() throws ApiException {
            return fundContractorPaymentWithHttpInfo(contractorPaymentUuid, xGustoAPIVersion);
        }

        /**
         * Execute fundContractorPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorPayment> _callback) throws ApiException {
            return fundContractorPaymentAsync(contractorPaymentUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Fund a contractor payment [DEMO]
     * &gt; 🚧 Demo action &gt; &gt; This action is only available in the Demo environment  Simulate funding a contractor payment. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment&#39;s &#x60;status&#x60; from &#x60;Unfunded&#x60; to &#x60;Funded&#x60;. A &#x60;Funded&#x60; status is required for generating a contractor payment receipt.  scope: &#x60;payrolls:run&#x60;
     * @param contractorPaymentUuid The UUID of the contractor payment (required)
     * @return FundContractorPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public FundContractorPaymentRequestBuilder fundContractorPayment(String contractorPaymentUuid) throws IllegalArgumentException {
        if (contractorPaymentUuid == null) throw new IllegalArgumentException("\"contractorPaymentUuid\" is required but got null");
            

        return new FundContractorPaymentRequestBuilder(contractorPaymentUuid);
    }
    private okhttp3.Call getSinglePaymentCall(String companyId, String contractorPaymentId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "contractor_payment_id" + "}", localVarApiClient.escapeString(contractorPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSinglePaymentValidateBeforeCall(String companyId, String contractorPaymentId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSinglePayment(Async)");
        }

        // verify the required parameter 'contractorPaymentId' is set
        if (contractorPaymentId == null) {
            throw new ApiException("Missing the required parameter 'contractorPaymentId' when calling getSinglePayment(Async)");
        }

        return getSinglePaymentCall(companyId, contractorPaymentId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<ContractorPayment> getSinglePaymentWithHttpInfo(String companyId, String contractorPaymentId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSinglePaymentValidateBeforeCall(companyId, contractorPaymentId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<ContractorPayment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSinglePaymentAsync(String companyId, String contractorPaymentId, String xGustoAPIVersion, final ApiCallback<ContractorPayment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSinglePaymentValidateBeforeCall(companyId, contractorPaymentId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<ContractorPayment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSinglePaymentRequestBuilder {
        private final String companyId;
        private final String contractorPaymentId;
        private String xGustoAPIVersion;

        private GetSinglePaymentRequestBuilder(String companyId, String contractorPaymentId) {
            this.companyId = companyId;
            this.contractorPaymentId = contractorPaymentId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSinglePaymentRequestBuilder
         */
        public GetSinglePaymentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSinglePayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSinglePaymentCall(companyId, contractorPaymentId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSinglePayment request
         * @return ContractorPayment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorPayment execute() throws ApiException {
            ApiResponse<ContractorPayment> localVarResp = getSinglePaymentWithHttpInfo(companyId, contractorPaymentId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSinglePayment request with HTTP info returned
         * @return ApiResponse&lt;ContractorPayment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorPayment> executeWithHttpInfo() throws ApiException {
            return getSinglePaymentWithHttpInfo(companyId, contractorPaymentId, xGustoAPIVersion);
        }

        /**
         * Execute getSinglePayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorPayment> _callback) throws ApiException {
            return getSinglePaymentAsync(companyId, contractorPaymentId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a single contractor payment
     * Returns a single contractor payments  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @param contractorPaymentId The UUID of the contractor payment (required)
     * @return GetSinglePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSinglePaymentRequestBuilder getSinglePayment(String companyId, String contractorPaymentId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (contractorPaymentId == null) throw new IllegalArgumentException("\"contractorPaymentId\" is required but got null");
            

        return new GetSinglePaymentRequestBuilder(companyId, contractorPaymentId);
    }
    private okhttp3.Call getSingleReceiptCall(String contractorPaymentUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractor_payments/{contractor_payment_uuid}/receipt"
            .replace("{" + "contractor_payment_uuid" + "}", localVarApiClient.escapeString(contractorPaymentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleReceiptValidateBeforeCall(String contractorPaymentUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorPaymentUuid' is set
        if (contractorPaymentUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorPaymentUuid' when calling getSingleReceipt(Async)");
        }

        return getSingleReceiptCall(contractorPaymentUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<ContractorPaymentReceipt> getSingleReceiptWithHttpInfo(String contractorPaymentUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSingleReceiptValidateBeforeCall(contractorPaymentUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<ContractorPaymentReceipt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleReceiptAsync(String contractorPaymentUuid, String xGustoAPIVersion, final ApiCallback<ContractorPaymentReceipt> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleReceiptValidateBeforeCall(contractorPaymentUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<ContractorPaymentReceipt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleReceiptRequestBuilder {
        private final String contractorPaymentUuid;
        private String xGustoAPIVersion;

        private GetSingleReceiptRequestBuilder(String contractorPaymentUuid) {
            this.contractorPaymentUuid = contractorPaymentUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSingleReceiptRequestBuilder
         */
        public GetSingleReceiptRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSingleReceipt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleReceiptCall(contractorPaymentUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSingleReceipt request
         * @return ContractorPaymentReceipt
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorPaymentReceipt execute() throws ApiException {
            ApiResponse<ContractorPaymentReceipt> localVarResp = getSingleReceiptWithHttpInfo(contractorPaymentUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleReceipt request with HTTP info returned
         * @return ApiResponse&lt;ContractorPaymentReceipt&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorPaymentReceipt> executeWithHttpInfo() throws ApiException {
            return getSingleReceiptWithHttpInfo(contractorPaymentUuid, xGustoAPIVersion);
        }

        /**
         * Execute getSingleReceipt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorPaymentReceipt> _callback) throws ApiException {
            return getSingleReceiptAsync(contractorPaymentUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a single contractor payment receipt
     * Returns a contractor payment receipt.  Notes: * Receipts are only available for direct deposit payments and are only available once those payments have been funded. * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status. * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: &#x60;payrolls:read&#x60;
     * @param contractorPaymentUuid The UUID of the contractor payment (required)
     * @return GetSingleReceiptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleReceiptRequestBuilder getSingleReceipt(String contractorPaymentUuid) throws IllegalArgumentException {
        if (contractorPaymentUuid == null) throw new IllegalArgumentException("\"contractorPaymentUuid\" is required but got null");
            

        return new GetSingleReceiptRequestBuilder(contractorPaymentUuid);
    }
    private okhttp3.Call getWithinTimePeriodTotalsCall(String companyId, String startDate, String endDate, String contractorUuid, Boolean groupByDate, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/contractor_payments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (contractorUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contractor_uuid", contractorUuid));
        }

        if (groupByDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_by_date", groupByDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWithinTimePeriodTotalsValidateBeforeCall(String companyId, String startDate, String endDate, String contractorUuid, Boolean groupByDate, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getWithinTimePeriodTotals(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getWithinTimePeriodTotals(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getWithinTimePeriodTotals(Async)");
        }

        return getWithinTimePeriodTotalsCall(companyId, startDate, endDate, contractorUuid, groupByDate, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Object> getWithinTimePeriodTotalsWithHttpInfo(String companyId, String startDate, String endDate, String contractorUuid, Boolean groupByDate, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getWithinTimePeriodTotalsValidateBeforeCall(companyId, startDate, endDate, contractorUuid, groupByDate, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWithinTimePeriodTotalsAsync(String companyId, String startDate, String endDate, String contractorUuid, Boolean groupByDate, Double page, Double per, String xGustoAPIVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWithinTimePeriodTotalsValidateBeforeCall(companyId, startDate, endDate, contractorUuid, groupByDate, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWithinTimePeriodTotalsRequestBuilder {
        private final String companyId;
        private final String startDate;
        private final String endDate;
        private String contractorUuid;
        private Boolean groupByDate;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetWithinTimePeriodTotalsRequestBuilder(String companyId, String startDate, String endDate) {
            this.companyId = companyId;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set contractorUuid
         * @param contractorUuid The UUID of the contractor. When specified, will load all payments for that contractor. (optional)
         * @return GetWithinTimePeriodTotalsRequestBuilder
         */
        public GetWithinTimePeriodTotalsRequestBuilder contractorUuid(String contractorUuid) {
            this.contractorUuid = contractorUuid;
            return this;
        }
        
        /**
         * Set groupByDate
         * @param groupByDate Display contractor payments results group by check date if set to true. (optional)
         * @return GetWithinTimePeriodTotalsRequestBuilder
         */
        public GetWithinTimePeriodTotalsRequestBuilder groupByDate(Boolean groupByDate) {
            this.groupByDate = groupByDate;
            return this;
        }
        
        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetWithinTimePeriodTotalsRequestBuilder
         */
        public GetWithinTimePeriodTotalsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetWithinTimePeriodTotalsRequestBuilder
         */
        public GetWithinTimePeriodTotalsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetWithinTimePeriodTotalsRequestBuilder
         */
        public GetWithinTimePeriodTotalsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getWithinTimePeriodTotals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A JSON object containing contractor payments information </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWithinTimePeriodTotalsCall(companyId, startDate, endDate, contractorUuid, groupByDate, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getWithinTimePeriodTotals request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A JSON object containing contractor payments information </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getWithinTimePeriodTotalsWithHttpInfo(companyId, startDate, endDate, contractorUuid, groupByDate, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWithinTimePeriodTotals request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A JSON object containing contractor payments information </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getWithinTimePeriodTotalsWithHttpInfo(companyId, startDate, endDate, contractorUuid, groupByDate, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getWithinTimePeriodTotals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A JSON object containing contractor payments information </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getWithinTimePeriodTotalsAsync(companyId, startDate, endDate, contractorUuid, groupByDate, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get contractor payments for a company
     * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @param startDate The time period for which to retrieve contractor payments (required)
     * @param endDate The time period for which to retrieve contractor payments (required)
     * @return GetWithinTimePeriodTotalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object containing contractor payments information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetWithinTimePeriodTotalsRequestBuilder getWithinTimePeriodTotals(String companyId, String startDate, String endDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new GetWithinTimePeriodTotalsRequestBuilder(companyId, startDate, endDate);
    }
    private okhttp3.Call previewDebitDateCall(String companyUuid, String xGustoAPIVersion, ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorPaymentsPreviewDebitDateRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/contractor_payments/preview"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewDebitDateValidateBeforeCall(String companyUuid, String xGustoAPIVersion, ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling previewDebitDate(Async)");
        }

        return previewDebitDateCall(companyUuid, xGustoAPIVersion, contractorPaymentsPreviewDebitDateRequest, _callback);

    }


    private ApiResponse<ContractorPaymentsPreviewDebitDateResponse> previewDebitDateWithHttpInfo(String companyUuid, String xGustoAPIVersion, ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest) throws ApiException {
        okhttp3.Call localVarCall = previewDebitDateValidateBeforeCall(companyUuid, xGustoAPIVersion, contractorPaymentsPreviewDebitDateRequest, null);
        Type localVarReturnType = new TypeToken<ContractorPaymentsPreviewDebitDateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call previewDebitDateAsync(String companyUuid, String xGustoAPIVersion, ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest, final ApiCallback<ContractorPaymentsPreviewDebitDateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewDebitDateValidateBeforeCall(companyUuid, xGustoAPIVersion, contractorPaymentsPreviewDebitDateRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractorPaymentsPreviewDebitDateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreviewDebitDateRequestBuilder {
        private final String companyUuid;
        private List<ContractorPaymentsPreviewDebitDateRequestContractorPaymentsInner> contractorPayments;
        private String xGustoAPIVersion;

        private PreviewDebitDateRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set contractorPayments
         * @param contractorPayments  (optional)
         * @return PreviewDebitDateRequestBuilder
         */
        public PreviewDebitDateRequestBuilder contractorPayments(List<ContractorPaymentsPreviewDebitDateRequestContractorPaymentsInner> contractorPayments) {
            this.contractorPayments = contractorPayments;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return PreviewDebitDateRequestBuilder
         */
        public PreviewDebitDateRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for previewDebitDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest = buildBodyParams();
            return previewDebitDateCall(companyUuid, xGustoAPIVersion, contractorPaymentsPreviewDebitDateRequest, _callback);
        }

        private ContractorPaymentsPreviewDebitDateRequest buildBodyParams() {
            ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest = new ContractorPaymentsPreviewDebitDateRequest();
            contractorPaymentsPreviewDebitDateRequest.contractorPayments(this.contractorPayments);
            return contractorPaymentsPreviewDebitDateRequest;
        }

        /**
         * Execute previewDebitDate request
         * @return ContractorPaymentsPreviewDebitDateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorPaymentsPreviewDebitDateResponse execute() throws ApiException {
            ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest = buildBodyParams();
            ApiResponse<ContractorPaymentsPreviewDebitDateResponse> localVarResp = previewDebitDateWithHttpInfo(companyUuid, xGustoAPIVersion, contractorPaymentsPreviewDebitDateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute previewDebitDate request with HTTP info returned
         * @return ApiResponse&lt;ContractorPaymentsPreviewDebitDateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorPaymentsPreviewDebitDateResponse> executeWithHttpInfo() throws ApiException {
            ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest = buildBodyParams();
            return previewDebitDateWithHttpInfo(companyUuid, xGustoAPIVersion, contractorPaymentsPreviewDebitDateRequest);
        }

        /**
         * Execute previewDebitDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorPaymentsPreviewDebitDateResponse> _callback) throws ApiException {
            ContractorPaymentsPreviewDebitDateRequest contractorPaymentsPreviewDebitDateRequest = buildBodyParams();
            return previewDebitDateAsync(companyUuid, xGustoAPIVersion, contractorPaymentsPreviewDebitDateRequest, _callback);
        }
    }

    /**
     * Preview contractor payment debit date
     * Returns a debit_date dependent on the ACH payment speed of the company.  If the payment method is Check or Historical payment, the debit_date will be the same as the check_date.  scope: &#x60;payrolls:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return PreviewDebitDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public PreviewDebitDateRequestBuilder previewDebitDate(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new PreviewDebitDateRequestBuilder(companyUuid);
    }
}
