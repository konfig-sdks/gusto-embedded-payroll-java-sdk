/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeFormsGenerateW2DocumentRequest;
import com.konfigthis.client.model.EmployeeFormsGenerateW2DocumentResponse;
import com.konfigthis.client.model.EmployeeFormsSignFormRequest;
import com.konfigthis.client.model.Form;
import com.konfigthis.client.model.FormPdf;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeFormsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeFormsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeFormsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateW2DocumentCall(String xGustoAPIVersion, EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeFormsGenerateW2DocumentRequest;

        // create path and map variables
        String localVarPath = "/v1/sandbox/generate_w2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateW2DocumentValidateBeforeCall(String xGustoAPIVersion, EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest, final ApiCallback _callback) throws ApiException {
        return generateW2DocumentCall(xGustoAPIVersion, employeeFormsGenerateW2DocumentRequest, _callback);

    }


    private ApiResponse<EmployeeFormsGenerateW2DocumentResponse> generateW2DocumentWithHttpInfo(String xGustoAPIVersion, EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = generateW2DocumentValidateBeforeCall(xGustoAPIVersion, employeeFormsGenerateW2DocumentRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeFormsGenerateW2DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateW2DocumentAsync(String xGustoAPIVersion, EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest, final ApiCallback<EmployeeFormsGenerateW2DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateW2DocumentValidateBeforeCall(xGustoAPIVersion, employeeFormsGenerateW2DocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeFormsGenerateW2DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateW2DocumentRequestBuilder {
        private final String employeeId;
        private Integer year;
        private String xGustoAPIVersion;

        private GenerateW2DocumentRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set year
         * @param year Must be equal to or more recent than 2015. If not specified, defaults to the previous year.  (optional)
         * @return GenerateW2DocumentRequestBuilder
         */
        public GenerateW2DocumentRequestBuilder year(Integer year) {
            this.year = year;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GenerateW2DocumentRequestBuilder
         */
        public GenerateW2DocumentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for generateW2Document
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest = buildBodyParams();
            return generateW2DocumentCall(xGustoAPIVersion, employeeFormsGenerateW2DocumentRequest, _callback);
        }

        private EmployeeFormsGenerateW2DocumentRequest buildBodyParams() {
            EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest = new EmployeeFormsGenerateW2DocumentRequest();
            employeeFormsGenerateW2DocumentRequest.employeeId(this.employeeId);
            employeeFormsGenerateW2DocumentRequest.year(this.year);
            return employeeFormsGenerateW2DocumentRequest;
        }

        /**
         * Execute generateW2Document request
         * @return EmployeeFormsGenerateW2DocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeFormsGenerateW2DocumentResponse execute() throws ApiException {
            EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest = buildBodyParams();
            ApiResponse<EmployeeFormsGenerateW2DocumentResponse> localVarResp = generateW2DocumentWithHttpInfo(xGustoAPIVersion, employeeFormsGenerateW2DocumentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateW2Document request with HTTP info returned
         * @return ApiResponse&lt;EmployeeFormsGenerateW2DocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeFormsGenerateW2DocumentResponse> executeWithHttpInfo() throws ApiException {
            EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest = buildBodyParams();
            return generateW2DocumentWithHttpInfo(xGustoAPIVersion, employeeFormsGenerateW2DocumentRequest);
        }

        /**
         * Execute generateW2Document request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeFormsGenerateW2DocumentResponse> _callback) throws ApiException {
            EmployeeFormsGenerateW2DocumentRequest employeeFormsGenerateW2DocumentRequest = buildBodyParams();
            return generateW2DocumentAsync(xGustoAPIVersion, employeeFormsGenerateW2DocumentRequest, _callback);
        }
    }

    /**
     * Generate a W2 form [DEMO]
     * &gt; 🚧 Demo action &gt; &gt; This action is only available in the Demo environment  Generates a W2 document for testing purposes.  scope: &#x60;employees:write&#x60;
     * @return GenerateW2DocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GenerateW2DocumentRequestBuilder generateW2Document(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GenerateW2DocumentRequestBuilder(employeeId);
    }
    private okhttp3.Call getAllEmployeeFormsCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/forms"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllEmployeeFormsValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAllEmployeeForms(Async)");
        }

        return getAllEmployeeFormsCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Form>> getAllEmployeeFormsWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllEmployeeFormsValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Form>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllEmployeeFormsAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<List<Form>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllEmployeeFormsValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Form>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllEmployeeFormsRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private GetAllEmployeeFormsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllEmployeeFormsRequestBuilder
         */
        public GetAllEmployeeFormsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAllEmployeeForms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllEmployeeFormsCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAllEmployeeForms request
         * @return List&lt;Form&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Form> execute() throws ApiException {
            ApiResponse<List<Form>> localVarResp = getAllEmployeeFormsWithHttpInfo(employeeId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllEmployeeForms request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Form&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Form>> executeWithHttpInfo() throws ApiException {
            return getAllEmployeeFormsWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute getAllEmployeeForms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Form>> _callback) throws ApiException {
            return getAllEmployeeFormsAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all employee forms
     * Get a list of all employee&#39;s forms  scope: &#x60;employee_forms:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetAllEmployeeFormsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllEmployeeFormsRequestBuilder getAllEmployeeForms(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAllEmployeeFormsRequestBuilder(employeeId);
    }
    private okhttp3.Call getFormByIdCall(String employeeId, String formId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/forms/{form_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "form_id" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFormByIdValidateBeforeCall(String employeeId, String formId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getFormById(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getFormById(Async)");
        }

        return getFormByIdCall(employeeId, formId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Form> getFormByIdWithHttpInfo(String employeeId, String formId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getFormByIdValidateBeforeCall(employeeId, formId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFormByIdAsync(String employeeId, String formId, String xGustoAPIVersion, final ApiCallback<Form> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFormByIdValidateBeforeCall(employeeId, formId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFormByIdRequestBuilder {
        private final String employeeId;
        private final String formId;
        private String xGustoAPIVersion;

        private GetFormByIdRequestBuilder(String employeeId, String formId) {
            this.employeeId = employeeId;
            this.formId = formId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetFormByIdRequestBuilder
         */
        public GetFormByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getFormById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFormByIdCall(employeeId, formId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getFormById request
         * @return Form
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Form execute() throws ApiException {
            ApiResponse<Form> localVarResp = getFormByIdWithHttpInfo(employeeId, formId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFormById request with HTTP info returned
         * @return ApiResponse&lt;Form&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Form> executeWithHttpInfo() throws ApiException {
            return getFormByIdWithHttpInfo(employeeId, formId, xGustoAPIVersion);
        }

        /**
         * Execute getFormById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Form> _callback) throws ApiException {
            return getFormByIdAsync(employeeId, formId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee form
     * Get an employee form  scope: &#x60;employee_forms:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @param formId The UUID of the form (required)
     * @return GetFormByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetFormByIdRequestBuilder getFormById(String employeeId, String formId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new GetFormByIdRequestBuilder(employeeId, formId);
    }
    private okhttp3.Call getPdfLinkCall(String employeeId, String formId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/forms/{form_id}/pdf"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "form_id" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdfLinkValidateBeforeCall(String employeeId, String formId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getPdfLink(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getPdfLink(Async)");
        }

        return getPdfLinkCall(employeeId, formId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<FormPdf> getPdfLinkWithHttpInfo(String employeeId, String formId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getPdfLinkValidateBeforeCall(employeeId, formId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<FormPdf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPdfLinkAsync(String employeeId, String formId, String xGustoAPIVersion, final ApiCallback<FormPdf> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdfLinkValidateBeforeCall(employeeId, formId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<FormPdf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPdfLinkRequestBuilder {
        private final String employeeId;
        private final String formId;
        private String xGustoAPIVersion;

        private GetPdfLinkRequestBuilder(String employeeId, String formId) {
            this.employeeId = employeeId;
            this.formId = formId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetPdfLinkRequestBuilder
         */
        public GetPdfLinkRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getPdfLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPdfLinkCall(employeeId, formId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getPdfLink request
         * @return FormPdf
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public FormPdf execute() throws ApiException {
            ApiResponse<FormPdf> localVarResp = getPdfLinkWithHttpInfo(employeeId, formId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPdfLink request with HTTP info returned
         * @return ApiResponse&lt;FormPdf&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormPdf> executeWithHttpInfo() throws ApiException {
            return getPdfLinkWithHttpInfo(employeeId, formId, xGustoAPIVersion);
        }

        /**
         * Execute getPdfLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormPdf> _callback) throws ApiException {
            return getPdfLinkAsync(employeeId, formId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get the employee form pdf
     * Get the link to the form PDF  scope: &#x60;employee_forms:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @param formId The UUID of the form (required)
     * @return GetPdfLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetPdfLinkRequestBuilder getPdfLink(String employeeId, String formId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new GetPdfLinkRequestBuilder(employeeId, formId);
    }
    private okhttp3.Call signFormCall(String employeeId, String formId, String xGustoAPIVersion, EmployeeFormsSignFormRequest employeeFormsSignFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeFormsSignFormRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/forms/{form_id}/sign"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "form_id" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signFormValidateBeforeCall(String employeeId, String formId, String xGustoAPIVersion, EmployeeFormsSignFormRequest employeeFormsSignFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling signForm(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling signForm(Async)");
        }

        return signFormCall(employeeId, formId, xGustoAPIVersion, employeeFormsSignFormRequest, _callback);

    }


    private ApiResponse<Form> signFormWithHttpInfo(String employeeId, String formId, String xGustoAPIVersion, EmployeeFormsSignFormRequest employeeFormsSignFormRequest) throws ApiException {
        okhttp3.Call localVarCall = signFormValidateBeforeCall(employeeId, formId, xGustoAPIVersion, employeeFormsSignFormRequest, null);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call signFormAsync(String employeeId, String formId, String xGustoAPIVersion, EmployeeFormsSignFormRequest employeeFormsSignFormRequest, final ApiCallback<Form> _callback) throws ApiException {

        okhttp3.Call localVarCall = signFormValidateBeforeCall(employeeId, formId, xGustoAPIVersion, employeeFormsSignFormRequest, _callback);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SignFormRequestBuilder {
        private final String signatureText;
        private final Boolean agree;
        private final String signedByIpAddress;
        private final String employeeId;
        private final String formId;
        private String xGustoAPIVersion;

        private SignFormRequestBuilder(String signatureText, Boolean agree, String signedByIpAddress, String employeeId, String formId) {
            this.signatureText = signatureText;
            this.agree = agree;
            this.signedByIpAddress = signedByIpAddress;
            this.employeeId = employeeId;
            this.formId = formId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return SignFormRequestBuilder
         */
        public SignFormRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for signForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeFormsSignFormRequest employeeFormsSignFormRequest = buildBodyParams();
            return signFormCall(employeeId, formId, xGustoAPIVersion, employeeFormsSignFormRequest, _callback);
        }

        private EmployeeFormsSignFormRequest buildBodyParams() {
            EmployeeFormsSignFormRequest employeeFormsSignFormRequest = new EmployeeFormsSignFormRequest();
            employeeFormsSignFormRequest.signatureText(this.signatureText);
            employeeFormsSignFormRequest.agree(this.agree);
            employeeFormsSignFormRequest.signedByIpAddress(this.signedByIpAddress);
            return employeeFormsSignFormRequest;
        }

        /**
         * Execute signForm request
         * @return Form
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Form execute() throws ApiException {
            EmployeeFormsSignFormRequest employeeFormsSignFormRequest = buildBodyParams();
            ApiResponse<Form> localVarResp = signFormWithHttpInfo(employeeId, formId, xGustoAPIVersion, employeeFormsSignFormRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute signForm request with HTTP info returned
         * @return ApiResponse&lt;Form&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Form> executeWithHttpInfo() throws ApiException {
            EmployeeFormsSignFormRequest employeeFormsSignFormRequest = buildBodyParams();
            return signFormWithHttpInfo(employeeId, formId, xGustoAPIVersion, employeeFormsSignFormRequest);
        }

        /**
         * Execute signForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Form> _callback) throws ApiException {
            EmployeeFormsSignFormRequest employeeFormsSignFormRequest = buildBodyParams();
            return signFormAsync(employeeId, formId, xGustoAPIVersion, employeeFormsSignFormRequest, _callback);
        }
    }

    /**
     * Sign an employee form
     * Sign a company form  scope: &#x60;employee_forms:sign&#x60;
     * @param employeeId The UUID of the employee (required)
     * @param formId The UUID of the form (required)
     * @return SignFormRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public SignFormRequestBuilder signForm(String signatureText, Boolean agree, String signedByIpAddress, String employeeId, String formId) throws IllegalArgumentException {
        if (signatureText == null) throw new IllegalArgumentException("\"signatureText\" is required but got null");
            

        if (agree == null) throw new IllegalArgumentException("\"agree\" is required but got null");
        if (signedByIpAddress == null) throw new IllegalArgumentException("\"signedByIpAddress\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new SignFormRequestBuilder(signatureText, agree, signedByIpAddress, employeeId, formId);
    }
}
