/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TaxRequirementsGetStatesResponseInner;
import com.konfigthis.client.model.TaxRequirementsState;
import com.konfigthis.client.model.TaxRequirementsUpdateStateTaxesRequest;
import com.konfigthis.client.model.TaxRequirementsUpdateStateTaxesRequestRequirementSetsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TaxRequirementsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaxRequirementsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TaxRequirementsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getStateRequirementsCall(String companyUuid, String state, Boolean scheduling, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/tax_requirements/{state}"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()))
            .replace("{" + "state" + "}", localVarApiClient.escapeString(state.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scheduling != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduling", scheduling));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStateRequirementsValidateBeforeCall(String companyUuid, String state, Boolean scheduling, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getStateRequirements(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling getStateRequirements(Async)");
        }

        return getStateRequirementsCall(companyUuid, state, scheduling, xGustoAPIVersion, _callback);

    }


    private ApiResponse<TaxRequirementsState> getStateRequirementsWithHttpInfo(String companyUuid, String state, Boolean scheduling, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getStateRequirementsValidateBeforeCall(companyUuid, state, scheduling, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<TaxRequirementsState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStateRequirementsAsync(String companyUuid, String state, Boolean scheduling, String xGustoAPIVersion, final ApiCallback<TaxRequirementsState> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStateRequirementsValidateBeforeCall(companyUuid, state, scheduling, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<TaxRequirementsState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStateRequirementsRequestBuilder {
        private final String companyUuid;
        private final String state;
        private Boolean scheduling;
        private String xGustoAPIVersion;

        private GetStateRequirementsRequestBuilder(String companyUuid, String state) {
            this.companyUuid = companyUuid;
            this.state = state;
        }

        /**
         * Set scheduling
         * @param scheduling When true, return \&quot;new\&quot; requirement sets with valid &#x60;effective_from&#x60; dates that are available to save new effective dated values. (optional)
         * @return GetStateRequirementsRequestBuilder
         */
        public GetStateRequirementsRequestBuilder scheduling(Boolean scheduling) {
            this.scheduling = scheduling;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetStateRequirementsRequestBuilder
         */
        public GetStateRequirementsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getStateRequirements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStateRequirementsCall(companyUuid, state, scheduling, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getStateRequirements request
         * @return TaxRequirementsState
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TaxRequirementsState execute() throws ApiException {
            ApiResponse<TaxRequirementsState> localVarResp = getStateRequirementsWithHttpInfo(companyUuid, state, scheduling, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStateRequirements request with HTTP info returned
         * @return ApiResponse&lt;TaxRequirementsState&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaxRequirementsState> executeWithHttpInfo() throws ApiException {
            return getStateRequirementsWithHttpInfo(companyUuid, state, scheduling, xGustoAPIVersion);
        }

        /**
         * Execute getStateRequirements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaxRequirementsState> _callback) throws ApiException {
            return getStateRequirementsAsync(companyUuid, state, scheduling, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get State Tax Requirements
     * Get all tax requirements for a given state.  ### Metadata Examples  &#x60;&#x60;&#x60;json select {   \&quot;type\&quot;: \&quot;select\&quot;,   \&quot;options\&quot;: [     { \&quot;label\&quot;: \&quot;Semiweekly\&quot;,  value: \&quot;Semi-weekly\&quot; },     { \&quot;label\&quot;: \&quot;Monthly\&quot;,  value: \&quot;Monthly\&quot; },     { \&quot;label\&quot;: \&quot;Quarterly\&quot;,  value: \&quot;Quarterly\&quot; },   ] } &#x60;&#x60;&#x60; &#x60;&#x60;&#x60;json radio {   \&quot;type\&quot;: \&quot;radio\&quot;,   \&quot;options\&quot;: [     { \&quot;label\&quot;: \&quot;No, we cannot reimburse\&quot;,  value: false, short_label: \&quot;Not Reimbursable\&quot; },     { \&quot;label\&quot;: \&quot;Yes, we can reimburse\&quot;,  value: true, short_label: \&quot;Reimbursable\&quot; },   ] } &#x60;&#x60;&#x60; &#x60;&#x60;&#x60;json account_number {   \&quot;type\&quot;: \&quot;account_number\&quot;,   \&quot;mask\&quot;: \&quot;######-##&#39;,   \&quot;prefix\&quot;: null } &#x60;&#x60;&#x60; &#x60;&#x60;&#x60;json tax_rate {   \&quot;type\&quot;: \&quot;tax_rate\&quot;,   \&quot;validation\&quot;: {     \&quot;type\&quot;: \&quot;min_max\&quot;,     \&quot;min\&quot;: \&quot;0.0004\&quot;,     \&quot;max\&quot;: \&quot;0.081\&quot;   } } &#x60;&#x60;&#x60;  scope: &#x60;company_tax_requirements:read&#x60; 
     * @param companyUuid The UUID of the company (required)
     * @param state 2-letter US state abbreviation (required)
     * @return GetStateRequirementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetStateRequirementsRequestBuilder getStateRequirements(String companyUuid, String state) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
            

        return new GetStateRequirementsRequestBuilder(companyUuid, state);
    }
    private okhttp3.Call getStatesCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/tax_requirements"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatesValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getStates(Async)");
        }

        return getStatesCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<TaxRequirementsGetStatesResponseInner>> getStatesWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getStatesValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<TaxRequirementsGetStatesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatesAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<List<TaxRequirementsGetStatesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatesValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<TaxRequirementsGetStatesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatesRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetStatesRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetStatesRequestBuilder
         */
        public GetStatesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getStates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatesCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getStates request
         * @return List&lt;TaxRequirementsGetStatesResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<TaxRequirementsGetStatesResponseInner> execute() throws ApiException {
            ApiResponse<List<TaxRequirementsGetStatesResponseInner>> localVarResp = getStatesWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TaxRequirementsGetStatesResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TaxRequirementsGetStatesResponseInner>> executeWithHttpInfo() throws ApiException {
            return getStatesWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getStates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TaxRequirementsGetStatesResponseInner>> _callback) throws ApiException {
            return getStatesAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get All Tax Requirement States
     * Returns objects describing the states that have tax requirements for the company  scope: &#x60;company_tax_requirements:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetStatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetStatesRequestBuilder getStates(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetStatesRequestBuilder(companyUuid);
    }
    private okhttp3.Call updateStateTaxesCall(String companyUuid, String state, String xGustoAPIVersion, TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxRequirementsUpdateStateTaxesRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/tax_requirements/{state}"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()))
            .replace("{" + "state" + "}", localVarApiClient.escapeString(state.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStateTaxesValidateBeforeCall(String companyUuid, String state, String xGustoAPIVersion, TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling updateStateTaxes(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling updateStateTaxes(Async)");
        }

        return updateStateTaxesCall(companyUuid, state, xGustoAPIVersion, taxRequirementsUpdateStateTaxesRequest, _callback);

    }


    private ApiResponse<Void> updateStateTaxesWithHttpInfo(String companyUuid, String state, String xGustoAPIVersion, TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStateTaxesValidateBeforeCall(companyUuid, state, xGustoAPIVersion, taxRequirementsUpdateStateTaxesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStateTaxesAsync(String companyUuid, String state, String xGustoAPIVersion, TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStateTaxesValidateBeforeCall(companyUuid, state, xGustoAPIVersion, taxRequirementsUpdateStateTaxesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStateTaxesRequestBuilder {
        private final String companyUuid;
        private final String state;
        private List<TaxRequirementsUpdateStateTaxesRequestRequirementSetsInner> requirementSets;
        private String xGustoAPIVersion;

        private UpdateStateTaxesRequestBuilder(String companyUuid, String state) {
            this.companyUuid = companyUuid;
            this.state = state;
        }

        /**
         * Set requirementSets
         * @param requirementSets  (optional)
         * @return UpdateStateTaxesRequestBuilder
         */
        public UpdateStateTaxesRequestBuilder requirementSets(List<TaxRequirementsUpdateStateTaxesRequestRequirementSetsInner> requirementSets) {
            this.requirementSets = requirementSets;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateStateTaxesRequestBuilder
         */
        public UpdateStateTaxesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateStateTaxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest = buildBodyParams();
            return updateStateTaxesCall(companyUuid, state, xGustoAPIVersion, taxRequirementsUpdateStateTaxesRequest, _callback);
        }

        private TaxRequirementsUpdateStateTaxesRequest buildBodyParams() {
            TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest = new TaxRequirementsUpdateStateTaxesRequest();
            taxRequirementsUpdateStateTaxesRequest.requirementSets(this.requirementSets);
            return taxRequirementsUpdateStateTaxesRequest;
        }

        /**
         * Execute updateStateTaxes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest = buildBodyParams();
            updateStateTaxesWithHttpInfo(companyUuid, state, xGustoAPIVersion, taxRequirementsUpdateStateTaxesRequest);
        }

        /**
         * Execute updateStateTaxes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest = buildBodyParams();
            return updateStateTaxesWithHttpInfo(companyUuid, state, xGustoAPIVersion, taxRequirementsUpdateStateTaxesRequest);
        }

        /**
         * Execute updateStateTaxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TaxRequirementsUpdateStateTaxesRequest taxRequirementsUpdateStateTaxesRequest = buildBodyParams();
            return updateStateTaxesAsync(companyUuid, state, xGustoAPIVersion, taxRequirementsUpdateStateTaxesRequest, _callback);
        }
    }

    /**
     * Update State Tax Requirements
     * Update State Tax Requirements  scope: &#x60;company_tax_requirements:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @param state 2-letter US state abbreviation (required)
     * @return UpdateStateTaxesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStateTaxesRequestBuilder updateStateTaxes(String companyUuid, String state) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
            

        return new UpdateStateTaxesRequestBuilder(companyUuid, state);
    }
}
