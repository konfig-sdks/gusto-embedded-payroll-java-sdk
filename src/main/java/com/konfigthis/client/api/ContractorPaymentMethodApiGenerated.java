/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContractorBankAccount;
import com.konfigthis.client.model.ContractorPaymentMethod;
import com.konfigthis.client.model.ContractorPaymentMethodCreateBankAccountRequest;
import com.konfigthis.client.model.ContractorPaymentMethodUpdateBankAccountRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractorPaymentMethodApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractorPaymentMethodApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractorPaymentMethodApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBankAccountCall(String contractorUuid, String xGustoAPIVersion, ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorPaymentMethodCreateBankAccountRequest;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/bank_accounts"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankAccountValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling createBankAccount(Async)");
        }

        return createBankAccountCall(contractorUuid, xGustoAPIVersion, contractorPaymentMethodCreateBankAccountRequest, _callback);

    }


    private ApiResponse<ContractorBankAccount> createBankAccountWithHttpInfo(String contractorUuid, String xGustoAPIVersion, ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = createBankAccountValidateBeforeCall(contractorUuid, xGustoAPIVersion, contractorPaymentMethodCreateBankAccountRequest, null);
        Type localVarReturnType = new TypeToken<ContractorBankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBankAccountAsync(String contractorUuid, String xGustoAPIVersion, ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest, final ApiCallback<ContractorBankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankAccountValidateBeforeCall(contractorUuid, xGustoAPIVersion, contractorPaymentMethodCreateBankAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractorBankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBankAccountRequestBuilder {
        private final String name;
        private final String routingNumber;
        private final String accountNumber;
        private final String accountType;
        private final String contractorUuid;
        private String xGustoAPIVersion;

        private CreateBankAccountRequestBuilder(String name, String routingNumber, String accountNumber, String accountType, String contractorUuid) {
            this.name = name;
            this.routingNumber = routingNumber;
            this.accountNumber = accountNumber;
            this.accountType = accountType;
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateBankAccountRequestBuilder
         */
        public CreateBankAccountRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest = buildBodyParams();
            return createBankAccountCall(contractorUuid, xGustoAPIVersion, contractorPaymentMethodCreateBankAccountRequest, _callback);
        }

        private ContractorPaymentMethodCreateBankAccountRequest buildBodyParams() {
            ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest = new ContractorPaymentMethodCreateBankAccountRequest();
            contractorPaymentMethodCreateBankAccountRequest.name(this.name);
            contractorPaymentMethodCreateBankAccountRequest.routingNumber(this.routingNumber);
            contractorPaymentMethodCreateBankAccountRequest.accountNumber(this.accountNumber);
            if (this.accountType != null)
            contractorPaymentMethodCreateBankAccountRequest.accountType(ContractorPaymentMethodCreateBankAccountRequest.AccountTypeEnum.fromValue(this.accountType));
            return contractorPaymentMethodCreateBankAccountRequest;
        }

        /**
         * Execute createBankAccount request
         * @return ContractorBankAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorBankAccount execute() throws ApiException {
            ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest = buildBodyParams();
            ApiResponse<ContractorBankAccount> localVarResp = createBankAccountWithHttpInfo(contractorUuid, xGustoAPIVersion, contractorPaymentMethodCreateBankAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBankAccount request with HTTP info returned
         * @return ApiResponse&lt;ContractorBankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorBankAccount> executeWithHttpInfo() throws ApiException {
            ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest = buildBodyParams();
            return createBankAccountWithHttpInfo(contractorUuid, xGustoAPIVersion, contractorPaymentMethodCreateBankAccountRequest);
        }

        /**
         * Execute createBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorBankAccount> _callback) throws ApiException {
            ContractorPaymentMethodCreateBankAccountRequest contractorPaymentMethodCreateBankAccountRequest = buildBodyParams();
            return createBankAccountAsync(contractorUuid, xGustoAPIVersion, contractorPaymentMethodCreateBankAccountRequest, _callback);
        }
    }

    /**
     * Create an contractor bank account
     * Creates a contractor bank account.  Note: We currently only support one bank account per contractor. Using this endpoint on a contractor who has already has a bank account will just replace it.  scope: &#x60;contractor_payment_methods:write&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @return CreateBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateBankAccountRequestBuilder createBankAccount(String name, String routingNumber, String accountNumber, String accountType, String contractorUuid) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (routingNumber == null) throw new IllegalArgumentException("\"routingNumber\" is required but got null");
            

        if (accountNumber == null) throw new IllegalArgumentException("\"accountNumber\" is required but got null");
            

        if (accountType == null) throw new IllegalArgumentException("\"accountType\" is required but got null");
            

        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new CreateBankAccountRequestBuilder(name, routingNumber, accountNumber, accountType, contractorUuid);
    }
    private okhttp3.Call getContractorPaymentMethodCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/payment_method"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractorPaymentMethodValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling getContractorPaymentMethod(Async)");
        }

        return getContractorPaymentMethodCall(contractorUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<ContractorPaymentMethod> getContractorPaymentMethodWithHttpInfo(String contractorUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getContractorPaymentMethodValidateBeforeCall(contractorUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<ContractorPaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContractorPaymentMethodAsync(String contractorUuid, String xGustoAPIVersion, final ApiCallback<ContractorPaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractorPaymentMethodValidateBeforeCall(contractorUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<ContractorPaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContractorPaymentMethodRequestBuilder {
        private final String contractorUuid;
        private String xGustoAPIVersion;

        private GetContractorPaymentMethodRequestBuilder(String contractorUuid) {
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetContractorPaymentMethodRequestBuilder
         */
        public GetContractorPaymentMethodRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getContractorPaymentMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContractorPaymentMethodCall(contractorUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getContractorPaymentMethod request
         * @return ContractorPaymentMethod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorPaymentMethod execute() throws ApiException {
            ApiResponse<ContractorPaymentMethod> localVarResp = getContractorPaymentMethodWithHttpInfo(contractorUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContractorPaymentMethod request with HTTP info returned
         * @return ApiResponse&lt;ContractorPaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorPaymentMethod> executeWithHttpInfo() throws ApiException {
            return getContractorPaymentMethodWithHttpInfo(contractorUuid, xGustoAPIVersion);
        }

        /**
         * Execute getContractorPaymentMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorPaymentMethod> _callback) throws ApiException {
            return getContractorPaymentMethodAsync(contractorUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a contractor&#39;s payment method
     * Fetches a contractor&#39;s payment method. A contractor payment method describes how the payment should be split across the contractor&#39;s associated bank accounts.  scope: &#x60;contractor_payment_methods:read&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @return GetContractorPaymentMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetContractorPaymentMethodRequestBuilder getContractorPaymentMethod(String contractorUuid) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new GetContractorPaymentMethodRequestBuilder(contractorUuid);
    }
    private okhttp3.Call listBankAccountsCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/bank_accounts"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBankAccountsValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling listBankAccounts(Async)");
        }

        return listBankAccountsCall(contractorUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<ContractorBankAccount>> listBankAccountsWithHttpInfo(String contractorUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listBankAccountsValidateBeforeCall(contractorUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<ContractorBankAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBankAccountsAsync(String contractorUuid, String xGustoAPIVersion, final ApiCallback<List<ContractorBankAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBankAccountsValidateBeforeCall(contractorUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<ContractorBankAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBankAccountsRequestBuilder {
        private final String contractorUuid;
        private String xGustoAPIVersion;

        private ListBankAccountsRequestBuilder(String contractorUuid) {
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListBankAccountsRequestBuilder
         */
        public ListBankAccountsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listBankAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBankAccountsCall(contractorUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listBankAccounts request
         * @return List&lt;ContractorBankAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<ContractorBankAccount> execute() throws ApiException {
            ApiResponse<List<ContractorBankAccount>> localVarResp = listBankAccountsWithHttpInfo(contractorUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBankAccounts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ContractorBankAccount&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ContractorBankAccount>> executeWithHttpInfo() throws ApiException {
            return listBankAccountsWithHttpInfo(contractorUuid, xGustoAPIVersion);
        }

        /**
         * Execute listBankAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ContractorBankAccount>> _callback) throws ApiException {
            return listBankAccountsAsync(contractorUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all contractor bank accounts
     * Returns all contractor bank accounts.  scope: &#x60;contractor_payment_methods:read&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @return ListBankAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListBankAccountsRequestBuilder listBankAccounts(String contractorUuid) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new ListBankAccountsRequestBuilder(contractorUuid);
    }
    private okhttp3.Call updateBankAccountCall(String contractorUuid, String xGustoAPIVersion, ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorPaymentMethodUpdateBankAccountRequest;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/payment_method"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBankAccountValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling updateBankAccount(Async)");
        }

        return updateBankAccountCall(contractorUuid, xGustoAPIVersion, contractorPaymentMethodUpdateBankAccountRequest, _callback);

    }


    private ApiResponse<ContractorPaymentMethod> updateBankAccountWithHttpInfo(String contractorUuid, String xGustoAPIVersion, ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBankAccountValidateBeforeCall(contractorUuid, xGustoAPIVersion, contractorPaymentMethodUpdateBankAccountRequest, null);
        Type localVarReturnType = new TypeToken<ContractorPaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBankAccountAsync(String contractorUuid, String xGustoAPIVersion, ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest, final ApiCallback<ContractorPaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBankAccountValidateBeforeCall(contractorUuid, xGustoAPIVersion, contractorPaymentMethodUpdateBankAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractorPaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBankAccountRequestBuilder {
        private final String contractorUuid;
        private String version;
        private String type;
        private String xGustoAPIVersion;

        private UpdateBankAccountRequestBuilder(String contractorUuid) {
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field. (optional)
         * @return UpdateBankAccountRequestBuilder
         */
        public UpdateBankAccountRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set type
         * @param type The payment method type. If type is Direct Deposit, the contractor is required to have a bank account. see [Bank account endpoint](./post-v1-contractors-contractor_uuid-bank_accounts) (optional)
         * @return UpdateBankAccountRequestBuilder
         */
        public UpdateBankAccountRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateBankAccountRequestBuilder
         */
        public UpdateBankAccountRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest = buildBodyParams();
            return updateBankAccountCall(contractorUuid, xGustoAPIVersion, contractorPaymentMethodUpdateBankAccountRequest, _callback);
        }

        private ContractorPaymentMethodUpdateBankAccountRequest buildBodyParams() {
            ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest = new ContractorPaymentMethodUpdateBankAccountRequest();
            return contractorPaymentMethodUpdateBankAccountRequest;
        }

        /**
         * Execute updateBankAccount request
         * @return ContractorPaymentMethod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorPaymentMethod execute() throws ApiException {
            ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest = buildBodyParams();
            ApiResponse<ContractorPaymentMethod> localVarResp = updateBankAccountWithHttpInfo(contractorUuid, xGustoAPIVersion, contractorPaymentMethodUpdateBankAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBankAccount request with HTTP info returned
         * @return ApiResponse&lt;ContractorPaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorPaymentMethod> executeWithHttpInfo() throws ApiException {
            ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest = buildBodyParams();
            return updateBankAccountWithHttpInfo(contractorUuid, xGustoAPIVersion, contractorPaymentMethodUpdateBankAccountRequest);
        }

        /**
         * Execute updateBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorPaymentMethod> _callback) throws ApiException {
            ContractorPaymentMethodUpdateBankAccountRequest contractorPaymentMethodUpdateBankAccountRequest = buildBodyParams();
            return updateBankAccountAsync(contractorUuid, xGustoAPIVersion, contractorPaymentMethodUpdateBankAccountRequest, _callback);
        }
    }

    /**
     * Update a contractor&#39;s payment method
     * Updates a contractor&#39;s payment method. Note that creating a contractor bank account will also update the contractor&#39;s payment method.  scope: &#x60;contractor_payment_methods:write&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @return UpdateBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBankAccountRequestBuilder updateBankAccount(String contractorUuid) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new UpdateBankAccountRequestBuilder(contractorUuid);
    }
}
