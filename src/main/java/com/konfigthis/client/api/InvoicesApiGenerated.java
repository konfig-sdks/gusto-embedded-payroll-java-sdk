/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InvoiceData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvoicesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInvoicingDataForCompaniesCall(String invoicePeriod, Double page, Double per, String companyUuids, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/invoices/{invoice_period}"
            .replace("{" + "invoice_period" + "}", localVarApiClient.escapeString(invoicePeriod.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (companyUuids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_uuids", companyUuids));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoicingDataForCompaniesValidateBeforeCall(String invoicePeriod, Double page, Double per, String companyUuids, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoicePeriod' is set
        if (invoicePeriod == null) {
            throw new ApiException("Missing the required parameter 'invoicePeriod' when calling getInvoicingDataForCompanies(Async)");
        }

        return getInvoicingDataForCompaniesCall(invoicePeriod, page, per, companyUuids, xGustoAPIVersion, _callback);

    }


    private ApiResponse<InvoiceData> getInvoicingDataForCompaniesWithHttpInfo(String invoicePeriod, Double page, Double per, String companyUuids, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getInvoicingDataForCompaniesValidateBeforeCall(invoicePeriod, page, per, companyUuids, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<InvoiceData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvoicingDataForCompaniesAsync(String invoicePeriod, Double page, Double per, String companyUuids, String xGustoAPIVersion, final ApiCallback<InvoiceData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoicingDataForCompaniesValidateBeforeCall(invoicePeriod, page, per, companyUuids, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<InvoiceData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInvoicingDataForCompaniesRequestBuilder {
        private final String invoicePeriod;
        private Double page;
        private Double per;
        private String companyUuids;
        private String xGustoAPIVersion;

        private GetInvoicingDataForCompaniesRequestBuilder(String invoicePeriod) {
            this.invoicePeriod = invoicePeriod;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetInvoicingDataForCompaniesRequestBuilder
         */
        public GetInvoicingDataForCompaniesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetInvoicingDataForCompaniesRequestBuilder
         */
        public GetInvoicingDataForCompaniesRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set companyUuids
         * @param companyUuids Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. &#x60;?company_uuids&#x3D;781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5&#x60; (optional)
         * @return GetInvoicingDataForCompaniesRequestBuilder
         */
        public GetInvoicingDataForCompaniesRequestBuilder companyUuids(String companyUuids) {
            this.companyUuids = companyUuids;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetInvoicingDataForCompaniesRequestBuilder
         */
        public GetInvoicingDataForCompaniesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getInvoicingDataForCompanies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvoicingDataForCompaniesCall(invoicePeriod, page, per, companyUuids, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getInvoicingDataForCompanies request
         * @return InvoiceData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceData execute() throws ApiException {
            ApiResponse<InvoiceData> localVarResp = getInvoicingDataForCompaniesWithHttpInfo(invoicePeriod, page, per, companyUuids, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInvoicingDataForCompanies request with HTTP info returned
         * @return ApiResponse&lt;InvoiceData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceData> executeWithHttpInfo() throws ApiException {
            return getInvoicingDataForCompaniesWithHttpInfo(invoicePeriod, page, per, companyUuids, xGustoAPIVersion);
        }

        /**
         * Execute getInvoicingDataForCompanies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceData> _callback) throws ApiException {
            return getInvoicingDataForCompaniesAsync(invoicePeriod, page, per, companyUuids, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Retrieve invoicing data for companies
     * Retrieve data for active companies used to calculate invoices for Gusto Embedded Payroll. A company is considered active for an invoice period if they are an active partner managed company, have run payroll or created contractor payments since becoming a partner managed company, and are not suspended at any point during the invoice period.  This endpoint forces pagination, with 100 results returned at a time. You can learn more about our pagination here: [pagination guide](https://docs.gusto.com/embedded-payroll/docs/pagination)   &gt; 📘 Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)  scope: &#x60;invoices:read&#x60;
     * @param invoicePeriod The month we are calculating the invoice for. Must be in YYYY-MM format (required)
     * @return GetInvoicingDataForCompaniesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetInvoicingDataForCompaniesRequestBuilder getInvoicingDataForCompanies(String invoicePeriod) throws IllegalArgumentException {
        if (invoicePeriod == null) throw new IllegalArgumentException("\"invoicePeriod\" is required but got null");
            

        return new GetInvoicingDataForCompaniesRequestBuilder(invoicePeriod);
    }
}
