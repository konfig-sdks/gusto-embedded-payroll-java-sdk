/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExternalPayroll;
import com.konfigthis.client.model.ExternalPayrollBasic;
import com.konfigthis.client.model.ExternalPayrollTaxSuggestions;
import com.konfigthis.client.model.ExternalPayrollsCreateNewPayrollRequest;
import com.konfigthis.client.model.ExternalPayrollsUpdatePayrollItemsRequest;
import com.konfigthis.client.model.ExternalPayrollsUpdatePayrollItemsRequestExternalPayrollItemsInner;
import com.konfigthis.client.model.ExternalPayrollsUpdateTaxLiabilitiesRequest;
import com.konfigthis.client.model.ExternalPayrollsUpdateTaxLiabilitiesRequestLiabilitySelectionsInner;
import com.konfigthis.client.model.TaxLiabilitiesSelections;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExternalPayrollsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExternalPayrollsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExternalPayrollsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPayrollCall(String companyUuid, String xGustoAPIVersion, ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalPayrollsCreateNewPayrollRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPayrollValidateBeforeCall(String companyUuid, String xGustoAPIVersion, ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling createNewPayroll(Async)");
        }

        return createNewPayrollCall(companyUuid, xGustoAPIVersion, externalPayrollsCreateNewPayrollRequest, _callback);

    }


    private ApiResponse<ExternalPayroll> createNewPayrollWithHttpInfo(String companyUuid, String xGustoAPIVersion, ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewPayrollValidateBeforeCall(companyUuid, xGustoAPIVersion, externalPayrollsCreateNewPayrollRequest, null);
        Type localVarReturnType = new TypeToken<ExternalPayroll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPayrollAsync(String companyUuid, String xGustoAPIVersion, ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest, final ApiCallback<ExternalPayroll> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPayrollValidateBeforeCall(companyUuid, xGustoAPIVersion, externalPayrollsCreateNewPayrollRequest, _callback);
        Type localVarReturnType = new TypeToken<ExternalPayroll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPayrollRequestBuilder {
        private final String checkDate;
        private final String paymentPeriodStartDate;
        private final String paymentPeriodEndDate;
        private final String companyUuid;
        private String xGustoAPIVersion;

        private CreateNewPayrollRequestBuilder(String checkDate, String paymentPeriodStartDate, String paymentPeriodEndDate, String companyUuid) {
            this.checkDate = checkDate;
            this.paymentPeriodStartDate = paymentPeriodStartDate;
            this.paymentPeriodEndDate = paymentPeriodEndDate;
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateNewPayrollRequestBuilder
         */
        public CreateNewPayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createNewPayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest = buildBodyParams();
            return createNewPayrollCall(companyUuid, xGustoAPIVersion, externalPayrollsCreateNewPayrollRequest, _callback);
        }

        private ExternalPayrollsCreateNewPayrollRequest buildBodyParams() {
            ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest = new ExternalPayrollsCreateNewPayrollRequest();
            externalPayrollsCreateNewPayrollRequest.checkDate(this.checkDate);
            externalPayrollsCreateNewPayrollRequest.paymentPeriodStartDate(this.paymentPeriodStartDate);
            externalPayrollsCreateNewPayrollRequest.paymentPeriodEndDate(this.paymentPeriodEndDate);
            return externalPayrollsCreateNewPayrollRequest;
        }

        /**
         * Execute createNewPayroll request
         * @return ExternalPayroll
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ExternalPayroll execute() throws ApiException {
            ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest = buildBodyParams();
            ApiResponse<ExternalPayroll> localVarResp = createNewPayrollWithHttpInfo(companyUuid, xGustoAPIVersion, externalPayrollsCreateNewPayrollRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPayroll request with HTTP info returned
         * @return ApiResponse&lt;ExternalPayroll&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalPayroll> executeWithHttpInfo() throws ApiException {
            ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest = buildBodyParams();
            return createNewPayrollWithHttpInfo(companyUuid, xGustoAPIVersion, externalPayrollsCreateNewPayrollRequest);
        }

        /**
         * Execute createNewPayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalPayroll> _callback) throws ApiException {
            ExternalPayrollsCreateNewPayrollRequest externalPayrollsCreateNewPayrollRequest = buildBodyParams();
            return createNewPayrollAsync(companyUuid, xGustoAPIVersion, externalPayrollsCreateNewPayrollRequest, _callback);
        }
    }

    /**
     * Create a new external payroll for a company
     * Creates a new external payroll for the company.  scope: &#x60;external_payrolls:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return CreateNewPayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPayrollRequestBuilder createNewPayroll(String checkDate, String paymentPeriodStartDate, String paymentPeriodEndDate, String companyUuid) throws IllegalArgumentException {
        if (checkDate == null) throw new IllegalArgumentException("\"checkDate\" is required but got null");
            

        if (paymentPeriodStartDate == null) throw new IllegalArgumentException("\"paymentPeriodStartDate\" is required but got null");
            

        if (paymentPeriodEndDate == null) throw new IllegalArgumentException("\"paymentPeriodEndDate\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new CreateNewPayrollRequestBuilder(checkDate, paymentPeriodStartDate, paymentPeriodEndDate, companyUuid);
    }
    private okhttp3.Call deletePayrollCall(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()))
            .replace("{" + "external_payroll_id" + "}", localVarApiClient.escapeString(externalPayrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayrollValidateBeforeCall(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling deletePayroll(Async)");
        }

        // verify the required parameter 'externalPayrollId' is set
        if (externalPayrollId == null) {
            throw new ApiException("Missing the required parameter 'externalPayrollId' when calling deletePayroll(Async)");
        }

        return deletePayrollCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deletePayrollWithHttpInfo(String companyUuid, String externalPayrollId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deletePayrollValidateBeforeCall(companyUuid, externalPayrollId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePayrollAsync(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayrollValidateBeforeCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePayrollRequestBuilder {
        private final String companyUuid;
        private final String externalPayrollId;
        private String xGustoAPIVersion;

        private DeletePayrollRequestBuilder(String companyUuid, String externalPayrollId) {
            this.companyUuid = companyUuid;
            this.externalPayrollId = externalPayrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeletePayrollRequestBuilder
         */
        public DeletePayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deletePayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePayrollCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deletePayroll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePayrollWithHttpInfo(companyUuid, externalPayrollId, xGustoAPIVersion);
        }

        /**
         * Execute deletePayroll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePayrollWithHttpInfo(companyUuid, externalPayrollId, xGustoAPIVersion);
        }

        /**
         * Execute deletePayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePayrollAsync(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an external payroll
     * Delete an external payroll.  scope: &#x60;external_payrolls:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @param externalPayrollId The UUID of the external payroll (required)
     * @return DeletePayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeletePayrollRequestBuilder deletePayroll(String companyUuid, String externalPayrollId) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        if (externalPayrollId == null) throw new IllegalArgumentException("\"externalPayrollId\" is required but got null");
            

        return new DeletePayrollRequestBuilder(companyUuid, externalPayrollId);
    }
    private okhttp3.Call finalizeTaxLiabilitiesCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls/tax_liabilities/finish"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finalizeTaxLiabilitiesValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling finalizeTaxLiabilities(Async)");
        }

        return finalizeTaxLiabilitiesCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> finalizeTaxLiabilitiesWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = finalizeTaxLiabilitiesValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call finalizeTaxLiabilitiesAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = finalizeTaxLiabilitiesValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FinalizeTaxLiabilitiesRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private FinalizeTaxLiabilitiesRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return FinalizeTaxLiabilitiesRequestBuilder
         */
        public FinalizeTaxLiabilitiesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for finalizeTaxLiabilities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return finalizeTaxLiabilitiesCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute finalizeTaxLiabilities request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            finalizeTaxLiabilitiesWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute finalizeTaxLiabilities request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return finalizeTaxLiabilitiesWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute finalizeTaxLiabilities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return finalizeTaxLiabilitiesAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Finalize tax liabilities options and convert into processed payrolls
     * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.  scope: &#x60;external_payrolls:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return FinalizeTaxLiabilitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public FinalizeTaxLiabilitiesRequestBuilder finalizeTaxLiabilities(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new FinalizeTaxLiabilitiesRequestBuilder(companyUuid);
    }
    private okhttp3.Call getByIdCall(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()))
            .replace("{" + "external_payroll_id" + "}", localVarApiClient.escapeString(externalPayrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getById(Async)");
        }

        // verify the required parameter 'externalPayrollId' is set
        if (externalPayrollId == null) {
            throw new ApiException("Missing the required parameter 'externalPayrollId' when calling getById(Async)");
        }

        return getByIdCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<ExternalPayroll> getByIdWithHttpInfo(String companyUuid, String externalPayrollId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(companyUuid, externalPayrollId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<ExternalPayroll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback<ExternalPayroll> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<ExternalPayroll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String companyUuid;
        private final String externalPayrollId;
        private String xGustoAPIVersion;

        private GetByIdRequestBuilder(String companyUuid, String externalPayrollId) {
            this.companyUuid = companyUuid;
            this.externalPayrollId = externalPayrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getById request
         * @return ExternalPayroll
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ExternalPayroll execute() throws ApiException {
            ApiResponse<ExternalPayroll> localVarResp = getByIdWithHttpInfo(companyUuid, externalPayrollId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ExternalPayroll&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalPayroll> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(companyUuid, externalPayrollId, xGustoAPIVersion);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalPayroll> _callback) throws ApiException {
            return getByIdAsync(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an external payroll
     * Get an external payroll for a given company.  scope: &#x60;external_payrolls:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @param externalPayrollId The UUID of the external payroll (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String companyUuid, String externalPayrollId) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        if (externalPayrollId == null) throw new IllegalArgumentException("\"externalPayrollId\" is required but got null");
            

        return new GetByIdRequestBuilder(companyUuid, externalPayrollId);
    }
    private okhttp3.Call getTaxLiabilitiesCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls/tax_liabilities"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxLiabilitiesValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getTaxLiabilities(Async)");
        }

        return getTaxLiabilitiesCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<TaxLiabilitiesSelections>> getTaxLiabilitiesWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getTaxLiabilitiesValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<TaxLiabilitiesSelections>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaxLiabilitiesAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<List<TaxLiabilitiesSelections>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxLiabilitiesValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<TaxLiabilitiesSelections>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaxLiabilitiesRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetTaxLiabilitiesRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetTaxLiabilitiesRequestBuilder
         */
        public GetTaxLiabilitiesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getTaxLiabilities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaxLiabilitiesCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getTaxLiabilities request
         * @return List&lt;TaxLiabilitiesSelections&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<TaxLiabilitiesSelections> execute() throws ApiException {
            ApiResponse<List<TaxLiabilitiesSelections>> localVarResp = getTaxLiabilitiesWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaxLiabilities request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TaxLiabilitiesSelections&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TaxLiabilitiesSelections>> executeWithHttpInfo() throws ApiException {
            return getTaxLiabilitiesWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getTaxLiabilities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TaxLiabilitiesSelections>> _callback) throws ApiException {
            return getTaxLiabilitiesAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get tax liabilities
     * Get tax liabilities from aggregate external payrolls for a company.  scope: &#x60;external_payrolls:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetTaxLiabilitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetTaxLiabilitiesRequestBuilder getTaxLiabilities(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetTaxLiabilitiesRequestBuilder(companyUuid);
    }
    private okhttp3.Call getTaxSuggestionsCall(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}/calculate_taxes"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()))
            .replace("{" + "external_payroll_id" + "}", localVarApiClient.escapeString(externalPayrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxSuggestionsValidateBeforeCall(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getTaxSuggestions(Async)");
        }

        // verify the required parameter 'externalPayrollId' is set
        if (externalPayrollId == null) {
            throw new ApiException("Missing the required parameter 'externalPayrollId' when calling getTaxSuggestions(Async)");
        }

        return getTaxSuggestionsCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<ExternalPayrollTaxSuggestions>> getTaxSuggestionsWithHttpInfo(String companyUuid, String externalPayrollId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getTaxSuggestionsValidateBeforeCall(companyUuid, externalPayrollId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<ExternalPayrollTaxSuggestions>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaxSuggestionsAsync(String companyUuid, String externalPayrollId, String xGustoAPIVersion, final ApiCallback<List<ExternalPayrollTaxSuggestions>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxSuggestionsValidateBeforeCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<ExternalPayrollTaxSuggestions>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaxSuggestionsRequestBuilder {
        private final String companyUuid;
        private final String externalPayrollId;
        private String xGustoAPIVersion;

        private GetTaxSuggestionsRequestBuilder(String companyUuid, String externalPayrollId) {
            this.companyUuid = companyUuid;
            this.externalPayrollId = externalPayrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetTaxSuggestionsRequestBuilder
         */
        public GetTaxSuggestionsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getTaxSuggestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaxSuggestionsCall(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getTaxSuggestions request
         * @return List&lt;ExternalPayrollTaxSuggestions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<ExternalPayrollTaxSuggestions> execute() throws ApiException {
            ApiResponse<List<ExternalPayrollTaxSuggestions>> localVarResp = getTaxSuggestionsWithHttpInfo(companyUuid, externalPayrollId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaxSuggestions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ExternalPayrollTaxSuggestions&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ExternalPayrollTaxSuggestions>> executeWithHttpInfo() throws ApiException {
            return getTaxSuggestionsWithHttpInfo(companyUuid, externalPayrollId, xGustoAPIVersion);
        }

        /**
         * Execute getTaxSuggestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ExternalPayrollTaxSuggestions>> _callback) throws ApiException {
            return getTaxSuggestionsAsync(companyUuid, externalPayrollId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get tax suggestions for an external payroll
     * Get tax suggestions for an external payroll. Earnings and/or benefits data must be saved prior to the calculation in order to retrieve accurate tax calculation.  scope: &#x60;external_payrolls:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @param externalPayrollId The UUID of the external payroll (required)
     * @return GetTaxSuggestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetTaxSuggestionsRequestBuilder getTaxSuggestions(String companyUuid, String externalPayrollId) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        if (externalPayrollId == null) throw new IllegalArgumentException("\"externalPayrollId\" is required but got null");
            

        return new GetTaxSuggestionsRequestBuilder(companyUuid, externalPayrollId);
    }
    private okhttp3.Call listForCompanyCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForCompanyValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling listForCompany(Async)");
        }

        return listForCompanyCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<ExternalPayrollBasic>> listForCompanyWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listForCompanyValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<ExternalPayrollBasic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForCompanyAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<List<ExternalPayrollBasic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForCompanyValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<ExternalPayrollBasic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForCompanyRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private ListForCompanyRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListForCompanyRequestBuilder
         */
        public ListForCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listForCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForCompanyCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listForCompany request
         * @return List&lt;ExternalPayrollBasic&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<ExternalPayrollBasic> execute() throws ApiException {
            ApiResponse<List<ExternalPayrollBasic>> localVarResp = listForCompanyWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForCompany request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ExternalPayrollBasic&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ExternalPayrollBasic>> executeWithHttpInfo() throws ApiException {
            return listForCompanyWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute listForCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ExternalPayrollBasic>> _callback) throws ApiException {
            return listForCompanyAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get external payrolls for a company
     * Get an external payroll for a given company.  scope: &#x60;external_payrolls:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return ListForCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListForCompanyRequestBuilder listForCompany(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new ListForCompanyRequestBuilder(companyUuid);
    }
    private okhttp3.Call updatePayrollItemsCall(String companyUuid, String externalPayrollId, String xGustoAPIVersion, ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalPayrollsUpdatePayrollItemsRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()))
            .replace("{" + "external_payroll_id" + "}", localVarApiClient.escapeString(externalPayrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayrollItemsValidateBeforeCall(String companyUuid, String externalPayrollId, String xGustoAPIVersion, ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling updatePayrollItems(Async)");
        }

        // verify the required parameter 'externalPayrollId' is set
        if (externalPayrollId == null) {
            throw new ApiException("Missing the required parameter 'externalPayrollId' when calling updatePayrollItems(Async)");
        }

        return updatePayrollItemsCall(companyUuid, externalPayrollId, xGustoAPIVersion, externalPayrollsUpdatePayrollItemsRequest, _callback);

    }


    private ApiResponse<ExternalPayroll> updatePayrollItemsWithHttpInfo(String companyUuid, String externalPayrollId, String xGustoAPIVersion, ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePayrollItemsValidateBeforeCall(companyUuid, externalPayrollId, xGustoAPIVersion, externalPayrollsUpdatePayrollItemsRequest, null);
        Type localVarReturnType = new TypeToken<ExternalPayroll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePayrollItemsAsync(String companyUuid, String externalPayrollId, String xGustoAPIVersion, ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest, final ApiCallback<ExternalPayroll> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayrollItemsValidateBeforeCall(companyUuid, externalPayrollId, xGustoAPIVersion, externalPayrollsUpdatePayrollItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<ExternalPayroll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePayrollItemsRequestBuilder {
        private final String companyUuid;
        private final String externalPayrollId;
        private Boolean replaceFields;
        private List<ExternalPayrollsUpdatePayrollItemsRequestExternalPayrollItemsInner> externalPayrollItems;
        private String xGustoAPIVersion;

        private UpdatePayrollItemsRequestBuilder(String companyUuid, String externalPayrollId) {
            this.companyUuid = companyUuid;
            this.externalPayrollId = externalPayrollId;
        }

        /**
         * Set replaceFields
         * @param replaceFields Patch update external payroll items when set to true, otherwise it will overwrite the previous changes. (optional)
         * @return UpdatePayrollItemsRequestBuilder
         */
        public UpdatePayrollItemsRequestBuilder replaceFields(Boolean replaceFields) {
            this.replaceFields = replaceFields;
            return this;
        }
        
        /**
         * Set externalPayrollItems
         * @param externalPayrollItems  (optional)
         * @return UpdatePayrollItemsRequestBuilder
         */
        public UpdatePayrollItemsRequestBuilder externalPayrollItems(List<ExternalPayrollsUpdatePayrollItemsRequestExternalPayrollItemsInner> externalPayrollItems) {
            this.externalPayrollItems = externalPayrollItems;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdatePayrollItemsRequestBuilder
         */
        public UpdatePayrollItemsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updatePayrollItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest = buildBodyParams();
            return updatePayrollItemsCall(companyUuid, externalPayrollId, xGustoAPIVersion, externalPayrollsUpdatePayrollItemsRequest, _callback);
        }

        private ExternalPayrollsUpdatePayrollItemsRequest buildBodyParams() {
            ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest = new ExternalPayrollsUpdatePayrollItemsRequest();
            externalPayrollsUpdatePayrollItemsRequest.replaceFields(this.replaceFields);
            externalPayrollsUpdatePayrollItemsRequest.externalPayrollItems(this.externalPayrollItems);
            return externalPayrollsUpdatePayrollItemsRequest;
        }

        /**
         * Execute updatePayrollItems request
         * @return ExternalPayroll
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ExternalPayroll execute() throws ApiException {
            ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest = buildBodyParams();
            ApiResponse<ExternalPayroll> localVarResp = updatePayrollItemsWithHttpInfo(companyUuid, externalPayrollId, xGustoAPIVersion, externalPayrollsUpdatePayrollItemsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePayrollItems request with HTTP info returned
         * @return ApiResponse&lt;ExternalPayroll&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalPayroll> executeWithHttpInfo() throws ApiException {
            ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest = buildBodyParams();
            return updatePayrollItemsWithHttpInfo(companyUuid, externalPayrollId, xGustoAPIVersion, externalPayrollsUpdatePayrollItemsRequest);
        }

        /**
         * Execute updatePayrollItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalPayroll> _callback) throws ApiException {
            ExternalPayrollsUpdatePayrollItemsRequest externalPayrollsUpdatePayrollItemsRequest = buildBodyParams();
            return updatePayrollItemsAsync(companyUuid, externalPayrollId, xGustoAPIVersion, externalPayrollsUpdatePayrollItemsRequest, _callback);
        }
    }

    /**
     * Update an external payroll
     * Update an external payroll with a list of external payroll items  scope: &#x60;external_payrolls:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @param externalPayrollId The UUID of the external payroll (required)
     * @return UpdatePayrollItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePayrollItemsRequestBuilder updatePayrollItems(String companyUuid, String externalPayrollId) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        if (externalPayrollId == null) throw new IllegalArgumentException("\"externalPayrollId\" is required but got null");
            

        return new UpdatePayrollItemsRequestBuilder(companyUuid, externalPayrollId);
    }
    private okhttp3.Call updateTaxLiabilitiesCall(String companyUuid, String xGustoAPIVersion, ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalPayrollsUpdateTaxLiabilitiesRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/external_payrolls/tax_liabilities"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaxLiabilitiesValidateBeforeCall(String companyUuid, String xGustoAPIVersion, ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling updateTaxLiabilities(Async)");
        }

        return updateTaxLiabilitiesCall(companyUuid, xGustoAPIVersion, externalPayrollsUpdateTaxLiabilitiesRequest, _callback);

    }


    private ApiResponse<List<TaxLiabilitiesSelections>> updateTaxLiabilitiesWithHttpInfo(String companyUuid, String xGustoAPIVersion, ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTaxLiabilitiesValidateBeforeCall(companyUuid, xGustoAPIVersion, externalPayrollsUpdateTaxLiabilitiesRequest, null);
        Type localVarReturnType = new TypeToken<List<TaxLiabilitiesSelections>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTaxLiabilitiesAsync(String companyUuid, String xGustoAPIVersion, ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest, final ApiCallback<List<TaxLiabilitiesSelections>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaxLiabilitiesValidateBeforeCall(companyUuid, xGustoAPIVersion, externalPayrollsUpdateTaxLiabilitiesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TaxLiabilitiesSelections>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTaxLiabilitiesRequestBuilder {
        private final String companyUuid;
        private List<ExternalPayrollsUpdateTaxLiabilitiesRequestLiabilitySelectionsInner> liabilitySelections;
        private String xGustoAPIVersion;

        private UpdateTaxLiabilitiesRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set liabilitySelections
         * @param liabilitySelections  (optional)
         * @return UpdateTaxLiabilitiesRequestBuilder
         */
        public UpdateTaxLiabilitiesRequestBuilder liabilitySelections(List<ExternalPayrollsUpdateTaxLiabilitiesRequestLiabilitySelectionsInner> liabilitySelections) {
            this.liabilitySelections = liabilitySelections;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateTaxLiabilitiesRequestBuilder
         */
        public UpdateTaxLiabilitiesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateTaxLiabilities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest = buildBodyParams();
            return updateTaxLiabilitiesCall(companyUuid, xGustoAPIVersion, externalPayrollsUpdateTaxLiabilitiesRequest, _callback);
        }

        private ExternalPayrollsUpdateTaxLiabilitiesRequest buildBodyParams() {
            ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest = new ExternalPayrollsUpdateTaxLiabilitiesRequest();
            externalPayrollsUpdateTaxLiabilitiesRequest.liabilitySelections(this.liabilitySelections);
            return externalPayrollsUpdateTaxLiabilitiesRequest;
        }

        /**
         * Execute updateTaxLiabilities request
         * @return List&lt;TaxLiabilitiesSelections&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<TaxLiabilitiesSelections> execute() throws ApiException {
            ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest = buildBodyParams();
            ApiResponse<List<TaxLiabilitiesSelections>> localVarResp = updateTaxLiabilitiesWithHttpInfo(companyUuid, xGustoAPIVersion, externalPayrollsUpdateTaxLiabilitiesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTaxLiabilities request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TaxLiabilitiesSelections&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TaxLiabilitiesSelections>> executeWithHttpInfo() throws ApiException {
            ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest = buildBodyParams();
            return updateTaxLiabilitiesWithHttpInfo(companyUuid, xGustoAPIVersion, externalPayrollsUpdateTaxLiabilitiesRequest);
        }

        /**
         * Execute updateTaxLiabilities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TaxLiabilitiesSelections>> _callback) throws ApiException {
            ExternalPayrollsUpdateTaxLiabilitiesRequest externalPayrollsUpdateTaxLiabilitiesRequest = buildBodyParams();
            return updateTaxLiabilitiesAsync(companyUuid, xGustoAPIVersion, externalPayrollsUpdateTaxLiabilitiesRequest, _callback);
        }
    }

    /**
     * Update tax liabilities
     * Update tax liabilities for a company.  scope: &#x60;external_payrolls:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return UpdateTaxLiabilitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTaxLiabilitiesRequestBuilder updateTaxLiabilities(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new UpdateTaxLiabilitiesRequestBuilder(companyUuid);
    }
}
