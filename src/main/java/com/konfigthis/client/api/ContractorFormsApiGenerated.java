/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContractorFormsCreate1099FormRequest;
import com.konfigthis.client.model.Form1099;
import com.konfigthis.client.model.FormPdf;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractorFormsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractorFormsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractorFormsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call create1099FormCall(String xGustoAPIVersion, ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorFormsCreate1099FormRequest;

        // create path and map variables
        String localVarPath = "/v1/sandbox/generate_1099";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create1099FormValidateBeforeCall(String xGustoAPIVersion, ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest, final ApiCallback _callback) throws ApiException {
        return create1099FormCall(xGustoAPIVersion, contractorFormsCreate1099FormRequest, _callback);

    }


    private ApiResponse<Form1099> create1099FormWithHttpInfo(String xGustoAPIVersion, ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest) throws ApiException {
        okhttp3.Call localVarCall = create1099FormValidateBeforeCall(xGustoAPIVersion, contractorFormsCreate1099FormRequest, null);
        Type localVarReturnType = new TypeToken<Form1099>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call create1099FormAsync(String xGustoAPIVersion, ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest, final ApiCallback<Form1099> _callback) throws ApiException {

        okhttp3.Call localVarCall = create1099FormValidateBeforeCall(xGustoAPIVersion, contractorFormsCreate1099FormRequest, _callback);
        Type localVarReturnType = new TypeToken<Form1099>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Create1099FormRequestBuilder {
        private final String contractorId;
        private Integer year;
        private String xGustoAPIVersion;

        private Create1099FormRequestBuilder(String contractorId) {
            this.contractorId = contractorId;
        }

        /**
         * Set year
         * @param year Must be equal to or more recent than 2015. If not specified, defaults to the previous year.  (optional)
         * @return Create1099FormRequestBuilder
         */
        public Create1099FormRequestBuilder year(Integer year) {
            this.year = year;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return Create1099FormRequestBuilder
         */
        public Create1099FormRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for create1099Form
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest = buildBodyParams();
            return create1099FormCall(xGustoAPIVersion, contractorFormsCreate1099FormRequest, _callback);
        }

        private ContractorFormsCreate1099FormRequest buildBodyParams() {
            ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest = new ContractorFormsCreate1099FormRequest();
            contractorFormsCreate1099FormRequest.contractorId(this.contractorId);
            contractorFormsCreate1099FormRequest.year(this.year);
            return contractorFormsCreate1099FormRequest;
        }

        /**
         * Execute create1099Form request
         * @return Form1099
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Form1099 execute() throws ApiException {
            ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest = buildBodyParams();
            ApiResponse<Form1099> localVarResp = create1099FormWithHttpInfo(xGustoAPIVersion, contractorFormsCreate1099FormRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create1099Form request with HTTP info returned
         * @return ApiResponse&lt;Form1099&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Form1099> executeWithHttpInfo() throws ApiException {
            ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest = buildBodyParams();
            return create1099FormWithHttpInfo(xGustoAPIVersion, contractorFormsCreate1099FormRequest);
        }

        /**
         * Execute create1099Form request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Form1099> _callback) throws ApiException {
            ContractorFormsCreate1099FormRequest contractorFormsCreate1099FormRequest = buildBodyParams();
            return create1099FormAsync(xGustoAPIVersion, contractorFormsCreate1099FormRequest, _callback);
        }
    }

    /**
     * Generate a 1099 form [DEMO]
     * &gt; 🚧 Demo action &gt; &gt; This action is only available in the Demo environment  Generates a 1099 document for testing purposes.  scope: &#x60;contractors:write&#x60;
     * @return Create1099FormRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public Create1099FormRequestBuilder create1099Form(String contractorId) throws IllegalArgumentException {
        if (contractorId == null) throw new IllegalArgumentException("\"contractorId\" is required but got null");
            

        return new Create1099FormRequestBuilder(contractorId);
    }
    private okhttp3.Call getByIdFormCall(String contractorUuid, String formId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/forms/{form_id}"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()))
            .replace("{" + "form_id" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdFormValidateBeforeCall(String contractorUuid, String formId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling getByIdForm(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getByIdForm(Async)");
        }

        return getByIdFormCall(contractorUuid, formId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Form1099> getByIdFormWithHttpInfo(String contractorUuid, String formId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getByIdFormValidateBeforeCall(contractorUuid, formId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Form1099>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdFormAsync(String contractorUuid, String formId, String xGustoAPIVersion, final ApiCallback<Form1099> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdFormValidateBeforeCall(contractorUuid, formId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Form1099>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdFormRequestBuilder {
        private final String contractorUuid;
        private final String formId;
        private String xGustoAPIVersion;

        private GetByIdFormRequestBuilder(String contractorUuid, String formId) {
            this.contractorUuid = contractorUuid;
            this.formId = formId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetByIdFormRequestBuilder
         */
        public GetByIdFormRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getByIdForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdFormCall(contractorUuid, formId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getByIdForm request
         * @return Form1099
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Form1099 execute() throws ApiException {
            ApiResponse<Form1099> localVarResp = getByIdFormWithHttpInfo(contractorUuid, formId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByIdForm request with HTTP info returned
         * @return ApiResponse&lt;Form1099&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Form1099> executeWithHttpInfo() throws ApiException {
            return getByIdFormWithHttpInfo(contractorUuid, formId, xGustoAPIVersion);
        }

        /**
         * Execute getByIdForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Form1099> _callback) throws ApiException {
            return getByIdFormAsync(contractorUuid, formId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a contractor form
     * Get a contractor form  scope: &#x60;contractor_forms:read&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @param formId The UUID of the form (required)
     * @return GetByIdFormRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdFormRequestBuilder getByIdForm(String contractorUuid, String formId) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new GetByIdFormRequestBuilder(contractorUuid, formId);
    }
    private okhttp3.Call getPdfLinkCall(String contractorUuid, String formId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/forms/{form_id}/pdf"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()))
            .replace("{" + "form_id" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdfLinkValidateBeforeCall(String contractorUuid, String formId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling getPdfLink(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getPdfLink(Async)");
        }

        return getPdfLinkCall(contractorUuid, formId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<FormPdf> getPdfLinkWithHttpInfo(String contractorUuid, String formId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getPdfLinkValidateBeforeCall(contractorUuid, formId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<FormPdf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPdfLinkAsync(String contractorUuid, String formId, String xGustoAPIVersion, final ApiCallback<FormPdf> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdfLinkValidateBeforeCall(contractorUuid, formId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<FormPdf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPdfLinkRequestBuilder {
        private final String contractorUuid;
        private final String formId;
        private String xGustoAPIVersion;

        private GetPdfLinkRequestBuilder(String contractorUuid, String formId) {
            this.contractorUuid = contractorUuid;
            this.formId = formId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetPdfLinkRequestBuilder
         */
        public GetPdfLinkRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getPdfLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPdfLinkCall(contractorUuid, formId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getPdfLink request
         * @return FormPdf
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public FormPdf execute() throws ApiException {
            ApiResponse<FormPdf> localVarResp = getPdfLinkWithHttpInfo(contractorUuid, formId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPdfLink request with HTTP info returned
         * @return ApiResponse&lt;FormPdf&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormPdf> executeWithHttpInfo() throws ApiException {
            return getPdfLinkWithHttpInfo(contractorUuid, formId, xGustoAPIVersion);
        }

        /**
         * Execute getPdfLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormPdf> _callback) throws ApiException {
            return getPdfLinkAsync(contractorUuid, formId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get the contractor form pdf
     * Get the link to the form PDF  scope: &#x60;contractor_forms:read&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @param formId The UUID of the form (required)
     * @return GetPdfLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetPdfLinkRequestBuilder getPdfLink(String contractorUuid, String formId) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new GetPdfLinkRequestBuilder(contractorUuid, formId);
    }
    private okhttp3.Call listAllCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/forms"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling listAll(Async)");
        }

        return listAllCall(contractorUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Form1099>> listAllWithHttpInfo(String contractorUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(contractorUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Form1099>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String contractorUuid, String xGustoAPIVersion, final ApiCallback<List<Form1099>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(contractorUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Form1099>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private final String contractorUuid;
        private String xGustoAPIVersion;

        private ListAllRequestBuilder(String contractorUuid) {
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(contractorUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listAll request
         * @return List&lt;Form1099&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Form1099> execute() throws ApiException {
            ApiResponse<List<Form1099>> localVarResp = listAllWithHttpInfo(contractorUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Form1099&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Form1099>> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(contractorUuid, xGustoAPIVersion);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Form1099>> _callback) throws ApiException {
            return listAllAsync(contractorUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all contractor forms
     * Get a list of all contractor&#39;s forms  scope: &#x60;contractor_forms:read&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll(String contractorUuid) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new ListAllRequestBuilder(contractorUuid);
    }
}
