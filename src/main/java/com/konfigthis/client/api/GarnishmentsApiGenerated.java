/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Garnishment;
import com.konfigthis.client.model.GarnishmentsCreateGarnishmentRequest;
import com.konfigthis.client.model.GarnishmentsUpdateGarnishmentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GarnishmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GarnishmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GarnishmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createGarnishmentCall(String employeeId, String xGustoAPIVersion, GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = garnishmentsCreateGarnishmentRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/garnishments"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGarnishmentValidateBeforeCall(String employeeId, String xGustoAPIVersion, GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createGarnishment(Async)");
        }

        return createGarnishmentCall(employeeId, xGustoAPIVersion, garnishmentsCreateGarnishmentRequest, _callback);

    }


    private ApiResponse<Garnishment> createGarnishmentWithHttpInfo(String employeeId, String xGustoAPIVersion, GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createGarnishmentValidateBeforeCall(employeeId, xGustoAPIVersion, garnishmentsCreateGarnishmentRequest, null);
        Type localVarReturnType = new TypeToken<Garnishment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGarnishmentAsync(String employeeId, String xGustoAPIVersion, GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest, final ApiCallback<Garnishment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGarnishmentValidateBeforeCall(employeeId, xGustoAPIVersion, garnishmentsCreateGarnishmentRequest, _callback);
        Type localVarReturnType = new TypeToken<Garnishment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateGarnishmentRequestBuilder {
        private final String description;
        private final Float amount;
        private final Boolean courtOrdered;
        private final String employeeId;
        private Boolean active;
        private Integer times;
        private Boolean recurring;
        private Float annualMaximum;
        private Float payPeriodMaximum;
        private Boolean deductAsPercentage;
        private String xGustoAPIVersion;

        private CreateGarnishmentRequestBuilder(String description, Float amount, Boolean courtOrdered, String employeeId) {
            this.description = description;
            this.amount = amount;
            this.courtOrdered = courtOrdered;
            this.employeeId = employeeId;
        }

        /**
         * Set active
         * @param active Whether or not this garnishment is currently active. (optional, default to true)
         * @return CreateGarnishmentRequestBuilder
         */
        public CreateGarnishmentRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set times
         * @param times The number of times to apply the garnishment. Ignored if recurring is true. (optional)
         * @return CreateGarnishmentRequestBuilder
         */
        public CreateGarnishmentRequestBuilder times(Integer times) {
            this.times = times;
            return this;
        }
        
        /**
         * Set recurring
         * @param recurring Whether the garnishment should recur indefinitely. (optional, default to false)
         * @return CreateGarnishmentRequestBuilder
         */
        public CreateGarnishmentRequestBuilder recurring(Boolean recurring) {
            this.recurring = recurring;
            return this;
        }
        
        /**
         * Set annualMaximum
         * @param annualMaximum The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. \\\&quot;200.00\\\&quot;. (optional)
         * @return CreateGarnishmentRequestBuilder
         */
        public CreateGarnishmentRequestBuilder annualMaximum(Float annualMaximum) {
            this.annualMaximum = annualMaximum;
            return this;
        }
        
        /**
         * Set payPeriodMaximum
         * @param payPeriodMaximum The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. \\\&quot;16.00\\\&quot;. (optional)
         * @return CreateGarnishmentRequestBuilder
         */
        public CreateGarnishmentRequestBuilder payPeriodMaximum(Float payPeriodMaximum) {
            this.payPeriodMaximum = payPeriodMaximum;
            return this;
        }
        
        /**
         * Set deductAsPercentage
         * @param deductAsPercentage Whether the amount should be treated as a percentage to be deducted per pay period. (optional, default to false)
         * @return CreateGarnishmentRequestBuilder
         */
        public CreateGarnishmentRequestBuilder deductAsPercentage(Boolean deductAsPercentage) {
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateGarnishmentRequestBuilder
         */
        public CreateGarnishmentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createGarnishment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest = buildBodyParams();
            return createGarnishmentCall(employeeId, xGustoAPIVersion, garnishmentsCreateGarnishmentRequest, _callback);
        }

        private GarnishmentsCreateGarnishmentRequest buildBodyParams() {
            GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest = new GarnishmentsCreateGarnishmentRequest();
            garnishmentsCreateGarnishmentRequest.description(this.description);
            garnishmentsCreateGarnishmentRequest.active(this.active);
            garnishmentsCreateGarnishmentRequest.amount(this.amount);
            garnishmentsCreateGarnishmentRequest.courtOrdered(this.courtOrdered);
            garnishmentsCreateGarnishmentRequest.times(this.times);
            garnishmentsCreateGarnishmentRequest.recurring(this.recurring);
            garnishmentsCreateGarnishmentRequest.annualMaximum(this.annualMaximum);
            garnishmentsCreateGarnishmentRequest.payPeriodMaximum(this.payPeriodMaximum);
            garnishmentsCreateGarnishmentRequest.deductAsPercentage(this.deductAsPercentage);
            return garnishmentsCreateGarnishmentRequest;
        }

        /**
         * Execute createGarnishment request
         * @return Garnishment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Garnishment execute() throws ApiException {
            GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest = buildBodyParams();
            ApiResponse<Garnishment> localVarResp = createGarnishmentWithHttpInfo(employeeId, xGustoAPIVersion, garnishmentsCreateGarnishmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createGarnishment request with HTTP info returned
         * @return ApiResponse&lt;Garnishment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Garnishment> executeWithHttpInfo() throws ApiException {
            GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest = buildBodyParams();
            return createGarnishmentWithHttpInfo(employeeId, xGustoAPIVersion, garnishmentsCreateGarnishmentRequest);
        }

        /**
         * Execute createGarnishment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Garnishment> _callback) throws ApiException {
            GarnishmentsCreateGarnishmentRequest garnishmentsCreateGarnishmentRequest = buildBodyParams();
            return createGarnishmentAsync(employeeId, xGustoAPIVersion, garnishmentsCreateGarnishmentRequest, _callback);
        }
    }

    /**
     * Create a garnishment
     * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: &#x60;garnishments:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateGarnishmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateGarnishmentRequestBuilder createGarnishment(String description, Float amount, Boolean courtOrdered, String employeeId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
            

        if (courtOrdered == null) throw new IllegalArgumentException("\"courtOrdered\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateGarnishmentRequestBuilder(description, amount, courtOrdered, employeeId);
    }
    private okhttp3.Call getEmployeeGarnishmentsCall(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/garnishments"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeGarnishmentsValidateBeforeCall(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeeGarnishments(Async)");
        }

        return getEmployeeGarnishmentsCall(employeeId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Garnishment>> getEmployeeGarnishmentsWithHttpInfo(String employeeId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeGarnishmentsValidateBeforeCall(employeeId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Garnishment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeGarnishmentsAsync(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<List<Garnishment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeGarnishmentsValidateBeforeCall(employeeId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Garnishment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeGarnishmentsRequestBuilder {
        private final String employeeId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetEmployeeGarnishmentsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetEmployeeGarnishmentsRequestBuilder
         */
        public GetEmployeeGarnishmentsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetEmployeeGarnishmentsRequestBuilder
         */
        public GetEmployeeGarnishmentsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetEmployeeGarnishmentsRequestBuilder
         */
        public GetEmployeeGarnishmentsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getEmployeeGarnishments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeGarnishmentsCall(employeeId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getEmployeeGarnishments request
         * @return List&lt;Garnishment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Garnishment> execute() throws ApiException {
            ApiResponse<List<Garnishment>> localVarResp = getEmployeeGarnishmentsWithHttpInfo(employeeId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeGarnishments request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Garnishment&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Garnishment>> executeWithHttpInfo() throws ApiException {
            return getEmployeeGarnishmentsWithHttpInfo(employeeId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getEmployeeGarnishments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Garnishment>> _callback) throws ApiException {
            return getEmployeeGarnishmentsAsync(employeeId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get garnishments for an employee
     * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: &#x60;garnishments:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetEmployeeGarnishmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeGarnishmentsRequestBuilder getEmployeeGarnishments(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetEmployeeGarnishmentsRequestBuilder(employeeId);
    }
    private okhttp3.Call getGarnishmentCall(String garnishmentId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/garnishments/{garnishment_id}"
            .replace("{" + "garnishment_id" + "}", localVarApiClient.escapeString(garnishmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGarnishmentValidateBeforeCall(String garnishmentId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'garnishmentId' is set
        if (garnishmentId == null) {
            throw new ApiException("Missing the required parameter 'garnishmentId' when calling getGarnishment(Async)");
        }

        return getGarnishmentCall(garnishmentId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Garnishment> getGarnishmentWithHttpInfo(String garnishmentId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getGarnishmentValidateBeforeCall(garnishmentId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Garnishment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGarnishmentAsync(String garnishmentId, String xGustoAPIVersion, final ApiCallback<Garnishment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGarnishmentValidateBeforeCall(garnishmentId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Garnishment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGarnishmentRequestBuilder {
        private final String garnishmentId;
        private String xGustoAPIVersion;

        private GetGarnishmentRequestBuilder(String garnishmentId) {
            this.garnishmentId = garnishmentId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetGarnishmentRequestBuilder
         */
        public GetGarnishmentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getGarnishment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGarnishmentCall(garnishmentId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getGarnishment request
         * @return Garnishment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Garnishment execute() throws ApiException {
            ApiResponse<Garnishment> localVarResp = getGarnishmentWithHttpInfo(garnishmentId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGarnishment request with HTTP info returned
         * @return ApiResponse&lt;Garnishment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Garnishment> executeWithHttpInfo() throws ApiException {
            return getGarnishmentWithHttpInfo(garnishmentId, xGustoAPIVersion);
        }

        /**
         * Execute getGarnishment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Garnishment> _callback) throws ApiException {
            return getGarnishmentAsync(garnishmentId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a garnishment
     * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: &#x60;garnishments:read&#x60;
     * @param garnishmentId The UUID of the garnishment (required)
     * @return GetGarnishmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetGarnishmentRequestBuilder getGarnishment(String garnishmentId) throws IllegalArgumentException {
        if (garnishmentId == null) throw new IllegalArgumentException("\"garnishmentId\" is required but got null");
            

        return new GetGarnishmentRequestBuilder(garnishmentId);
    }
    private okhttp3.Call updateGarnishmentCall(String garnishmentId, String xGustoAPIVersion, GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = garnishmentsUpdateGarnishmentRequest;

        // create path and map variables
        String localVarPath = "/v1/garnishments/{garnishment_id}"
            .replace("{" + "garnishment_id" + "}", localVarApiClient.escapeString(garnishmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGarnishmentValidateBeforeCall(String garnishmentId, String xGustoAPIVersion, GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'garnishmentId' is set
        if (garnishmentId == null) {
            throw new ApiException("Missing the required parameter 'garnishmentId' when calling updateGarnishment(Async)");
        }

        return updateGarnishmentCall(garnishmentId, xGustoAPIVersion, garnishmentsUpdateGarnishmentRequest, _callback);

    }


    private ApiResponse<Garnishment> updateGarnishmentWithHttpInfo(String garnishmentId, String xGustoAPIVersion, GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGarnishmentValidateBeforeCall(garnishmentId, xGustoAPIVersion, garnishmentsUpdateGarnishmentRequest, null);
        Type localVarReturnType = new TypeToken<Garnishment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGarnishmentAsync(String garnishmentId, String xGustoAPIVersion, GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest, final ApiCallback<Garnishment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGarnishmentValidateBeforeCall(garnishmentId, xGustoAPIVersion, garnishmentsUpdateGarnishmentRequest, _callback);
        Type localVarReturnType = new TypeToken<Garnishment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGarnishmentRequestBuilder {
        private final String version;
        private final String garnishmentId;
        private String description;
        private Boolean active;
        private Float amount;
        private Boolean courtOrdered;
        private Integer times;
        private Boolean recurring;
        private Float annualMaximum;
        private Float payPeriodMaximum;
        private Boolean deductAsPercentage;
        private String xGustoAPIVersion;

        private UpdateGarnishmentRequestBuilder(String version, String garnishmentId) {
            this.version = version;
            this.garnishmentId = garnishmentId;
        }

        /**
         * Set description
         * @param description The description of the garnishment. (optional)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set active
         * @param active Whether or not this garnishment is currently active. (optional, default to true)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set amount
         * @param amount The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. \\\&quot;8.00\\\&quot;. (optional)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder amount(Float amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set courtOrdered
         * @param courtOrdered Whether the garnishment is court ordered. (optional)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder courtOrdered(Boolean courtOrdered) {
            this.courtOrdered = courtOrdered;
            return this;
        }
        
        /**
         * Set times
         * @param times The number of times to apply the garnishment. Ignored if recurring is true. (optional)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder times(Integer times) {
            this.times = times;
            return this;
        }
        
        /**
         * Set recurring
         * @param recurring Whether the garnishment should recur indefinitely. (optional, default to false)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder recurring(Boolean recurring) {
            this.recurring = recurring;
            return this;
        }
        
        /**
         * Set annualMaximum
         * @param annualMaximum The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. \\\&quot;200.00\\\&quot;. (optional)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder annualMaximum(Float annualMaximum) {
            this.annualMaximum = annualMaximum;
            return this;
        }
        
        /**
         * Set payPeriodMaximum
         * @param payPeriodMaximum The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. \\\&quot;16.00\\\&quot;. (optional)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder payPeriodMaximum(Float payPeriodMaximum) {
            this.payPeriodMaximum = payPeriodMaximum;
            return this;
        }
        
        /**
         * Set deductAsPercentage
         * @param deductAsPercentage Whether the amount should be treated as a percentage to be deducted per pay period. (optional, default to false)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder deductAsPercentage(Boolean deductAsPercentage) {
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateGarnishmentRequestBuilder
         */
        public UpdateGarnishmentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateGarnishment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest = buildBodyParams();
            return updateGarnishmentCall(garnishmentId, xGustoAPIVersion, garnishmentsUpdateGarnishmentRequest, _callback);
        }

        private GarnishmentsUpdateGarnishmentRequest buildBodyParams() {
            GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest = new GarnishmentsUpdateGarnishmentRequest();
            garnishmentsUpdateGarnishmentRequest.description(this.description);
            garnishmentsUpdateGarnishmentRequest.version(this.version);
            garnishmentsUpdateGarnishmentRequest.active(this.active);
            garnishmentsUpdateGarnishmentRequest.amount(this.amount);
            garnishmentsUpdateGarnishmentRequest.courtOrdered(this.courtOrdered);
            garnishmentsUpdateGarnishmentRequest.times(this.times);
            garnishmentsUpdateGarnishmentRequest.recurring(this.recurring);
            garnishmentsUpdateGarnishmentRequest.annualMaximum(this.annualMaximum);
            garnishmentsUpdateGarnishmentRequest.payPeriodMaximum(this.payPeriodMaximum);
            garnishmentsUpdateGarnishmentRequest.deductAsPercentage(this.deductAsPercentage);
            return garnishmentsUpdateGarnishmentRequest;
        }

        /**
         * Execute updateGarnishment request
         * @return Garnishment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Garnishment execute() throws ApiException {
            GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest = buildBodyParams();
            ApiResponse<Garnishment> localVarResp = updateGarnishmentWithHttpInfo(garnishmentId, xGustoAPIVersion, garnishmentsUpdateGarnishmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGarnishment request with HTTP info returned
         * @return ApiResponse&lt;Garnishment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Garnishment> executeWithHttpInfo() throws ApiException {
            GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest = buildBodyParams();
            return updateGarnishmentWithHttpInfo(garnishmentId, xGustoAPIVersion, garnishmentsUpdateGarnishmentRequest);
        }

        /**
         * Execute updateGarnishment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Garnishment> _callback) throws ApiException {
            GarnishmentsUpdateGarnishmentRequest garnishmentsUpdateGarnishmentRequest = buildBodyParams();
            return updateGarnishmentAsync(garnishmentId, xGustoAPIVersion, garnishmentsUpdateGarnishmentRequest, _callback);
        }
    }

    /**
     * Update a garnishment
     * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: &#x60;garnishments:write&#x60;
     * @param garnishmentId The UUID of the garnishment (required)
     * @return UpdateGarnishmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGarnishmentRequestBuilder updateGarnishment(String version, String garnishmentId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (garnishmentId == null) throw new IllegalArgumentException("\"garnishmentId\" is required but got null");
            

        return new UpdateGarnishmentRequestBuilder(version, garnishmentId);
    }
}
