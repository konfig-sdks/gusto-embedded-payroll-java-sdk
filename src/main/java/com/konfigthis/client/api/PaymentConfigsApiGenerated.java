/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PaymentConfigs;
import com.konfigthis.client.model.PaymentConfigsUpdateCompanyPaymentConfigsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentConfigsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentConfigsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentConfigsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCompanyPaymentConfigsCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/payment_configs"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyPaymentConfigsValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getCompanyPaymentConfigs(Async)");
        }

        return getCompanyPaymentConfigsCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PaymentConfigs> getCompanyPaymentConfigsWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCompanyPaymentConfigsValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PaymentConfigs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyPaymentConfigsAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<PaymentConfigs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyPaymentConfigsValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PaymentConfigs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyPaymentConfigsRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetCompanyPaymentConfigsRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompanyPaymentConfigsRequestBuilder
         */
        public GetCompanyPaymentConfigsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompanyPaymentConfigs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyPaymentConfigsCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCompanyPaymentConfigs request
         * @return PaymentConfigs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PaymentConfigs execute() throws ApiException {
            ApiResponse<PaymentConfigs> localVarResp = getCompanyPaymentConfigsWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyPaymentConfigs request with HTTP info returned
         * @return ApiResponse&lt;PaymentConfigs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentConfigs> executeWithHttpInfo() throws ApiException {
            return getCompanyPaymentConfigsWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getCompanyPaymentConfigs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentConfigs> _callback) throws ApiException {
            return getCompanyPaymentConfigsAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a company&#39;s payment configs
     * Get payment speed for the company and fast payment limit (1-day is only applicable to partners that opt in).  scope: &#x60;company_payment_configs:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetCompanyPaymentConfigsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyPaymentConfigsRequestBuilder getCompanyPaymentConfigs(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetCompanyPaymentConfigsRequestBuilder(companyUuid);
    }
    private okhttp3.Call updateCompanyPaymentConfigsCall(String companyUuid, String xGustoAPIVersion, PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentConfigsUpdateCompanyPaymentConfigsRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/payment_configs"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanyPaymentConfigsValidateBeforeCall(String companyUuid, String xGustoAPIVersion, PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling updateCompanyPaymentConfigs(Async)");
        }

        return updateCompanyPaymentConfigsCall(companyUuid, xGustoAPIVersion, paymentConfigsUpdateCompanyPaymentConfigsRequest, _callback);

    }


    private ApiResponse<PaymentConfigs> updateCompanyPaymentConfigsWithHttpInfo(String companyUuid, String xGustoAPIVersion, PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCompanyPaymentConfigsValidateBeforeCall(companyUuid, xGustoAPIVersion, paymentConfigsUpdateCompanyPaymentConfigsRequest, null);
        Type localVarReturnType = new TypeToken<PaymentConfigs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompanyPaymentConfigsAsync(String companyUuid, String xGustoAPIVersion, PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest, final ApiCallback<PaymentConfigs> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanyPaymentConfigsValidateBeforeCall(companyUuid, xGustoAPIVersion, paymentConfigsUpdateCompanyPaymentConfigsRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentConfigs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompanyPaymentConfigsRequestBuilder {
        private final String fastPaymentLimit;
        private final String paymentSpeed;
        private final String companyUuid;
        private String xGustoAPIVersion;

        private UpdateCompanyPaymentConfigsRequestBuilder(String fastPaymentLimit, String paymentSpeed, String companyUuid) {
            this.fastPaymentLimit = fastPaymentLimit;
            this.paymentSpeed = paymentSpeed;
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateCompanyPaymentConfigsRequestBuilder
         */
        public UpdateCompanyPaymentConfigsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateCompanyPaymentConfigs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest = buildBodyParams();
            return updateCompanyPaymentConfigsCall(companyUuid, xGustoAPIVersion, paymentConfigsUpdateCompanyPaymentConfigsRequest, _callback);
        }

        private PaymentConfigsUpdateCompanyPaymentConfigsRequest buildBodyParams() {
            PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest = new PaymentConfigsUpdateCompanyPaymentConfigsRequest();
            paymentConfigsUpdateCompanyPaymentConfigsRequest.fastPaymentLimit(this.fastPaymentLimit);
            if (this.paymentSpeed != null)
            paymentConfigsUpdateCompanyPaymentConfigsRequest.paymentSpeed(PaymentConfigsUpdateCompanyPaymentConfigsRequest.PaymentSpeedEnum.fromValue(this.paymentSpeed));
            return paymentConfigsUpdateCompanyPaymentConfigsRequest;
        }

        /**
         * Execute updateCompanyPaymentConfigs request
         * @return PaymentConfigs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PaymentConfigs execute() throws ApiException {
            PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest = buildBodyParams();
            ApiResponse<PaymentConfigs> localVarResp = updateCompanyPaymentConfigsWithHttpInfo(companyUuid, xGustoAPIVersion, paymentConfigsUpdateCompanyPaymentConfigsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompanyPaymentConfigs request with HTTP info returned
         * @return ApiResponse&lt;PaymentConfigs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentConfigs> executeWithHttpInfo() throws ApiException {
            PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest = buildBodyParams();
            return updateCompanyPaymentConfigsWithHttpInfo(companyUuid, xGustoAPIVersion, paymentConfigsUpdateCompanyPaymentConfigsRequest);
        }

        /**
         * Execute updateCompanyPaymentConfigs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentConfigs> _callback) throws ApiException {
            PaymentConfigsUpdateCompanyPaymentConfigsRequest paymentConfigsUpdateCompanyPaymentConfigsRequest = buildBodyParams();
            return updateCompanyPaymentConfigsAsync(companyUuid, xGustoAPIVersion, paymentConfigsUpdateCompanyPaymentConfigsRequest, _callback);
        }
    }

    /**
     * Update a company&#39;s payment configs
     * Update payment speed and fast payment limit for a company. At least one of &#x60;payment_speed&#x60; or &#x60;fast_payment_limit&#x60; parameters is required. 1-day option is only applicable to partners that opt in.  scope: &#x60;company_payment_configs:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return UpdateCompanyPaymentConfigsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompanyPaymentConfigsRequestBuilder updateCompanyPaymentConfigs(String fastPaymentLimit, String paymentSpeed, String companyUuid) throws IllegalArgumentException {
        if (fastPaymentLimit == null) throw new IllegalArgumentException("\"fastPaymentLimit\" is required but got null");
            

        if (paymentSpeed == null) throw new IllegalArgumentException("\"paymentSpeed\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new UpdateCompanyPaymentConfigsRequestBuilder(fastPaymentLimit, paymentSpeed, companyUuid);
    }
}
