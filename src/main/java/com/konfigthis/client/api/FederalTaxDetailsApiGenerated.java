/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FederalTaxDetails;
import com.konfigthis.client.model.FederalTaxDetailsUpdateAttributesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FederalTaxDetailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FederalTaxDetailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FederalTaxDetailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAttributesCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/federal_tax_details"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttributesValidateBeforeCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAttributes(Async)");
        }

        return getAttributesCall(companyId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<FederalTaxDetails> getAttributesWithHttpInfo(String companyId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAttributesValidateBeforeCall(companyId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<FederalTaxDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttributesAsync(String companyId, String xGustoAPIVersion, final ApiCallback<FederalTaxDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttributesValidateBeforeCall(companyId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<FederalTaxDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttributesRequestBuilder {
        private final String companyId;
        private String xGustoAPIVersion;

        private GetAttributesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAttributesRequestBuilder
         */
        public GetAttributesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttributesCall(companyId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAttributes request
         * @return FederalTaxDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public FederalTaxDetails execute() throws ApiException {
            ApiResponse<FederalTaxDetails> localVarResp = getAttributesWithHttpInfo(companyId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttributes request with HTTP info returned
         * @return ApiResponse&lt;FederalTaxDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FederalTaxDetails> executeWithHttpInfo() throws ApiException {
            return getAttributesWithHttpInfo(companyId, xGustoAPIVersion);
        }

        /**
         * Execute getAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FederalTaxDetails> _callback) throws ApiException {
            return getAttributesAsync(companyId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get Federal Tax Details
     * Fetches attributes relevant for a company&#39;s federal taxes.  scope: &#x60;company_federal_taxes:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAttributesRequestBuilder getAttributes(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAttributesRequestBuilder(companyId);
    }
    private okhttp3.Call updateAttributesCall(String companyId, String xGustoAPIVersion, FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = federalTaxDetailsUpdateAttributesRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/federal_tax_details"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttributesValidateBeforeCall(String companyId, String xGustoAPIVersion, FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateAttributes(Async)");
        }

        return updateAttributesCall(companyId, xGustoAPIVersion, federalTaxDetailsUpdateAttributesRequest, _callback);

    }


    private ApiResponse<FederalTaxDetails> updateAttributesWithHttpInfo(String companyId, String xGustoAPIVersion, FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(companyId, xGustoAPIVersion, federalTaxDetailsUpdateAttributesRequest, null);
        Type localVarReturnType = new TypeToken<FederalTaxDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAttributesAsync(String companyId, String xGustoAPIVersion, FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest, final ApiCallback<FederalTaxDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(companyId, xGustoAPIVersion, federalTaxDetailsUpdateAttributesRequest, _callback);
        Type localVarReturnType = new TypeToken<FederalTaxDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAttributesRequestBuilder {
        private final String version;
        private final String companyId;
        private String legalName;
        private String ein;
        private String taxPayerType;
        private String filingForm;
        private Boolean taxableAsScorp;
        private String xGustoAPIVersion;

        private UpdateAttributesRequestBuilder(String version, String companyId) {
            this.version = version;
            this.companyId = companyId;
        }

        /**
         * Set legalName
         * @param legalName The legal name of the company (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder legalName(String legalName) {
            this.legalName = legalName;
            return this;
        }
        
        /**
         * Set ein
         * @param ein The EIN of of the company (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder ein(String ein) {
            this.ein = ein;
            return this;
        }
        
        /**
         * Set taxPayerType
         * @param taxPayerType What type of tax entity the company is (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder taxPayerType(String taxPayerType) {
            this.taxPayerType = taxPayerType;
            return this;
        }
        
        /**
         * Set filingForm
         * @param filingForm The form used by the company for federal tax filing. One of: - 941 (Quarterly federal tax return) - 944 (Annual federal tax return) (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder filingForm(String filingForm) {
            this.filingForm = filingForm;
            return this;
        }
        
        /**
         * Set taxableAsScorp
         * @param taxableAsScorp Whether this company should be taxed as an S-Corporation (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder taxableAsScorp(Boolean taxableAsScorp) {
            this.taxableAsScorp = taxableAsScorp;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest = buildBodyParams();
            return updateAttributesCall(companyId, xGustoAPIVersion, federalTaxDetailsUpdateAttributesRequest, _callback);
        }

        private FederalTaxDetailsUpdateAttributesRequest buildBodyParams() {
            FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest = new FederalTaxDetailsUpdateAttributesRequest();
            federalTaxDetailsUpdateAttributesRequest.version(this.version);
            federalTaxDetailsUpdateAttributesRequest.legalName(this.legalName);
            federalTaxDetailsUpdateAttributesRequest.ein(this.ein);
            if (this.taxPayerType != null)
            federalTaxDetailsUpdateAttributesRequest.taxPayerType(FederalTaxDetailsUpdateAttributesRequest.TaxPayerTypeEnum.fromValue(this.taxPayerType));
            federalTaxDetailsUpdateAttributesRequest.filingForm(this.filingForm);
            federalTaxDetailsUpdateAttributesRequest.taxableAsScorp(this.taxableAsScorp);
            return federalTaxDetailsUpdateAttributesRequest;
        }

        /**
         * Execute updateAttributes request
         * @return FederalTaxDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public FederalTaxDetails execute() throws ApiException {
            FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest = buildBodyParams();
            ApiResponse<FederalTaxDetails> localVarResp = updateAttributesWithHttpInfo(companyId, xGustoAPIVersion, federalTaxDetailsUpdateAttributesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAttributes request with HTTP info returned
         * @return ApiResponse&lt;FederalTaxDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FederalTaxDetails> executeWithHttpInfo() throws ApiException {
            FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest = buildBodyParams();
            return updateAttributesWithHttpInfo(companyId, xGustoAPIVersion, federalTaxDetailsUpdateAttributesRequest);
        }

        /**
         * Execute updateAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FederalTaxDetails> _callback) throws ApiException {
            FederalTaxDetailsUpdateAttributesRequest federalTaxDetailsUpdateAttributesRequest = buildBodyParams();
            return updateAttributesAsync(companyId, xGustoAPIVersion, federalTaxDetailsUpdateAttributesRequest, _callback);
        }
    }

    /**
     * Update Federal Tax Details
     * Updates attributes relevant for a company&#39;s federal taxes. This information is required is to onboard a company for use with Gusto Embedded Payroll.  scope: &#x60;company_federal_taxes:write&#x60;
     * @param companyId The UUID of the company (required)
     * @return UpdateAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAttributesRequestBuilder updateAttributes(String version, String companyId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new UpdateAttributesRequestBuilder(version, companyId);
    }
}
