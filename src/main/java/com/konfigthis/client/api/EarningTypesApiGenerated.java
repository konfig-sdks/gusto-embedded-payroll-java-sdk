/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EarningType;
import com.konfigthis.client.model.EarningTypesCreateCustomEarningTypeRequest;
import com.konfigthis.client.model.EarningTypesGetAllResponse;
import com.konfigthis.client.model.EarningTypesUpdateTypeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EarningTypesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EarningTypesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EarningTypesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCustomEarningTypeCall(String companyId, String xGustoAPIVersion, EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = earningTypesCreateCustomEarningTypeRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/earning_types"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomEarningTypeValidateBeforeCall(String companyId, String xGustoAPIVersion, EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createCustomEarningType(Async)");
        }

        return createCustomEarningTypeCall(companyId, xGustoAPIVersion, earningTypesCreateCustomEarningTypeRequest, _callback);

    }


    private ApiResponse<EarningType> createCustomEarningTypeWithHttpInfo(String companyId, String xGustoAPIVersion, EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomEarningTypeValidateBeforeCall(companyId, xGustoAPIVersion, earningTypesCreateCustomEarningTypeRequest, null);
        Type localVarReturnType = new TypeToken<EarningType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomEarningTypeAsync(String companyId, String xGustoAPIVersion, EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest, final ApiCallback<EarningType> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomEarningTypeValidateBeforeCall(companyId, xGustoAPIVersion, earningTypesCreateCustomEarningTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<EarningType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomEarningTypeRequestBuilder {
        private final String name;
        private final String companyId;
        private String xGustoAPIVersion;

        private CreateCustomEarningTypeRequestBuilder(String name, String companyId) {
            this.name = name;
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateCustomEarningTypeRequestBuilder
         */
        public CreateCustomEarningTypeRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createCustomEarningType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest = buildBodyParams();
            return createCustomEarningTypeCall(companyId, xGustoAPIVersion, earningTypesCreateCustomEarningTypeRequest, _callback);
        }

        private EarningTypesCreateCustomEarningTypeRequest buildBodyParams() {
            EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest = new EarningTypesCreateCustomEarningTypeRequest();
            earningTypesCreateCustomEarningTypeRequest.name(this.name);
            return earningTypesCreateCustomEarningTypeRequest;
        }

        /**
         * Execute createCustomEarningType request
         * @return EarningType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EarningType execute() throws ApiException {
            EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest = buildBodyParams();
            ApiResponse<EarningType> localVarResp = createCustomEarningTypeWithHttpInfo(companyId, xGustoAPIVersion, earningTypesCreateCustomEarningTypeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomEarningType request with HTTP info returned
         * @return ApiResponse&lt;EarningType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EarningType> executeWithHttpInfo() throws ApiException {
            EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest = buildBodyParams();
            return createCustomEarningTypeWithHttpInfo(companyId, xGustoAPIVersion, earningTypesCreateCustomEarningTypeRequest);
        }

        /**
         * Execute createCustomEarningType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EarningType> _callback) throws ApiException {
            EarningTypesCreateCustomEarningTypeRequest earningTypesCreateCustomEarningTypeRequest = buildBodyParams();
            return createCustomEarningTypeAsync(companyId, xGustoAPIVersion, earningTypesCreateCustomEarningTypeRequest, _callback);
        }
    }

    /**
     * Create a custom earning type
     * Create a custom earning type.  If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.  scope: &#x60;payrolls:write&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateCustomEarningTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomEarningTypeRequestBuilder createCustomEarningType(String name, String companyId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateCustomEarningTypeRequestBuilder(name, companyId);
    }
    private okhttp3.Call deactivateTypeCall(String companyId, String earningTypeUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/earning_types/{earning_type_uuid}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "earning_type_uuid" + "}", localVarApiClient.escapeString(earningTypeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateTypeValidateBeforeCall(String companyId, String earningTypeUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deactivateType(Async)");
        }

        // verify the required parameter 'earningTypeUuid' is set
        if (earningTypeUuid == null) {
            throw new ApiException("Missing the required parameter 'earningTypeUuid' when calling deactivateType(Async)");
        }

        return deactivateTypeCall(companyId, earningTypeUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deactivateTypeWithHttpInfo(String companyId, String earningTypeUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deactivateTypeValidateBeforeCall(companyId, earningTypeUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateTypeAsync(String companyId, String earningTypeUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateTypeValidateBeforeCall(companyId, earningTypeUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateTypeRequestBuilder {
        private final String companyId;
        private final String earningTypeUuid;
        private String xGustoAPIVersion;

        private DeactivateTypeRequestBuilder(String companyId, String earningTypeUuid) {
            this.companyId = companyId;
            this.earningTypeUuid = earningTypeUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeactivateTypeRequestBuilder
         */
        public DeactivateTypeRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deactivateType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateTypeCall(companyId, earningTypeUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deactivateType request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateTypeWithHttpInfo(companyId, earningTypeUuid, xGustoAPIVersion);
        }

        /**
         * Execute deactivateType request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateTypeWithHttpInfo(companyId, earningTypeUuid, xGustoAPIVersion);
        }

        /**
         * Execute deactivateType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateTypeAsync(companyId, earningTypeUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Deactivate an earning type
     * Deactivate an earning type.  scope: &#x60;payrolls:write&#x60;
     * @param companyId The UUID of the company (required)
     * @param earningTypeUuid The UUID of the earning type (required)
     * @return DeactivateTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateTypeRequestBuilder deactivateType(String companyId, String earningTypeUuid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (earningTypeUuid == null) throw new IllegalArgumentException("\"earningTypeUuid\" is required but got null");
            

        return new DeactivateTypeRequestBuilder(companyId, earningTypeUuid);
    }
    private okhttp3.Call getAllCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/earning_types"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAll(Async)");
        }

        return getAllCall(companyId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<EarningTypesGetAllResponse> getAllWithHttpInfo(String companyId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(companyId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<EarningTypesGetAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String companyId, String xGustoAPIVersion, final ApiCallback<EarningTypesGetAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(companyId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<EarningTypesGetAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String companyId;
        private String xGustoAPIVersion;

        private GetAllRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(companyId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAll request
         * @return EarningTypesGetAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EarningTypesGetAllResponse execute() throws ApiException {
            ApiResponse<EarningTypesGetAllResponse> localVarResp = getAllWithHttpInfo(companyId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;EarningTypesGetAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EarningTypesGetAllResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(companyId, xGustoAPIVersion);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EarningTypesGetAllResponse> _callback) throws ApiException {
            return getAllAsync(companyId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all earning types for a company
     * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.  #### Default Earning Type Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)  #### Custom Earning Type Custom earning types are all the other earning types added specifically for a company.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAllRequestBuilder(companyId);
    }
    private okhttp3.Call updateTypeCall(String companyId, String earningTypeUuid, String xGustoAPIVersion, EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = earningTypesUpdateTypeRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/earning_types/{earning_type_uuid}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "earning_type_uuid" + "}", localVarApiClient.escapeString(earningTypeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTypeValidateBeforeCall(String companyId, String earningTypeUuid, String xGustoAPIVersion, EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateType(Async)");
        }

        // verify the required parameter 'earningTypeUuid' is set
        if (earningTypeUuid == null) {
            throw new ApiException("Missing the required parameter 'earningTypeUuid' when calling updateType(Async)");
        }

        return updateTypeCall(companyId, earningTypeUuid, xGustoAPIVersion, earningTypesUpdateTypeRequest, _callback);

    }


    private ApiResponse<EarningType> updateTypeWithHttpInfo(String companyId, String earningTypeUuid, String xGustoAPIVersion, EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTypeValidateBeforeCall(companyId, earningTypeUuid, xGustoAPIVersion, earningTypesUpdateTypeRequest, null);
        Type localVarReturnType = new TypeToken<EarningType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTypeAsync(String companyId, String earningTypeUuid, String xGustoAPIVersion, EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest, final ApiCallback<EarningType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTypeValidateBeforeCall(companyId, earningTypeUuid, xGustoAPIVersion, earningTypesUpdateTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<EarningType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTypeRequestBuilder {
        private final String companyId;
        private final String earningTypeUuid;
        private String name;
        private String xGustoAPIVersion;

        private UpdateTypeRequestBuilder(String companyId, String earningTypeUuid) {
            this.companyId = companyId;
            this.earningTypeUuid = earningTypeUuid;
        }

        /**
         * Set name
         * @param name The name of the custom earning type. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest = buildBodyParams();
            return updateTypeCall(companyId, earningTypeUuid, xGustoAPIVersion, earningTypesUpdateTypeRequest, _callback);
        }

        private EarningTypesUpdateTypeRequest buildBodyParams() {
            EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest = new EarningTypesUpdateTypeRequest();
            earningTypesUpdateTypeRequest.name(this.name);
            return earningTypesUpdateTypeRequest;
        }

        /**
         * Execute updateType request
         * @return EarningType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EarningType execute() throws ApiException {
            EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest = buildBodyParams();
            ApiResponse<EarningType> localVarResp = updateTypeWithHttpInfo(companyId, earningTypeUuid, xGustoAPIVersion, earningTypesUpdateTypeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateType request with HTTP info returned
         * @return ApiResponse&lt;EarningType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EarningType> executeWithHttpInfo() throws ApiException {
            EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest = buildBodyParams();
            return updateTypeWithHttpInfo(companyId, earningTypeUuid, xGustoAPIVersion, earningTypesUpdateTypeRequest);
        }

        /**
         * Execute updateType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EarningType> _callback) throws ApiException {
            EarningTypesUpdateTypeRequest earningTypesUpdateTypeRequest = buildBodyParams();
            return updateTypeAsync(companyId, earningTypeUuid, xGustoAPIVersion, earningTypesUpdateTypeRequest, _callback);
        }
    }

    /**
     * Update an earning type
     * Update an earning type.  scope: &#x60;payrolls:write&#x60;
     * @param companyId The UUID of the company (required)
     * @param earningTypeUuid The UUID of the earning type (required)
     * @return UpdateTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTypeRequestBuilder updateType(String companyId, String earningTypeUuid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (earningTypeUuid == null) throw new IllegalArgumentException("\"earningTypeUuid\" is required but got null");
            

        return new UpdateTypeRequestBuilder(companyId, earningTypeUuid);
    }
}
