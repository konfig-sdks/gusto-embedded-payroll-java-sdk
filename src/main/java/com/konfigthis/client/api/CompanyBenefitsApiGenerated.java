/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BenefitSummary;
import com.konfigthis.client.model.BenefitTypeRequirements;
import com.konfigthis.client.model.CompanyBenefit;
import com.konfigthis.client.model.CompanyBenefitWithEmployeeBenefits;
import com.konfigthis.client.model.CompanyBenefitsCreateBenefitRequest;
import com.konfigthis.client.model.CompanyBenefitsUpdateBenefitRequest;
import com.konfigthis.client.model.SupportedBenefit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompanyBenefitsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompanyBenefitsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyBenefitsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBenefitCall(String companyId, String xGustoAPIVersion, CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyBenefitsCreateBenefitRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/company_benefits"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBenefitValidateBeforeCall(String companyId, String xGustoAPIVersion, CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createBenefit(Async)");
        }

        return createBenefitCall(companyId, xGustoAPIVersion, companyBenefitsCreateBenefitRequest, _callback);

    }


    private ApiResponse<CompanyBenefit> createBenefitWithHttpInfo(String companyId, String xGustoAPIVersion, CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest) throws ApiException {
        okhttp3.Call localVarCall = createBenefitValidateBeforeCall(companyId, xGustoAPIVersion, companyBenefitsCreateBenefitRequest, null);
        Type localVarReturnType = new TypeToken<CompanyBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBenefitAsync(String companyId, String xGustoAPIVersion, CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest, final ApiCallback<CompanyBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBenefitValidateBeforeCall(companyId, xGustoAPIVersion, companyBenefitsCreateBenefitRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBenefitRequestBuilder {
        private final String description;
        private final String companyId;
        private Double benefitType;
        private Boolean active;
        private Boolean responsibleForEmployerTaxes;
        private Boolean responsibleForEmployeeW2;
        private String xGustoAPIVersion;

        private CreateBenefitRequestBuilder(String description, String companyId) {
            this.description = description;
            this.companyId = companyId;
        }

        /**
         * Set benefitType
         * @param benefitType The ID of the benefit to which the company benefit belongs. (optional)
         * @return CreateBenefitRequestBuilder
         */
        public CreateBenefitRequestBuilder benefitType(Double benefitType) {
            this.benefitType = benefitType;
            return this;
        }
        
        /**
         * Set active
         * @param active Whether this benefit is active for employee participation. (optional, default to true)
         * @return CreateBenefitRequestBuilder
         */
        public CreateBenefitRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set responsibleForEmployerTaxes
         * @param responsibleForEmployerTaxes Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits. (optional)
         * @return CreateBenefitRequestBuilder
         */
        public CreateBenefitRequestBuilder responsibleForEmployerTaxes(Boolean responsibleForEmployerTaxes) {
            this.responsibleForEmployerTaxes = responsibleForEmployerTaxes;
            return this;
        }
        
        /**
         * Set responsibleForEmployeeW2
         * @param responsibleForEmployeeW2 Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits. (optional)
         * @return CreateBenefitRequestBuilder
         */
        public CreateBenefitRequestBuilder responsibleForEmployeeW2(Boolean responsibleForEmployeeW2) {
            this.responsibleForEmployeeW2 = responsibleForEmployeeW2;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateBenefitRequestBuilder
         */
        public CreateBenefitRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest = buildBodyParams();
            return createBenefitCall(companyId, xGustoAPIVersion, companyBenefitsCreateBenefitRequest, _callback);
        }

        private CompanyBenefitsCreateBenefitRequest buildBodyParams() {
            CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest = new CompanyBenefitsCreateBenefitRequest();
            companyBenefitsCreateBenefitRequest.description(this.description);
            companyBenefitsCreateBenefitRequest.benefitType(this.benefitType);
            companyBenefitsCreateBenefitRequest.active(this.active);
            companyBenefitsCreateBenefitRequest.responsibleForEmployerTaxes(this.responsibleForEmployerTaxes);
            companyBenefitsCreateBenefitRequest.responsibleForEmployeeW2(this.responsibleForEmployeeW2);
            return companyBenefitsCreateBenefitRequest;
        }

        /**
         * Execute createBenefit request
         * @return CompanyBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefit execute() throws ApiException {
            CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest = buildBodyParams();
            ApiResponse<CompanyBenefit> localVarResp = createBenefitWithHttpInfo(companyId, xGustoAPIVersion, companyBenefitsCreateBenefitRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBenefit request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefit> executeWithHttpInfo() throws ApiException {
            CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest = buildBodyParams();
            return createBenefitWithHttpInfo(companyId, xGustoAPIVersion, companyBenefitsCreateBenefitRequest);
        }

        /**
         * Execute createBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefit> _callback) throws ApiException {
            CompanyBenefitsCreateBenefitRequest companyBenefitsCreateBenefitRequest = buildBodyParams();
            return createBenefitAsync(companyId, xGustoAPIVersion, companyBenefitsCreateBenefitRequest, _callback);
        }
    }

    /**
     * Create a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: &#x60;company_benefits:write&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateBenefitRequestBuilder createBenefit(String description, String companyId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateBenefitRequestBuilder(description, companyId);
    }
    private okhttp3.Call deleteBenefitCall(String companyBenefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company_benefits/{company_benefit_id}"
            .replace("{" + "company_benefit_id" + "}", localVarApiClient.escapeString(companyBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBenefitValidateBeforeCall(String companyBenefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyBenefitId' is set
        if (companyBenefitId == null) {
            throw new ApiException("Missing the required parameter 'companyBenefitId' when calling deleteBenefit(Async)");
        }

        return deleteBenefitCall(companyBenefitId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteBenefitWithHttpInfo(String companyBenefitId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteBenefitValidateBeforeCall(companyBenefitId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBenefitAsync(String companyBenefitId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBenefitValidateBeforeCall(companyBenefitId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteBenefitRequestBuilder {
        private final String companyBenefitId;
        private String xGustoAPIVersion;

        private DeleteBenefitRequestBuilder(String companyBenefitId) {
            this.companyBenefitId = companyBenefitId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteBenefitRequestBuilder
         */
        public DeleteBenefitRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBenefitCall(companyBenefitId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteBenefit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteBenefitWithHttpInfo(companyBenefitId, xGustoAPIVersion);
        }

        /**
         * Execute deleteBenefit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBenefitWithHttpInfo(companyBenefitId, xGustoAPIVersion);
        }

        /**
         * Execute deleteBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBenefitAsync(companyBenefitId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a company benefit
     * The following must be true in order to delete a company benefit   - There are no employee benefits associated with the company benefit   - There are no payroll items associated with the company benefit   - The benefit is not managed by a Partner or by Gusto (type must be &#39;External&#39;)  scope: &#x60;company_benefits:write&#x60;
     * @param companyBenefitId The UUID of the company benefit (required)
     * @return DeleteBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBenefitRequestBuilder deleteBenefit(String companyBenefitId) throws IllegalArgumentException {
        if (companyBenefitId == null) throw new IllegalArgumentException("\"companyBenefitId\" is required but got null");
            

        return new DeleteBenefitRequestBuilder(companyBenefitId);
    }
    private okhttp3.Call getBenefitByIdCall(String companyBenefitId, Boolean withEmployeeBenefits, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company_benefits/{company_benefit_id}"
            .replace("{" + "company_benefit_id" + "}", localVarApiClient.escapeString(companyBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withEmployeeBenefits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_employee_benefits", withEmployeeBenefits));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitByIdValidateBeforeCall(String companyBenefitId, Boolean withEmployeeBenefits, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyBenefitId' is set
        if (companyBenefitId == null) {
            throw new ApiException("Missing the required parameter 'companyBenefitId' when calling getBenefitById(Async)");
        }

        return getBenefitByIdCall(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, _callback);

    }


    private ApiResponse<CompanyBenefitWithEmployeeBenefits> getBenefitByIdWithHttpInfo(String companyBenefitId, Boolean withEmployeeBenefits, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getBenefitByIdValidateBeforeCall(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<CompanyBenefitWithEmployeeBenefits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBenefitByIdAsync(String companyBenefitId, Boolean withEmployeeBenefits, String xGustoAPIVersion, final ApiCallback<CompanyBenefitWithEmployeeBenefits> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitByIdValidateBeforeCall(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefitWithEmployeeBenefits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBenefitByIdRequestBuilder {
        private final String companyBenefitId;
        private Boolean withEmployeeBenefits;
        private String xGustoAPIVersion;

        private GetBenefitByIdRequestBuilder(String companyBenefitId) {
            this.companyBenefitId = companyBenefitId;
        }

        /**
         * Set withEmployeeBenefits
         * @param withEmployeeBenefits Whether to return employee benefits associated with the benefit (optional)
         * @return GetBenefitByIdRequestBuilder
         */
        public GetBenefitByIdRequestBuilder withEmployeeBenefits(Boolean withEmployeeBenefits) {
            this.withEmployeeBenefits = withEmployeeBenefits;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetBenefitByIdRequestBuilder
         */
        public GetBenefitByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getBenefitById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitByIdCall(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getBenefitById request
         * @return CompanyBenefitWithEmployeeBenefits
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefitWithEmployeeBenefits execute() throws ApiException {
            ApiResponse<CompanyBenefitWithEmployeeBenefits> localVarResp = getBenefitByIdWithHttpInfo(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBenefitById request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefitWithEmployeeBenefits&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefitWithEmployeeBenefits> executeWithHttpInfo() throws ApiException {
            return getBenefitByIdWithHttpInfo(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion);
        }

        /**
         * Execute getBenefitById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefitWithEmployeeBenefits> _callback) throws ApiException {
            return getBenefitByIdAsync(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.  scope: &#x60;company_benefits:read&#x60;
     * @param companyBenefitId The UUID of the company benefit (required)
     * @return GetBenefitByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetBenefitByIdRequestBuilder getBenefitById(String companyBenefitId) throws IllegalArgumentException {
        if (companyBenefitId == null) throw new IllegalArgumentException("\"companyBenefitId\" is required but got null");
            

        return new GetBenefitByIdRequestBuilder(companyBenefitId);
    }
    private okhttp3.Call getBenefitFieldsRequirementsByIdCall(String benefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/benefits/{benefit_id}/requirements"
            .replace("{" + "benefit_id" + "}", localVarApiClient.escapeString(benefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitFieldsRequirementsByIdValidateBeforeCall(String benefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'benefitId' is set
        if (benefitId == null) {
            throw new ApiException("Missing the required parameter 'benefitId' when calling getBenefitFieldsRequirementsById(Async)");
        }

        return getBenefitFieldsRequirementsByIdCall(benefitId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<BenefitTypeRequirements> getBenefitFieldsRequirementsByIdWithHttpInfo(String benefitId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getBenefitFieldsRequirementsByIdValidateBeforeCall(benefitId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<BenefitTypeRequirements>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBenefitFieldsRequirementsByIdAsync(String benefitId, String xGustoAPIVersion, final ApiCallback<BenefitTypeRequirements> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitFieldsRequirementsByIdValidateBeforeCall(benefitId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<BenefitTypeRequirements>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBenefitFieldsRequirementsByIdRequestBuilder {
        private final String benefitId;
        private String xGustoAPIVersion;

        private GetBenefitFieldsRequirementsByIdRequestBuilder(String benefitId) {
            this.benefitId = benefitId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetBenefitFieldsRequirementsByIdRequestBuilder
         */
        public GetBenefitFieldsRequirementsByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getBenefitFieldsRequirementsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitFieldsRequirementsByIdCall(benefitId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getBenefitFieldsRequirementsById request
         * @return BenefitTypeRequirements
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public BenefitTypeRequirements execute() throws ApiException {
            ApiResponse<BenefitTypeRequirements> localVarResp = getBenefitFieldsRequirementsByIdWithHttpInfo(benefitId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBenefitFieldsRequirementsById request with HTTP info returned
         * @return ApiResponse&lt;BenefitTypeRequirements&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BenefitTypeRequirements> executeWithHttpInfo() throws ApiException {
            return getBenefitFieldsRequirementsByIdWithHttpInfo(benefitId, xGustoAPIVersion);
        }

        /**
         * Execute getBenefitFieldsRequirementsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BenefitTypeRequirements> _callback) throws ApiException {
            return getBenefitFieldsRequirementsByIdAsync(benefitId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get benefit fields requirements by ID
     * Returns field requirements for the requested benefit type.  scope: &#x60;benefits:read&#x60;
     * @param benefitId The benefit type in Gusto. (required)
     * @return GetBenefitFieldsRequirementsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetBenefitFieldsRequirementsByIdRequestBuilder getBenefitFieldsRequirementsById(String benefitId) throws IllegalArgumentException {
        if (benefitId == null) throw new IllegalArgumentException("\"benefitId\" is required but got null");
            

        return new GetBenefitFieldsRequirementsByIdRequestBuilder(benefitId);
    }
    private okhttp3.Call getBenefitSummaryByIdCall(String companyBenefitId, String startDate, String endDate, Boolean detailed, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company_benefits/{company_benefit_id}/summary"
            .replace("{" + "company_benefit_id" + "}", localVarApiClient.escapeString(companyBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitSummaryByIdValidateBeforeCall(String companyBenefitId, String startDate, String endDate, Boolean detailed, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyBenefitId' is set
        if (companyBenefitId == null) {
            throw new ApiException("Missing the required parameter 'companyBenefitId' when calling getBenefitSummaryById(Async)");
        }

        return getBenefitSummaryByIdCall(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, _callback);

    }


    private ApiResponse<BenefitSummary> getBenefitSummaryByIdWithHttpInfo(String companyBenefitId, String startDate, String endDate, Boolean detailed, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getBenefitSummaryByIdValidateBeforeCall(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<BenefitSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBenefitSummaryByIdAsync(String companyBenefitId, String startDate, String endDate, Boolean detailed, String xGustoAPIVersion, final ApiCallback<BenefitSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitSummaryByIdValidateBeforeCall(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<BenefitSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBenefitSummaryByIdRequestBuilder {
        private final String companyBenefitId;
        private String startDate;
        private String endDate;
        private Boolean detailed;
        private String xGustoAPIVersion;

        private GetBenefitSummaryByIdRequestBuilder(String companyBenefitId) {
            this.companyBenefitId = companyBenefitId;
        }

        /**
         * Set startDate
         * @param startDate The start date for which to retrieve company benefit summary (optional)
         * @return GetBenefitSummaryByIdRequestBuilder
         */
        public GetBenefitSummaryByIdRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The end date for which to retrieve company benefit summary (optional)
         * @return GetBenefitSummaryByIdRequestBuilder
         */
        public GetBenefitSummaryByIdRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set detailed
         * @param detailed Display employee payroll item summary (optional)
         * @return GetBenefitSummaryByIdRequestBuilder
         */
        public GetBenefitSummaryByIdRequestBuilder detailed(Boolean detailed) {
            this.detailed = detailed;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetBenefitSummaryByIdRequestBuilder
         */
        public GetBenefitSummaryByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getBenefitSummaryById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitSummaryByIdCall(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getBenefitSummaryById request
         * @return BenefitSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public BenefitSummary execute() throws ApiException {
            ApiResponse<BenefitSummary> localVarResp = getBenefitSummaryByIdWithHttpInfo(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBenefitSummaryById request with HTTP info returned
         * @return ApiResponse&lt;BenefitSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BenefitSummary> executeWithHttpInfo() throws ApiException {
            return getBenefitSummaryByIdWithHttpInfo(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion);
        }

        /**
         * Execute getBenefitSummaryById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BenefitSummary> _callback) throws ApiException {
            return getBenefitSummaryByIdAsync(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get company benefit summary by company benefit id.
     * Returns summary benefit data for the requested company benefit id.  Benefits containing PHI are only visible to applications with the &#x60;company_benefits:read:phi&#x60; scope.  scope: &#x60;company_benefits:read&#x60;
     * @param companyBenefitId The UUID of the company benefit (required)
     * @return GetBenefitSummaryByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetBenefitSummaryByIdRequestBuilder getBenefitSummaryById(String companyBenefitId) throws IllegalArgumentException {
        if (companyBenefitId == null) throw new IllegalArgumentException("\"companyBenefitId\" is required but got null");
            

        return new GetBenefitSummaryByIdRequestBuilder(companyBenefitId);
    }
    private okhttp3.Call getBenefitsForCompanyCall(String companyId, Boolean enrollmentCount, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/company_benefits"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enrollmentCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enrollment_count", enrollmentCount));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBenefitsForCompanyValidateBeforeCall(String companyId, Boolean enrollmentCount, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getBenefitsForCompany(Async)");
        }

        return getBenefitsForCompanyCall(companyId, enrollmentCount, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<CompanyBenefit>> getBenefitsForCompanyWithHttpInfo(String companyId, Boolean enrollmentCount, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getBenefitsForCompanyValidateBeforeCall(companyId, enrollmentCount, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<CompanyBenefit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBenefitsForCompanyAsync(String companyId, Boolean enrollmentCount, String xGustoAPIVersion, final ApiCallback<List<CompanyBenefit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBenefitsForCompanyValidateBeforeCall(companyId, enrollmentCount, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CompanyBenefit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBenefitsForCompanyRequestBuilder {
        private final String companyId;
        private Boolean enrollmentCount;
        private String xGustoAPIVersion;

        private GetBenefitsForCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set enrollmentCount
         * @param enrollmentCount Whether to return employee enrollment count (optional)
         * @return GetBenefitsForCompanyRequestBuilder
         */
        public GetBenefitsForCompanyRequestBuilder enrollmentCount(Boolean enrollmentCount) {
            this.enrollmentCount = enrollmentCount;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetBenefitsForCompanyRequestBuilder
         */
        public GetBenefitsForCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getBenefitsForCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBenefitsForCompanyCall(companyId, enrollmentCount, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getBenefitsForCompany request
         * @return List&lt;CompanyBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<CompanyBenefit> execute() throws ApiException {
            ApiResponse<List<CompanyBenefit>> localVarResp = getBenefitsForCompanyWithHttpInfo(companyId, enrollmentCount, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBenefitsForCompany request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CompanyBenefit&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CompanyBenefit>> executeWithHttpInfo() throws ApiException {
            return getBenefitsForCompanyWithHttpInfo(companyId, enrollmentCount, xGustoAPIVersion);
        }

        /**
         * Execute getBenefitsForCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CompanyBenefit>> _callback) throws ApiException {
            return getBenefitsForCompanyAsync(companyId, enrollmentCount, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get benefits for a company
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  Benefits containing PHI are only visible to applications with the &#x60;company_benefits:read:phi&#x60; scope.  scope: &#x60;company_benefits:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetBenefitsForCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetBenefitsForCompanyRequestBuilder getBenefitsForCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetBenefitsForCompanyRequestBuilder(companyId);
    }
    private okhttp3.Call getSupportedBenefitByIdCall(String benefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/benefits/{benefit_id}"
            .replace("{" + "benefit_id" + "}", localVarApiClient.escapeString(benefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupportedBenefitByIdValidateBeforeCall(String benefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'benefitId' is set
        if (benefitId == null) {
            throw new ApiException("Missing the required parameter 'benefitId' when calling getSupportedBenefitById(Async)");
        }

        return getSupportedBenefitByIdCall(benefitId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<SupportedBenefit> getSupportedBenefitByIdWithHttpInfo(String benefitId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSupportedBenefitByIdValidateBeforeCall(benefitId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<SupportedBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSupportedBenefitByIdAsync(String benefitId, String xGustoAPIVersion, final ApiCallback<SupportedBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSupportedBenefitByIdValidateBeforeCall(benefitId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<SupportedBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSupportedBenefitByIdRequestBuilder {
        private final String benefitId;
        private String xGustoAPIVersion;

        private GetSupportedBenefitByIdRequestBuilder(String benefitId) {
            this.benefitId = benefitId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSupportedBenefitByIdRequestBuilder
         */
        public GetSupportedBenefitByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSupportedBenefitById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSupportedBenefitByIdCall(benefitId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSupportedBenefitById request
         * @return SupportedBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public SupportedBenefit execute() throws ApiException {
            ApiResponse<SupportedBenefit> localVarResp = getSupportedBenefitByIdWithHttpInfo(benefitId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSupportedBenefitById request with HTTP info returned
         * @return ApiResponse&lt;SupportedBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SupportedBenefit> executeWithHttpInfo() throws ApiException {
            return getSupportedBenefitByIdWithHttpInfo(benefitId, xGustoAPIVersion);
        }

        /**
         * Execute getSupportedBenefitById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SupportedBenefit> _callback) throws ApiException {
            return getSupportedBenefitByIdAsync(benefitId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a supported benefit by ID
     * Returns a benefit supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: &#x60;benefits:read&#x60;
     * @param benefitId The benefit type in Gusto. (required)
     * @return GetSupportedBenefitByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSupportedBenefitByIdRequestBuilder getSupportedBenefitById(String benefitId) throws IllegalArgumentException {
        if (benefitId == null) throw new IllegalArgumentException("\"benefitId\" is required but got null");
            

        return new GetSupportedBenefitByIdRequestBuilder(benefitId);
    }
    private okhttp3.Call listSupportedBenefitsCall(String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/benefits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSupportedBenefitsValidateBeforeCall(String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        return listSupportedBenefitsCall(xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<SupportedBenefit>> listSupportedBenefitsWithHttpInfo(String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listSupportedBenefitsValidateBeforeCall(xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<SupportedBenefit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSupportedBenefitsAsync(String xGustoAPIVersion, final ApiCallback<List<SupportedBenefit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSupportedBenefitsValidateBeforeCall(xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<SupportedBenefit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSupportedBenefitsRequestBuilder {
        private String xGustoAPIVersion;

        private ListSupportedBenefitsRequestBuilder() {
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListSupportedBenefitsRequestBuilder
         */
        public ListSupportedBenefitsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listSupportedBenefits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSupportedBenefitsCall(xGustoAPIVersion, _callback);
        }


        /**
         * Execute listSupportedBenefits request
         * @return List&lt;SupportedBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<SupportedBenefit> execute() throws ApiException {
            ApiResponse<List<SupportedBenefit>> localVarResp = listSupportedBenefitsWithHttpInfo(xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSupportedBenefits request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SupportedBenefit&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SupportedBenefit>> executeWithHttpInfo() throws ApiException {
            return listSupportedBenefitsWithHttpInfo(xGustoAPIVersion);
        }

        /**
         * Execute listSupportedBenefits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SupportedBenefit>> _callback) throws ApiException {
            return listSupportedBenefitsAsync(xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all benefits supported by Gusto
     * Returns all benefits supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: &#x60;benefits:read&#x60;
     * @return ListSupportedBenefitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListSupportedBenefitsRequestBuilder listSupportedBenefits() throws IllegalArgumentException {
        return new ListSupportedBenefitsRequestBuilder();
    }
    private okhttp3.Call updateBenefitCall(String companyBenefitId, String xGustoAPIVersion, CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyBenefitsUpdateBenefitRequest;

        // create path and map variables
        String localVarPath = "/v1/company_benefits/{company_benefit_id}"
            .replace("{" + "company_benefit_id" + "}", localVarApiClient.escapeString(companyBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBenefitValidateBeforeCall(String companyBenefitId, String xGustoAPIVersion, CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyBenefitId' is set
        if (companyBenefitId == null) {
            throw new ApiException("Missing the required parameter 'companyBenefitId' when calling updateBenefit(Async)");
        }

        return updateBenefitCall(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, _callback);

    }


    private ApiResponse<CompanyBenefit> updateBenefitWithHttpInfo(String companyBenefitId, String xGustoAPIVersion, CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBenefitValidateBeforeCall(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, null);
        Type localVarReturnType = new TypeToken<CompanyBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBenefitAsync(String companyBenefitId, String xGustoAPIVersion, CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest, final ApiCallback<CompanyBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBenefitValidateBeforeCall(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBenefitRequestBuilder {
        private final String version;
        private final String companyBenefitId;
        private String description;
        private Boolean active;
        private String xGustoAPIVersion;

        private UpdateBenefitRequestBuilder(String version, String companyBenefitId) {
            this.version = version;
            this.companyBenefitId = companyBenefitId;
        }

        /**
         * Set description
         * @param description The description of the company benefit.For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”. (optional)
         * @return UpdateBenefitRequestBuilder
         */
        public UpdateBenefitRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set active
         * @param active Whether this benefit is active for employee participation. Company benefits may only be deactivated if no employees are actively participating. (optional)
         * @return UpdateBenefitRequestBuilder
         */
        public UpdateBenefitRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateBenefitRequestBuilder
         */
        public UpdateBenefitRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = buildBodyParams();
            return updateBenefitCall(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, _callback);
        }

        private CompanyBenefitsUpdateBenefitRequest buildBodyParams() {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = new CompanyBenefitsUpdateBenefitRequest();
            companyBenefitsUpdateBenefitRequest.description(this.description);
            companyBenefitsUpdateBenefitRequest.version(this.version);
            companyBenefitsUpdateBenefitRequest.active(this.active);
            return companyBenefitsUpdateBenefitRequest;
        }

        /**
         * Execute updateBenefit request
         * @return CompanyBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefit execute() throws ApiException {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = buildBodyParams();
            ApiResponse<CompanyBenefit> localVarResp = updateBenefitWithHttpInfo(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBenefit request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefit> executeWithHttpInfo() throws ApiException {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = buildBodyParams();
            return updateBenefitWithHttpInfo(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest);
        }

        /**
         * Execute updateBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefit> _callback) throws ApiException {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = buildBodyParams();
            return updateBenefitAsync(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, _callback);
        }
    }

    /**
     * Update a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: &#x60;company_benefits:write&#x60;
     * @param companyBenefitId The UUID of the company benefit (required)
     * @return UpdateBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBenefitRequestBuilder updateBenefit(String version, String companyBenefitId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (companyBenefitId == null) throw new IllegalArgumentException("\"companyBenefitId\" is required but got null");
            

        return new UpdateBenefitRequestBuilder(version, companyBenefitId);
    }
}
