/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.HolidayPayPoliciesAddEmployeesToPolicyRequest;
import com.konfigthis.client.model.HolidayPayPoliciesCreateCompanyPolicyRequest;
import com.konfigthis.client.model.HolidayPayPoliciesCreateCompanyPolicyRequestFederalHolidays;
import com.konfigthis.client.model.HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest;
import com.konfigthis.client.model.HolidayPayPoliciesRemoveEmployeesRequest;
import com.konfigthis.client.model.HolidayPayPoliciesUpdatePolicyRequest;
import com.konfigthis.client.model.HolidayPayPolicy;
import com.konfigthis.client.model.PaidHolidays;
import com.konfigthis.client.model.TimeOffPolicyEmployeesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HolidayPayPoliciesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HolidayPayPoliciesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HolidayPayPoliciesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addEmployeesToPolicyCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidayPayPoliciesAddEmployeesToPolicyRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/holiday_pay_policy/add"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmployeesToPolicyValidateBeforeCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling addEmployeesToPolicy(Async)");
        }

        return addEmployeesToPolicyCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesAddEmployeesToPolicyRequest, _callback);

    }


    private ApiResponse<HolidayPayPolicy> addEmployeesToPolicyWithHttpInfo(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = addEmployeesToPolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesAddEmployeesToPolicyRequest, null);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEmployeesToPolicyAsync(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest, final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmployeesToPolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesAddEmployeesToPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddEmployeesToPolicyRequestBuilder {
        private final String version;
        private final String companyUuid;
        private List<TimeOffPolicyEmployeesInner> employees;
        private String xGustoAPIVersion;

        private AddEmployeesToPolicyRequestBuilder(String version, String companyUuid) {
            this.version = version;
            this.companyUuid = companyUuid;
        }

        /**
         * Set employees
         * @param employees An array of employee objects, each containing an employee_uuid. (optional)
         * @return AddEmployeesToPolicyRequestBuilder
         */
        public AddEmployeesToPolicyRequestBuilder employees(List<TimeOffPolicyEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return AddEmployeesToPolicyRequestBuilder
         */
        public AddEmployeesToPolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for addEmployeesToPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest = buildBodyParams();
            return addEmployeesToPolicyCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesAddEmployeesToPolicyRequest, _callback);
        }

        private HolidayPayPoliciesAddEmployeesToPolicyRequest buildBodyParams() {
            HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest = new HolidayPayPoliciesAddEmployeesToPolicyRequest();
            holidayPayPoliciesAddEmployeesToPolicyRequest.version(this.version);
            holidayPayPoliciesAddEmployeesToPolicyRequest.employees(this.employees);
            return holidayPayPoliciesAddEmployeesToPolicyRequest;
        }

        /**
         * Execute addEmployeesToPolicy request
         * @return HolidayPayPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public HolidayPayPolicy execute() throws ApiException {
            HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest = buildBodyParams();
            ApiResponse<HolidayPayPolicy> localVarResp = addEmployeesToPolicyWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesAddEmployeesToPolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addEmployeesToPolicy request with HTTP info returned
         * @return ApiResponse&lt;HolidayPayPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayPayPolicy> executeWithHttpInfo() throws ApiException {
            HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest = buildBodyParams();
            return addEmployeesToPolicyWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesAddEmployeesToPolicyRequest);
        }

        /**
         * Execute addEmployeesToPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {
            HolidayPayPoliciesAddEmployeesToPolicyRequest holidayPayPoliciesAddEmployeesToPolicyRequest = buildBodyParams();
            return addEmployeesToPolicyAsync(companyUuid, xGustoAPIVersion, holidayPayPoliciesAddEmployeesToPolicyRequest, _callback);
        }
    }

    /**
     * Add employees to a company&#39;s holiday pay policy
     * Add employees to a company&#39;s holiday pay policy  scope: &#x60;holiday_pay_policies:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return AddEmployeesToPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public AddEmployeesToPolicyRequestBuilder addEmployeesToPolicy(String version, String companyUuid) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new AddEmployeesToPolicyRequestBuilder(version, companyUuid);
    }
    private okhttp3.Call createCompanyPolicyCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidayPayPoliciesCreateCompanyPolicyRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/holiday_pay_policy"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompanyPolicyValidateBeforeCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling createCompanyPolicy(Async)");
        }

        return createCompanyPolicyCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesCreateCompanyPolicyRequest, _callback);

    }


    private ApiResponse<HolidayPayPolicy> createCompanyPolicyWithHttpInfo(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createCompanyPolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesCreateCompanyPolicyRequest, null);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCompanyPolicyAsync(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest, final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompanyPolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesCreateCompanyPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCompanyPolicyRequestBuilder {
        private final String companyUuid;
        private HolidayPayPoliciesCreateCompanyPolicyRequestFederalHolidays federalHolidays;
        private String xGustoAPIVersion;

        private CreateCompanyPolicyRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set federalHolidays
         * @param federalHolidays  (optional)
         * @return CreateCompanyPolicyRequestBuilder
         */
        public CreateCompanyPolicyRequestBuilder federalHolidays(HolidayPayPoliciesCreateCompanyPolicyRequestFederalHolidays federalHolidays) {
            this.federalHolidays = federalHolidays;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateCompanyPolicyRequestBuilder
         */
        public CreateCompanyPolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createCompanyPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest = buildBodyParams();
            return createCompanyPolicyCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesCreateCompanyPolicyRequest, _callback);
        }

        private HolidayPayPoliciesCreateCompanyPolicyRequest buildBodyParams() {
            HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest = new HolidayPayPoliciesCreateCompanyPolicyRequest();
            holidayPayPoliciesCreateCompanyPolicyRequest.federalHolidays(this.federalHolidays);
            return holidayPayPoliciesCreateCompanyPolicyRequest;
        }

        /**
         * Execute createCompanyPolicy request
         * @return HolidayPayPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public HolidayPayPolicy execute() throws ApiException {
            HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest = buildBodyParams();
            ApiResponse<HolidayPayPolicy> localVarResp = createCompanyPolicyWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesCreateCompanyPolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCompanyPolicy request with HTTP info returned
         * @return ApiResponse&lt;HolidayPayPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayPayPolicy> executeWithHttpInfo() throws ApiException {
            HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest = buildBodyParams();
            return createCompanyPolicyWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesCreateCompanyPolicyRequest);
        }

        /**
         * Execute createCompanyPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {
            HolidayPayPoliciesCreateCompanyPolicyRequest holidayPayPoliciesCreateCompanyPolicyRequest = buildBodyParams();
            return createCompanyPolicyAsync(companyUuid, xGustoAPIVersion, holidayPayPoliciesCreateCompanyPolicyRequest, _callback);
        }
    }

    /**
     * Create a holiday pay policy for a company
     * Create a holiday pay policy for a company  scope: &#x60;holiday_pay_policies:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return CreateCompanyPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompanyPolicyRequestBuilder createCompanyPolicy(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new CreateCompanyPolicyRequestBuilder(companyUuid);
    }
    private okhttp3.Call deletePolicyCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/holiday_pay_policy"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling deletePolicy(Async)");
        }

        return deletePolicyCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deletePolicyWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePolicyRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private DeletePolicyRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeletePolicyRequestBuilder
         */
        public DeletePolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deletePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deletePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute deletePolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute deletePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a company&#39;s holiday pay policy
     * Delete a company&#39;s holiday pay policy  scope: &#x60;holiday_pay_policies:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return DeletePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeletePolicyRequestBuilder deletePolicy(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new DeletePolicyRequestBuilder(companyUuid);
    }
    private okhttp3.Call getCompanyPolicyCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/holiday_pay_policy"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyPolicyValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getCompanyPolicy(Async)");
        }

        return getCompanyPolicyCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<HolidayPayPolicy> getCompanyPolicyWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCompanyPolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyPolicyAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyPolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyPolicyRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetCompanyPolicyRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompanyPolicyRequestBuilder
         */
        public GetCompanyPolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompanyPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyPolicyCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCompanyPolicy request
         * @return HolidayPayPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public HolidayPayPolicy execute() throws ApiException {
            ApiResponse<HolidayPayPolicy> localVarResp = getCompanyPolicyWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyPolicy request with HTTP info returned
         * @return ApiResponse&lt;HolidayPayPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayPayPolicy> executeWithHttpInfo() throws ApiException {
            return getCompanyPolicyWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getCompanyPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {
            return getCompanyPolicyAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a company&#39;s holiday pay policy
     * Get a company&#39;s holiday pay policy  scope: &#x60;holiday_pay_policies:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetCompanyPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyPolicyRequestBuilder getCompanyPolicy(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetCompanyPolicyRequestBuilder(companyUuid);
    }
    private okhttp3.Call previewCompanyPaidHolidaysCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidayPayPoliciesPreviewCompanyPaidHolidaysRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/paid_holidays"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewCompanyPaidHolidaysValidateBeforeCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling previewCompanyPaidHolidays(Async)");
        }

        return previewCompanyPaidHolidaysCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, _callback);

    }


    private ApiResponse<PaidHolidays> previewCompanyPaidHolidaysWithHttpInfo(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest) throws ApiException {
        okhttp3.Call localVarCall = previewCompanyPaidHolidaysValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, null);
        Type localVarReturnType = new TypeToken<PaidHolidays>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call previewCompanyPaidHolidaysAsync(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, final ApiCallback<PaidHolidays> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewCompanyPaidHolidaysValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, _callback);
        Type localVarReturnType = new TypeToken<PaidHolidays>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreviewCompanyPaidHolidaysRequestBuilder {
        private final String companyUuid;
        private String year;
        private String xGustoAPIVersion;

        private PreviewCompanyPaidHolidaysRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set year
         * @param year If a year is passed, paid holidays for that year will be returned. Otherwise, paid holidays for the next three years will be returned. (optional)
         * @return PreviewCompanyPaidHolidaysRequestBuilder
         */
        public PreviewCompanyPaidHolidaysRequestBuilder year(String year) {
            this.year = year;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return PreviewCompanyPaidHolidaysRequestBuilder
         */
        public PreviewCompanyPaidHolidaysRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for previewCompanyPaidHolidays
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Paid Holidays Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest = buildBodyParams();
            return previewCompanyPaidHolidaysCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, _callback);
        }

        private HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest buildBodyParams() {
            HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest = new HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest();
            holidayPayPoliciesPreviewCompanyPaidHolidaysRequest.year(this.year);
            return holidayPayPoliciesPreviewCompanyPaidHolidaysRequest;
        }

        /**
         * Execute previewCompanyPaidHolidays request
         * @return PaidHolidays
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Paid Holidays Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PaidHolidays execute() throws ApiException {
            HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest = buildBodyParams();
            ApiResponse<PaidHolidays> localVarResp = previewCompanyPaidHolidaysWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesPreviewCompanyPaidHolidaysRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute previewCompanyPaidHolidays request with HTTP info returned
         * @return ApiResponse&lt;PaidHolidays&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Paid Holidays Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaidHolidays> executeWithHttpInfo() throws ApiException {
            HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest = buildBodyParams();
            return previewCompanyPaidHolidaysWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesPreviewCompanyPaidHolidaysRequest);
        }

        /**
         * Execute previewCompanyPaidHolidays request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Paid Holidays Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaidHolidays> _callback) throws ApiException {
            HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest holidayPayPoliciesPreviewCompanyPaidHolidaysRequest = buildBodyParams();
            return previewCompanyPaidHolidaysAsync(companyUuid, xGustoAPIVersion, holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, _callback);
        }
    }

    /**
     * Preview a company&#39;s paid holidays
     * Preview a company&#39;s paid holidays  scope: &#x60;holiday_pay_policies:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return PreviewCompanyPaidHolidaysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paid Holidays Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public PreviewCompanyPaidHolidaysRequestBuilder previewCompanyPaidHolidays(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new PreviewCompanyPaidHolidaysRequestBuilder(companyUuid);
    }
    private okhttp3.Call removeEmployeesCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidayPayPoliciesRemoveEmployeesRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/holiday_pay_policy/remove"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEmployeesValidateBeforeCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling removeEmployees(Async)");
        }

        return removeEmployeesCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesRemoveEmployeesRequest, _callback);

    }


    private ApiResponse<HolidayPayPolicy> removeEmployeesWithHttpInfo(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest) throws ApiException {
        okhttp3.Call localVarCall = removeEmployeesValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesRemoveEmployeesRequest, null);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEmployeesAsync(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest, final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEmployeesValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesRemoveEmployeesRequest, _callback);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEmployeesRequestBuilder {
        private final String version;
        private final String companyUuid;
        private List<TimeOffPolicyEmployeesInner> employees;
        private String xGustoAPIVersion;

        private RemoveEmployeesRequestBuilder(String version, String companyUuid) {
            this.version = version;
            this.companyUuid = companyUuid;
        }

        /**
         * Set employees
         * @param employees An array of employee objects, each containing an employee_uuid. (optional)
         * @return RemoveEmployeesRequestBuilder
         */
        public RemoveEmployeesRequestBuilder employees(List<TimeOffPolicyEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return RemoveEmployeesRequestBuilder
         */
        public RemoveEmployeesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for removeEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesRemoveEmployeesRequest, _callback);
        }

        private HolidayPayPoliciesRemoveEmployeesRequest buildBodyParams() {
            HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest = new HolidayPayPoliciesRemoveEmployeesRequest();
            holidayPayPoliciesRemoveEmployeesRequest.version(this.version);
            holidayPayPoliciesRemoveEmployeesRequest.employees(this.employees);
            return holidayPayPoliciesRemoveEmployeesRequest;
        }

        /**
         * Execute removeEmployees request
         * @return HolidayPayPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public HolidayPayPolicy execute() throws ApiException {
            HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest = buildBodyParams();
            ApiResponse<HolidayPayPolicy> localVarResp = removeEmployeesWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesRemoveEmployeesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEmployees request with HTTP info returned
         * @return ApiResponse&lt;HolidayPayPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayPayPolicy> executeWithHttpInfo() throws ApiException {
            HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesRemoveEmployeesRequest);
        }

        /**
         * Execute removeEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {
            HolidayPayPoliciesRemoveEmployeesRequest holidayPayPoliciesRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesAsync(companyUuid, xGustoAPIVersion, holidayPayPoliciesRemoveEmployeesRequest, _callback);
        }
    }

    /**
     * Remove employees from a company&#39;s holiday pay policy
     * Remove employees from a company&#39;s holiday pay policy  scope: &#x60;holiday_pay_policies:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return RemoveEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEmployeesRequestBuilder removeEmployees(String version, String companyUuid) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new RemoveEmployeesRequestBuilder(version, companyUuid);
    }
    private okhttp3.Call updatePolicyCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidayPayPoliciesUpdatePolicyRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/holiday_pay_policy"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyValidateBeforeCall(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling updatePolicy(Async)");
        }

        return updatePolicyCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesUpdatePolicyRequest, _callback);

    }


    private ApiResponse<HolidayPayPolicy> updatePolicyWithHttpInfo(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesUpdatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicyAsync(String companyUuid, String xGustoAPIVersion, HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest, final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesUpdatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<HolidayPayPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePolicyRequestBuilder {
        private final String version;
        private final String companyUuid;
        private HolidayPayPoliciesCreateCompanyPolicyRequestFederalHolidays federalHolidays;
        private String xGustoAPIVersion;

        private UpdatePolicyRequestBuilder(String version, String companyUuid) {
            this.version = version;
            this.companyUuid = companyUuid;
        }

        /**
         * Set federalHolidays
         * @param federalHolidays  (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder federalHolidays(HolidayPayPoliciesCreateCompanyPolicyRequestFederalHolidays federalHolidays) {
            this.federalHolidays = federalHolidays;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updatePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyCall(companyUuid, xGustoAPIVersion, holidayPayPoliciesUpdatePolicyRequest, _callback);
        }

        private HolidayPayPoliciesUpdatePolicyRequest buildBodyParams() {
            HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest = new HolidayPayPoliciesUpdatePolicyRequest();
            holidayPayPoliciesUpdatePolicyRequest.version(this.version);
            holidayPayPoliciesUpdatePolicyRequest.federalHolidays(this.federalHolidays);
            return holidayPayPoliciesUpdatePolicyRequest;
        }

        /**
         * Execute updatePolicy request
         * @return HolidayPayPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public HolidayPayPolicy execute() throws ApiException {
            HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest = buildBodyParams();
            ApiResponse<HolidayPayPolicy> localVarResp = updatePolicyWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesUpdatePolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePolicy request with HTTP info returned
         * @return ApiResponse&lt;HolidayPayPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayPayPolicy> executeWithHttpInfo() throws ApiException {
            HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyWithHttpInfo(companyUuid, xGustoAPIVersion, holidayPayPoliciesUpdatePolicyRequest);
        }

        /**
         * Execute updatePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayPayPolicy> _callback) throws ApiException {
            HolidayPayPoliciesUpdatePolicyRequest holidayPayPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyAsync(companyUuid, xGustoAPIVersion, holidayPayPoliciesUpdatePolicyRequest, _callback);
        }
    }

    /**
     * Update a company&#39;s holiday pay policy
     * Update a company&#39;s holiday pay policy  scope: &#x60;holiday_pay_policies:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return UpdatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Holiday Pay Policy Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePolicyRequestBuilder updatePolicy(String version, String companyUuid) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new UpdatePolicyRequestBuilder(version, companyUuid);
    }
}
