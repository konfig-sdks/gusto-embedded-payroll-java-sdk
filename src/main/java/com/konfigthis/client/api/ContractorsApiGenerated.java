/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Contractor;
import com.konfigthis.client.model.ContractorAddress;
import com.konfigthis.client.model.ContractorOnboardingStatus;
import com.konfigthis.client.model.ContractorsChangeOnboardingStatusRequest;
import com.konfigthis.client.model.ContractorsCreateNewContractorRequest;
import com.konfigthis.client.model.ContractorsUpdateAddressRequest;
import com.konfigthis.client.model.ContractorsUpdateContractorRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call changeOnboardingStatusCall(String contractorUuid, String xGustoAPIVersion, ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorsChangeOnboardingStatusRequest;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/onboarding_status"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeOnboardingStatusValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling changeOnboardingStatus(Async)");
        }

        return changeOnboardingStatusCall(contractorUuid, xGustoAPIVersion, contractorsChangeOnboardingStatusRequest, _callback);

    }


    private ApiResponse<ContractorOnboardingStatus> changeOnboardingStatusWithHttpInfo(String contractorUuid, String xGustoAPIVersion, ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = changeOnboardingStatusValidateBeforeCall(contractorUuid, xGustoAPIVersion, contractorsChangeOnboardingStatusRequest, null);
        Type localVarReturnType = new TypeToken<ContractorOnboardingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call changeOnboardingStatusAsync(String contractorUuid, String xGustoAPIVersion, ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest, final ApiCallback<ContractorOnboardingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeOnboardingStatusValidateBeforeCall(contractorUuid, xGustoAPIVersion, contractorsChangeOnboardingStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractorOnboardingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChangeOnboardingStatusRequestBuilder {
        private final String onboardingStatus;
        private final String contractorUuid;
        private String xGustoAPIVersion;

        private ChangeOnboardingStatusRequestBuilder(String onboardingStatus, String contractorUuid) {
            this.onboardingStatus = onboardingStatus;
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ChangeOnboardingStatusRequestBuilder
         */
        public ChangeOnboardingStatusRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for changeOnboardingStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest = buildBodyParams();
            return changeOnboardingStatusCall(contractorUuid, xGustoAPIVersion, contractorsChangeOnboardingStatusRequest, _callback);
        }

        private ContractorsChangeOnboardingStatusRequest buildBodyParams() {
            ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest = new ContractorsChangeOnboardingStatusRequest();
            if (this.onboardingStatus != null)
            contractorsChangeOnboardingStatusRequest.onboardingStatus(ContractorsChangeOnboardingStatusRequest.OnboardingStatusEnum.fromValue(this.onboardingStatus));
            return contractorsChangeOnboardingStatusRequest;
        }

        /**
         * Execute changeOnboardingStatus request
         * @return ContractorOnboardingStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorOnboardingStatus execute() throws ApiException {
            ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest = buildBodyParams();
            ApiResponse<ContractorOnboardingStatus> localVarResp = changeOnboardingStatusWithHttpInfo(contractorUuid, xGustoAPIVersion, contractorsChangeOnboardingStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute changeOnboardingStatus request with HTTP info returned
         * @return ApiResponse&lt;ContractorOnboardingStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorOnboardingStatus> executeWithHttpInfo() throws ApiException {
            ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest = buildBodyParams();
            return changeOnboardingStatusWithHttpInfo(contractorUuid, xGustoAPIVersion, contractorsChangeOnboardingStatusRequest);
        }

        /**
         * Execute changeOnboardingStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorOnboardingStatus> _callback) throws ApiException {
            ContractorsChangeOnboardingStatusRequest contractorsChangeOnboardingStatusRequest = buildBodyParams();
            return changeOnboardingStatusAsync(contractorUuid, xGustoAPIVersion, contractorsChangeOnboardingStatusRequest, _callback);
        }
    }

    /**
     * Change the contractor&#39;s onboarding status
     * Updates a contractor&#39;s onboarding status.  scope: &#x60;contractors:write&#x60;  Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark a contractor as self-onboarding | &#x60;admin_onboarding_incomplete&#x60; | &#x60;self_onboarding_not_invited&#x60; | | Invite an employee to self-onboard | &#x60;admin_onboarding_incomplete&#x60; or &#x60;self_onboarding_not_invited&#x60; | &#x60;self_onboarding_invited&#x60; | | Cancel an employee&#39;s self-onboarding | &#x60;self_onboarding_invited&#x60; or &#x60;self_onboarding_not_invited&#x60; | &#x60;admin_onboarding_incomplete&#x60; | | Review an employee&#39;s self-onboarded info | &#x60;self_onboarding_started&#x60; | &#x60;self_onboarding_review&#x60; | | Finish an employee&#39;s onboarding | &#x60;admin_onboarding_incomplete&#x60; or &#x60;self_onboarding_review&#x60; | &#x60;onboarding_completed&#x60; |
     * @param contractorUuid The UUID of the contractor (required)
     * @return ChangeOnboardingStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ChangeOnboardingStatusRequestBuilder changeOnboardingStatus(String onboardingStatus, String contractorUuid) throws IllegalArgumentException {
        if (onboardingStatus == null) throw new IllegalArgumentException("\"onboardingStatus\" is required but got null");
            

        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new ChangeOnboardingStatusRequestBuilder(onboardingStatus, contractorUuid);
    }
    private okhttp3.Call createNewContractorCall(String companyId, String xGustoAPIVersion, ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorsCreateNewContractorRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/contractors"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewContractorValidateBeforeCall(String companyId, String xGustoAPIVersion, ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createNewContractor(Async)");
        }

        return createNewContractorCall(companyId, xGustoAPIVersion, contractorsCreateNewContractorRequest, _callback);

    }


    private ApiResponse<Contractor> createNewContractorWithHttpInfo(String companyId, String xGustoAPIVersion, ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewContractorValidateBeforeCall(companyId, xGustoAPIVersion, contractorsCreateNewContractorRequest, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewContractorAsync(String companyId, String xGustoAPIVersion, ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewContractorValidateBeforeCall(companyId, xGustoAPIVersion, contractorsCreateNewContractorRequest, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewContractorRequestBuilder {
        private final String companyId;
        private String type;
        private String wageType;
        private String startDate;
        private String hourlyRate;
        private Boolean selfOnboarding;
        private String email;
        private String firstName;
        private String lastName;
        private String middleInitial;
        private Boolean fileNewHireReport;
        private String workState;
        private String ssn;
        private String businessName;
        private String ein;
        private Boolean isActive;
        private String xGustoAPIVersion;
        private ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest;

        private CreateNewContractorRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set contractorsCreateNewContractorRequest
         * @param contractorsCreateNewContractorRequest Create an individual or business contractor. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder contractorsCreateNewContractorRequest(ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest) {
            this.contractorsCreateNewContractorRequest = contractorsCreateNewContractorRequest;
            return this;
        }

        /**
         * Set type
         * @param type The contractor type. (optional, default to Individual)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set wageType
         * @param wageType The contractor’s wage type.  (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder wageType(String wageType) {
            this.wageType = wageType;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The day when the contractor will start working for the company.  (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set hourlyRate
         * @param hourlyRate The contractor’s hourly rate. This attribute is required if the wage_type is &#x60;Hourly&#x60;. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder hourlyRate(String hourlyRate) {
            this.hourlyRate = hourlyRate;
            return this;
        }
        
        /**
         * Set selfOnboarding
         * @param selfOnboarding Whether the contractor or the payroll admin will complete onboarding in Gusto. Self-onboarding is recommended so that contractors receive Gusto accounts. If self_onboarding is true, then email is required. (optional, default to false)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder selfOnboarding(Boolean selfOnboarding) {
            this.selfOnboarding = selfOnboarding;
            return this;
        }
        
        /**
         * Set email
         * @param email The contractor’s email address. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The contractor’s first name. This attribute is required for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The contractor’s last name. This attribute is required for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set middleInitial
         * @param middleInitial The contractor’s middle initial. This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder middleInitial(String middleInitial) {
            this.middleInitial = middleInitial;
            return this;
        }
        
        /**
         * Set fileNewHireReport
         * @param fileNewHireReport The boolean flag indicating whether Gusto will file a new hire report for the contractor. This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional, default to false)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder fileNewHireReport(Boolean fileNewHireReport) {
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }
        
        /**
         * Set workState
         * @param workState State where the contractor will be conducting the majority of their work for the company. This value is used when generating the new hire report. This attribute is required for &#x60;Individual&#x60; contractors if &#x60;file_new_hire_report&#x60; is true and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder workState(String workState) {
            this.workState = workState;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. Social security number is needed to file the annual 1099 tax form. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set businessName
         * @param businessName The name of the contractor business. This attribute is required for &#x60;Business&#x60; contractors and will be ignored for &#x60;Individual&#x60; contractors. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder businessName(String businessName) {
            this.businessName = businessName;
            return this;
        }
        
        /**
         * Set ein
         * @param ein The employer identification number of the contractor business. This attribute is optional for &#x60;Business&#x60; contractors and will be ignored for &#x60;Individual&#x60; contractors. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder ein(String ein) {
            this.ein = ein;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive The status of the contractor. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateNewContractorRequestBuilder
         */
        public CreateNewContractorRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createNewContractor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest = buildBodyParams();
            return createNewContractorCall(companyId, xGustoAPIVersion, contractorsCreateNewContractorRequest, _callback);
        }

        private ContractorsCreateNewContractorRequest buildBodyParams() {
            return this.contractorsCreateNewContractorRequest;
        }

        /**
         * Execute createNewContractor request
         * @return Contractor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Contractor execute() throws ApiException {
            ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest = buildBodyParams();
            ApiResponse<Contractor> localVarResp = createNewContractorWithHttpInfo(companyId, xGustoAPIVersion, contractorsCreateNewContractorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewContractor request with HTTP info returned
         * @return ApiResponse&lt;Contractor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contractor> executeWithHttpInfo() throws ApiException {
            ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest = buildBodyParams();
            return createNewContractorWithHttpInfo(companyId, xGustoAPIVersion, contractorsCreateNewContractorRequest);
        }

        /**
         * Execute createNewContractor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contractor> _callback) throws ApiException {
            ContractorsCreateNewContractorRequest contractorsCreateNewContractorRequest = buildBodyParams();
            return createNewContractorAsync(companyId, xGustoAPIVersion, contractorsCreateNewContractorRequest, _callback);
        }
    }

    /**
     * Create a contractor
     * Create an individual or business contractor.  scope: &#x60;contractors:manage&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateNewContractorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewContractorRequestBuilder createNewContractor(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateNewContractorRequestBuilder(companyId);
    }
    private okhttp3.Call deleteContractorCall(String contractorId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_id}"
            .replace("{" + "contractor_id" + "}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContractorValidateBeforeCall(String contractorId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling deleteContractor(Async)");
        }

        return deleteContractorCall(contractorId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteContractorWithHttpInfo(String contractorId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteContractorValidateBeforeCall(contractorId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteContractorAsync(String contractorId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContractorValidateBeforeCall(contractorId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteContractorRequestBuilder {
        private final String contractorId;
        private String xGustoAPIVersion;

        private DeleteContractorRequestBuilder(String contractorId) {
            this.contractorId = contractorId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteContractorRequestBuilder
         */
        public DeleteContractorRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteContractor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContractorCall(contractorId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteContractor request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteContractorWithHttpInfo(contractorId, xGustoAPIVersion);
        }

        /**
         * Execute deleteContractor request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteContractorWithHttpInfo(contractorId, xGustoAPIVersion);
        }

        /**
         * Execute deleteContractor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteContractorAsync(contractorId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a contractor
     * A contractor can only be deleted when there are no contractor payments.  scope: &#x60;contractors:manage&#x60;
     * @param contractorId The UUID of the contractor (required)
     * @return DeleteContractorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteContractorRequestBuilder deleteContractor(String contractorId) throws IllegalArgumentException {
        if (contractorId == null) throw new IllegalArgumentException("\"contractorId\" is required but got null");
            

        return new DeleteContractorRequestBuilder(contractorId);
    }
    private okhttp3.Call getAddressCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/address"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling getAddress(Async)");
        }

        return getAddressCall(contractorUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<ContractorAddress> getAddressWithHttpInfo(String contractorUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAddressValidateBeforeCall(contractorUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<ContractorAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAddressAsync(String contractorUuid, String xGustoAPIVersion, final ApiCallback<ContractorAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressValidateBeforeCall(contractorUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<ContractorAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAddressRequestBuilder {
        private final String contractorUuid;
        private String xGustoAPIVersion;

        private GetAddressRequestBuilder(String contractorUuid) {
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAddressRequestBuilder
         */
        public GetAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAddressCall(contractorUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAddress request
         * @return ContractorAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorAddress execute() throws ApiException {
            ApiResponse<ContractorAddress> localVarResp = getAddressWithHttpInfo(contractorUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAddress request with HTTP info returned
         * @return ApiResponse&lt;ContractorAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorAddress> executeWithHttpInfo() throws ApiException {
            return getAddressWithHttpInfo(contractorUuid, xGustoAPIVersion);
        }

        /**
         * Execute getAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorAddress> _callback) throws ApiException {
            return getAddressAsync(contractorUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a contractor address
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: &#x60;contractors:read&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @return GetAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAddressRequestBuilder getAddress(String contractorUuid) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new GetAddressRequestBuilder(contractorUuid);
    }
    private okhttp3.Call getByIdCall(String contractorId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_id}"
            .replace("{" + "contractor_id" + "}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String contractorId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling getById(Async)");
        }

        return getByIdCall(contractorId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Contractor> getByIdWithHttpInfo(String contractorId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(contractorId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String contractorId, String xGustoAPIVersion, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(contractorId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String contractorId;
        private String xGustoAPIVersion;

        private GetByIdRequestBuilder(String contractorId) {
            this.contractorId = contractorId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(contractorId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getById request
         * @return Contractor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Contractor execute() throws ApiException {
            ApiResponse<Contractor> localVarResp = getByIdWithHttpInfo(contractorId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Contractor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contractor> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(contractorId, xGustoAPIVersion);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contractor> _callback) throws ApiException {
            return getByIdAsync(contractorId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a contractor
     * Get a contractor.  scope: &#x60;contractors:read&#x60;
     * @param contractorId The UUID of the contractor (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String contractorId) throws IllegalArgumentException {
        if (contractorId == null) throw new IllegalArgumentException("\"contractorId\" is required but got null");
            

        return new GetByIdRequestBuilder(contractorId);
    }
    private okhttp3.Call getCompanyContractorsCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/contractors"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyContractorsValidateBeforeCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompanyContractors(Async)");
        }

        return getCompanyContractorsCall(companyId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Contractor>> getCompanyContractorsWithHttpInfo(String companyId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCompanyContractorsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Contractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyContractorsAsync(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<List<Contractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyContractorsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Contractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyContractorsRequestBuilder {
        private final String companyId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetCompanyContractorsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetCompanyContractorsRequestBuilder
         */
        public GetCompanyContractorsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetCompanyContractorsRequestBuilder
         */
        public GetCompanyContractorsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompanyContractorsRequestBuilder
         */
        public GetCompanyContractorsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompanyContractors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyContractorsCall(companyId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCompanyContractors request
         * @return List&lt;Contractor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Contractor> execute() throws ApiException {
            ApiResponse<List<Contractor>> localVarResp = getCompanyContractorsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyContractors request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Contractor&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Contractor>> executeWithHttpInfo() throws ApiException {
            return getCompanyContractorsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getCompanyContractors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Contractor>> _callback) throws ApiException {
            return getCompanyContractorsAsync(companyId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get contractors of a company
     * Get all contractors, active and inactive, individual and business, for a company.  scope: &#x60;contractors:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetCompanyContractorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyContractorsRequestBuilder getCompanyContractors(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCompanyContractorsRequestBuilder(companyId);
    }
    private okhttp3.Call getOnboardingStatusCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/onboarding_status"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnboardingStatusValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling getOnboardingStatus(Async)");
        }

        return getOnboardingStatusCall(contractorUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<ContractorOnboardingStatus> getOnboardingStatusWithHttpInfo(String contractorUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getOnboardingStatusValidateBeforeCall(contractorUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<ContractorOnboardingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOnboardingStatusAsync(String contractorUuid, String xGustoAPIVersion, final ApiCallback<ContractorOnboardingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOnboardingStatusValidateBeforeCall(contractorUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<ContractorOnboardingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOnboardingStatusRequestBuilder {
        private final String contractorUuid;
        private String xGustoAPIVersion;

        private GetOnboardingStatusRequestBuilder(String contractorUuid) {
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetOnboardingStatusRequestBuilder
         */
        public GetOnboardingStatusRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getOnboardingStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOnboardingStatusCall(contractorUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getOnboardingStatus request
         * @return ContractorOnboardingStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorOnboardingStatus execute() throws ApiException {
            ApiResponse<ContractorOnboardingStatus> localVarResp = getOnboardingStatusWithHttpInfo(contractorUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOnboardingStatus request with HTTP info returned
         * @return ApiResponse&lt;ContractorOnboardingStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorOnboardingStatus> executeWithHttpInfo() throws ApiException {
            return getOnboardingStatusWithHttpInfo(contractorUuid, xGustoAPIVersion);
        }

        /**
         * Execute getOnboardingStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorOnboardingStatus> _callback) throws ApiException {
            return getOnboardingStatusAsync(contractorUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get the contractor&#39;s onboarding status
     * Retrieves a contractor&#39;s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: &#x60;contractors:read&#x60;  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | &#x60;admin_onboarding_incomplete&#x60; | Admin needs to enter basic information about the contractor. | | &#x60;admin_onboarding_review&#x60; | All information has been completed and admin needs to confirm onboarding. | | &#x60;onboarding_completed&#x60; | Contractor has been fully onboarded and verified. |  ### Contractor self-onboarding  | onboarding_status | Description | | --- | ----------- | | &#x60;admin_onboarding_incomplete&#x60; | Admin needs to enter basic information about the contractor. | | &#x60;self_onboarding_not_invited&#x60; | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | &#x60;self_onboarding_invited&#x60; | Contractor has been sent an invitation to self-onboard. | | &#x60;self_onboarding_started&#x60; | Contractor has started the self-onboarding process. | | &#x60;self_onboarding_review&#x60; | Admin needs to review contractors&#39;s entered information and confirm onboarding. | | &#x60;onboarding_completed&#x60; | Contractor has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | &#x60;basic_details&#x60; | Add individual contractor&#39;s first name, last name, social security number or Business name and EIN depending on the contractor type | | &#x60;add_address&#x60; | Add contractor address. | | &#x60;compensation_details&#x60; | Add contractor compensation. | | &#x60;payment_details&#x60; | Set up contractor&#39;s direct deposit or set to check. | | &#x60;sign_documents&#x60; | Contractor forms (e.g., W9) are generated &amp; signed. | | &#x60;file_new_hire_report&#x60; | Contractor new hire report is generated. |
     * @param contractorUuid The UUID of the contractor (required)
     * @return GetOnboardingStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetOnboardingStatusRequestBuilder getOnboardingStatus(String contractorUuid) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new GetOnboardingStatusRequestBuilder(contractorUuid);
    }
    private okhttp3.Call updateAddressCall(String contractorUuid, String xGustoAPIVersion, ContractorsUpdateAddressRequest contractorsUpdateAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorsUpdateAddressRequest;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_uuid}/address"
            .replace("{" + "contractor_uuid" + "}", localVarApiClient.escapeString(contractorUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAddressValidateBeforeCall(String contractorUuid, String xGustoAPIVersion, ContractorsUpdateAddressRequest contractorsUpdateAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorUuid' is set
        if (contractorUuid == null) {
            throw new ApiException("Missing the required parameter 'contractorUuid' when calling updateAddress(Async)");
        }

        return updateAddressCall(contractorUuid, xGustoAPIVersion, contractorsUpdateAddressRequest, _callback);

    }


    private ApiResponse<ContractorAddress> updateAddressWithHttpInfo(String contractorUuid, String xGustoAPIVersion, ContractorsUpdateAddressRequest contractorsUpdateAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(contractorUuid, xGustoAPIVersion, contractorsUpdateAddressRequest, null);
        Type localVarReturnType = new TypeToken<ContractorAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAddressAsync(String contractorUuid, String xGustoAPIVersion, ContractorsUpdateAddressRequest contractorsUpdateAddressRequest, final ApiCallback<ContractorAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(contractorUuid, xGustoAPIVersion, contractorsUpdateAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractorAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAddressRequestBuilder {
        private final String contractorUuid;
        private String version;
        private String street1;
        private String street2;
        private String city;
        private String state;
        private String zip;
        private String xGustoAPIVersion;

        private UpdateAddressRequestBuilder(String contractorUuid) {
            this.contractorUuid = contractorUuid;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field. (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set street1
         * @param street1  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder street1(String street1) {
            this.street1 = street1;
            return this;
        }
        
        /**
         * Set street2
         * @param street2  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder street2(String street2) {
            this.street2 = street2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorsUpdateAddressRequest contractorsUpdateAddressRequest = buildBodyParams();
            return updateAddressCall(contractorUuid, xGustoAPIVersion, contractorsUpdateAddressRequest, _callback);
        }

        private ContractorsUpdateAddressRequest buildBodyParams() {
            ContractorsUpdateAddressRequest contractorsUpdateAddressRequest = new ContractorsUpdateAddressRequest();
            return contractorsUpdateAddressRequest;
        }

        /**
         * Execute updateAddress request
         * @return ContractorAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ContractorAddress execute() throws ApiException {
            ContractorsUpdateAddressRequest contractorsUpdateAddressRequest = buildBodyParams();
            ApiResponse<ContractorAddress> localVarResp = updateAddressWithHttpInfo(contractorUuid, xGustoAPIVersion, contractorsUpdateAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAddress request with HTTP info returned
         * @return ApiResponse&lt;ContractorAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractorAddress> executeWithHttpInfo() throws ApiException {
            ContractorsUpdateAddressRequest contractorsUpdateAddressRequest = buildBodyParams();
            return updateAddressWithHttpInfo(contractorUuid, xGustoAPIVersion, contractorsUpdateAddressRequest);
        }

        /**
         * Execute updateAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractorAddress> _callback) throws ApiException {
            ContractorsUpdateAddressRequest contractorsUpdateAddressRequest = buildBodyParams();
            return updateAddressAsync(contractorUuid, xGustoAPIVersion, contractorsUpdateAddressRequest, _callback);
        }
    }

    /**
     * Update a contractor&#39;s address
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: &#x60;contractors:write&#x60;
     * @param contractorUuid The UUID of the contractor (required)
     * @return UpdateAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAddressRequestBuilder updateAddress(String contractorUuid) throws IllegalArgumentException {
        if (contractorUuid == null) throw new IllegalArgumentException("\"contractorUuid\" is required but got null");
            

        return new UpdateAddressRequestBuilder(contractorUuid);
    }
    private okhttp3.Call updateContractorCall(String contractorId, String xGustoAPIVersion, ContractorsUpdateContractorRequest contractorsUpdateContractorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorsUpdateContractorRequest;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_id}"
            .replace("{" + "contractor_id" + "}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContractorValidateBeforeCall(String contractorId, String xGustoAPIVersion, ContractorsUpdateContractorRequest contractorsUpdateContractorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling updateContractor(Async)");
        }

        return updateContractorCall(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, _callback);

    }


    private ApiResponse<Contractor> updateContractorWithHttpInfo(String contractorId, String xGustoAPIVersion, ContractorsUpdateContractorRequest contractorsUpdateContractorRequest) throws ApiException {
        okhttp3.Call localVarCall = updateContractorValidateBeforeCall(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateContractorAsync(String contractorId, String xGustoAPIVersion, ContractorsUpdateContractorRequest contractorsUpdateContractorRequest, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContractorValidateBeforeCall(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateContractorRequestBuilder {
        private final String contractorId;
        private String version;
        private String type;
        private String wageType;
        private String startDate;
        private String hourlyRate;
        private Boolean selfOnboarding;
        private String email;
        private String firstName;
        private String lastName;
        private String middleInitial;
        private Boolean fileNewHireReport;
        private String workState;
        private String ssn;
        private String businessName;
        private String ein;
        private Boolean isActive;
        private String xGustoAPIVersion;

        private UpdateContractorRequestBuilder(String contractorId) {
            this.contractorId = contractorId;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set type
         * @param type The contractor type. (optional, default to Individual)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set wageType
         * @param wageType The contractor’s wage type.  (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder wageType(String wageType) {
            this.wageType = wageType;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The day when the contractor will start working for the company.  (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set hourlyRate
         * @param hourlyRate The contractor’s hourly rate. This attribute is required if the wage_type is &#x60;Hourly&#x60;. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder hourlyRate(String hourlyRate) {
            this.hourlyRate = hourlyRate;
            return this;
        }
        
        /**
         * Set selfOnboarding
         * @param selfOnboarding Whether the contractor or the payroll admin will complete onboarding in Gusto. Self-onboarding is recommended so that contractors receive Gusto accounts. If self_onboarding is true, then email is required. (optional, default to false)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder selfOnboarding(Boolean selfOnboarding) {
            this.selfOnboarding = selfOnboarding;
            return this;
        }
        
        /**
         * Set email
         * @param email The contractor’s email address. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The contractor’s first name. This attribute is required for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The contractor’s last name. This attribute is required for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set middleInitial
         * @param middleInitial The contractor’s middle initial. This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder middleInitial(String middleInitial) {
            this.middleInitial = middleInitial;
            return this;
        }
        
        /**
         * Set fileNewHireReport
         * @param fileNewHireReport The boolean flag indicating whether Gusto will file a new hire report for the contractor. This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional, default to false)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder fileNewHireReport(Boolean fileNewHireReport) {
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }
        
        /**
         * Set workState
         * @param workState State where the contractor will be conducting the majority of their work for the company. This value is used when generating the new hire report. This attribute is required for &#x60;Individual&#x60; contractors if &#x60;file_new_hire_report&#x60; is true and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder workState(String workState) {
            this.workState = workState;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. Social security number is needed to file the annual 1099 tax form. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set businessName
         * @param businessName The name of the contractor business. This attribute is required for &#x60;Business&#x60; contractors and will be ignored for &#x60;Individual&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder businessName(String businessName) {
            this.businessName = businessName;
            return this;
        }
        
        /**
         * Set ein
         * @param ein The employer identification number of the contractor business. This attribute is optional for &#x60;Business&#x60; contractors and will be ignored for &#x60;Individual&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder ein(String ein) {
            this.ein = ein;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive The status of the contractor. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateContractor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = buildBodyParams();
            return updateContractorCall(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, _callback);
        }

        private ContractorsUpdateContractorRequest buildBodyParams() {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = new ContractorsUpdateContractorRequest();
            return contractorsUpdateContractorRequest;
        }

        /**
         * Execute updateContractor request
         * @return Contractor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Contractor execute() throws ApiException {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = buildBodyParams();
            ApiResponse<Contractor> localVarResp = updateContractorWithHttpInfo(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateContractor request with HTTP info returned
         * @return ApiResponse&lt;Contractor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contractor> executeWithHttpInfo() throws ApiException {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = buildBodyParams();
            return updateContractorWithHttpInfo(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest);
        }

        /**
         * Execute updateContractor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contractor> _callback) throws ApiException {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = buildBodyParams();
            return updateContractorAsync(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, _callback);
        }
    }

    /**
     * Update a contractor
     * Update a contractor.  scope: &#x60;contractors:write&#x60;  &gt; 🚧 Warning &gt; &gt; Watch out when changing a contractor&#39;s type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
     * @param contractorId The UUID of the contractor (required)
     * @return UpdateContractorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContractorRequestBuilder updateContractor(String contractorId) throws IllegalArgumentException {
        if (contractorId == null) throw new IllegalArgumentException("\"contractorId\" is required but got null");
            

        return new UpdateContractorRequestBuilder(contractorId);
    }
}
