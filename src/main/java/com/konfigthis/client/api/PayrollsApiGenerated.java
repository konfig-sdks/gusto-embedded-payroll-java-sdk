/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeePayStub;
import com.konfigthis.client.model.GrossUpPay;
import com.konfigthis.client.model.Payroll;
import com.konfigthis.client.model.PayrollBlocker;
import com.konfigthis.client.model.PayrollCheck;
import com.konfigthis.client.model.PayrollMinimal;
import com.konfigthis.client.model.PayrollPrepared;
import com.konfigthis.client.model.PayrollReceipt;
import com.konfigthis.client.model.PayrollReversal;
import com.konfigthis.client.model.PayrollsCalculateGrossUpRequest;
import com.konfigthis.client.model.PayrollsCreateOffCyclePayrollRequest;
import com.konfigthis.client.model.PayrollsGeneratePrintableChecksRequest;
import com.konfigthis.client.model.PayrollsSkipPayrollRequest;
import com.konfigthis.client.model.PayrollsUpdatePayrollByIdRequest;
import com.konfigthis.client.model.PayrollsUpdatePayrollByIdRequestEmployeeCompensationsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayrollsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayrollsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approvedReversalsCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payroll_reversals"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approvedReversalsValidateBeforeCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling approvedReversals(Async)");
        }

        return approvedReversalsCall(companyId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PayrollReversal> approvedReversalsWithHttpInfo(String companyId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = approvedReversalsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PayrollReversal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approvedReversalsAsync(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<PayrollReversal> _callback) throws ApiException {

        okhttp3.Call localVarCall = approvedReversalsValidateBeforeCall(companyId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PayrollReversal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApprovedReversalsRequestBuilder {
        private final String companyId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private ApprovedReversalsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return ApprovedReversalsRequestBuilder
         */
        public ApprovedReversalsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return ApprovedReversalsRequestBuilder
         */
        public ApprovedReversalsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ApprovedReversalsRequestBuilder
         */
        public ApprovedReversalsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for approvedReversals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return approvedReversalsCall(companyId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute approvedReversals request
         * @return PayrollReversal
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayrollReversal execute() throws ApiException {
            ApiResponse<PayrollReversal> localVarResp = approvedReversalsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approvedReversals request with HTTP info returned
         * @return ApiResponse&lt;PayrollReversal&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollReversal> executeWithHttpInfo() throws ApiException {
            return approvedReversalsWithHttpInfo(companyId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute approvedReversals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollReversal> _callback) throws ApiException {
            return approvedReversalsAsync(companyId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get approved payroll reversals
     * Returns all approved Payroll Reversals for a Company.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return ApprovedReversalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ApprovedReversalsRequestBuilder approvedReversals(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ApprovedReversalsRequestBuilder(companyId);
    }
    private okhttp3.Call calculateGrossUpCall(String payrollUuid, String xGustoAPIVersion, PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollsCalculateGrossUpRequest;

        // create path and map variables
        String localVarPath = "/v1/payrolls/{payroll_uuid}/gross_up"
            .replace("{" + "payroll_uuid" + "}", localVarApiClient.escapeString(payrollUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateGrossUpValidateBeforeCall(String payrollUuid, String xGustoAPIVersion, PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payrollUuid' is set
        if (payrollUuid == null) {
            throw new ApiException("Missing the required parameter 'payrollUuid' when calling calculateGrossUp(Async)");
        }

        return calculateGrossUpCall(payrollUuid, xGustoAPIVersion, payrollsCalculateGrossUpRequest, _callback);

    }


    private ApiResponse<GrossUpPay> calculateGrossUpWithHttpInfo(String payrollUuid, String xGustoAPIVersion, PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest) throws ApiException {
        okhttp3.Call localVarCall = calculateGrossUpValidateBeforeCall(payrollUuid, xGustoAPIVersion, payrollsCalculateGrossUpRequest, null);
        Type localVarReturnType = new TypeToken<GrossUpPay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateGrossUpAsync(String payrollUuid, String xGustoAPIVersion, PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest, final ApiCallback<GrossUpPay> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateGrossUpValidateBeforeCall(payrollUuid, xGustoAPIVersion, payrollsCalculateGrossUpRequest, _callback);
        Type localVarReturnType = new TypeToken<GrossUpPay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateGrossUpRequestBuilder {
        private final String employeeUuid;
        private final String netPay;
        private final String payrollUuid;
        private String xGustoAPIVersion;

        private CalculateGrossUpRequestBuilder(String employeeUuid, String netPay, String payrollUuid) {
            this.employeeUuid = employeeUuid;
            this.netPay = netPay;
            this.payrollUuid = payrollUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CalculateGrossUpRequestBuilder
         */
        public CalculateGrossUpRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for calculateGrossUp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest = buildBodyParams();
            return calculateGrossUpCall(payrollUuid, xGustoAPIVersion, payrollsCalculateGrossUpRequest, _callback);
        }

        private PayrollsCalculateGrossUpRequest buildBodyParams() {
            PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest = new PayrollsCalculateGrossUpRequest();
            payrollsCalculateGrossUpRequest.employeeUuid(this.employeeUuid);
            payrollsCalculateGrossUpRequest.netPay(this.netPay);
            return payrollsCalculateGrossUpRequest;
        }

        /**
         * Execute calculateGrossUp request
         * @return GrossUpPay
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public GrossUpPay execute() throws ApiException {
            PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest = buildBodyParams();
            ApiResponse<GrossUpPay> localVarResp = calculateGrossUpWithHttpInfo(payrollUuid, xGustoAPIVersion, payrollsCalculateGrossUpRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateGrossUp request with HTTP info returned
         * @return ApiResponse&lt;GrossUpPay&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GrossUpPay> executeWithHttpInfo() throws ApiException {
            PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest = buildBodyParams();
            return calculateGrossUpWithHttpInfo(payrollUuid, xGustoAPIVersion, payrollsCalculateGrossUpRequest);
        }

        /**
         * Execute calculateGrossUp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GrossUpPay> _callback) throws ApiException {
            PayrollsCalculateGrossUpRequest payrollsCalculateGrossUpRequest = buildBodyParams();
            return calculateGrossUpAsync(payrollUuid, xGustoAPIVersion, payrollsCalculateGrossUpRequest, _callback);
        }
    }

    /**
     * Calculate gross up
     * Calculates gross up earnings for an employee&#39;s payroll, given net earnings. This endpoint is only applicable to off-cycle unprocessed payrolls.  The gross up amount must then be mapped to the corresponding fixed compensation earning type to get the correct payroll amount. For example, for bonus off-cycles, the gross up amount should be set with the Bonus earning type in the payroll &#x60;fixed_compensations&#x60; field.  scope: &#x60;payrolls:run&#x60;
     * @param payrollUuid The UUID of the payroll (required)
     * @return CalculateGrossUpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CalculateGrossUpRequestBuilder calculateGrossUp(String employeeUuid, String netPay, String payrollUuid) throws IllegalArgumentException {
        if (employeeUuid == null) throw new IllegalArgumentException("\"employeeUuid\" is required but got null");
            

        if (netPay == null) throw new IllegalArgumentException("\"netPay\" is required but got null");
            

        if (payrollUuid == null) throw new IllegalArgumentException("\"payrollUuid\" is required but got null");
            

        return new CalculateGrossUpRequestBuilder(employeeUuid, netPay, payrollUuid);
    }
    private okhttp3.Call calculateGrossUp_0Call(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}/calculate"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateGrossUp_0ValidateBeforeCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling calculateGrossUp_0(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling calculateGrossUp_0(Async)");
        }

        return calculateGrossUp_0Call(companyId, payrollId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> calculateGrossUp_0WithHttpInfo(String companyId, String payrollId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = calculateGrossUp_0ValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call calculateGrossUp_0Async(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateGrossUp_0ValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CalculateGrossUp0RequestBuilder {
        private final String companyId;
        private final String payrollId;
        private String xGustoAPIVersion;

        private CalculateGrossUp0RequestBuilder(String companyId, String payrollId) {
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CalculateGrossUp0RequestBuilder
         */
        public CalculateGrossUp0RequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for calculateGrossUp_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return calculateGrossUp_0Call(companyId, payrollId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute calculateGrossUp_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            calculateGrossUp_0WithHttpInfo(companyId, payrollId, xGustoAPIVersion);
        }

        /**
         * Execute calculateGrossUp_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return calculateGrossUp_0WithHttpInfo(companyId, payrollId, xGustoAPIVersion);
        }

        /**
         * Execute calculateGrossUp_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return calculateGrossUp_0Async(companyId, payrollId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Calculate a payroll
     * Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.  This calculation is asynchronous and a successful request responds with a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with *include&#x3D;taxes,benefits,deductions* params. In v2023-04-01, *show_calculation&#x3D;true* is no longer required.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return CalculateGrossUp0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CalculateGrossUp0RequestBuilder calculateGrossUp_0(String companyId, String payrollId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new CalculateGrossUp0RequestBuilder(companyId, payrollId);
    }
    private okhttp3.Call cancelPayrollTransitionCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}/cancel"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPayrollTransitionValidateBeforeCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling cancelPayrollTransition(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling cancelPayrollTransition(Async)");
        }

        return cancelPayrollTransitionCall(companyId, payrollId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Payroll> cancelPayrollTransitionWithHttpInfo(String companyId, String payrollId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = cancelPayrollTransitionValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Payroll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelPayrollTransitionAsync(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback<Payroll> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPayrollTransitionValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Payroll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelPayrollTransitionRequestBuilder {
        private final String companyId;
        private final String payrollId;
        private String xGustoAPIVersion;

        private CancelPayrollTransitionRequestBuilder(String companyId, String payrollId) {
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CancelPayrollTransitionRequestBuilder
         */
        public CancelPayrollTransitionRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for cancelPayrollTransition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelPayrollTransitionCall(companyId, payrollId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute cancelPayrollTransition request
         * @return Payroll
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Payroll execute() throws ApiException {
            ApiResponse<Payroll> localVarResp = cancelPayrollTransitionWithHttpInfo(companyId, payrollId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelPayrollTransition request with HTTP info returned
         * @return ApiResponse&lt;Payroll&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Payroll> executeWithHttpInfo() throws ApiException {
            return cancelPayrollTransitionWithHttpInfo(companyId, payrollId, xGustoAPIVersion);
        }

        /**
         * Execute cancelPayrollTransition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Payroll> _callback) throws ApiException {
            return cancelPayrollTransitionAsync(companyId, payrollId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Cancel a payroll
     * Transitions a &#x60;processed&#x60; payroll back to the &#x60;unprocessed&#x60; state. A payroll can be canceled if it meets both criteria: - &#x60;processed&#x60; is true - Current time is earlier than 3:30pm PT on the payroll_deadline  scope: &#x60;payrolls:run&#x60; 
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return CancelPayrollTransitionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CancelPayrollTransitionRequestBuilder cancelPayrollTransition(String companyId, String payrollId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new CancelPayrollTransitionRequestBuilder(companyId, payrollId);
    }
    private okhttp3.Call createOffCyclePayrollCall(String companyId, String xGustoAPIVersion, PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollsCreateOffCyclePayrollRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOffCyclePayrollValidateBeforeCall(String companyId, String xGustoAPIVersion, PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createOffCyclePayroll(Async)");
        }

        return createOffCyclePayrollCall(companyId, xGustoAPIVersion, payrollsCreateOffCyclePayrollRequest, _callback);

    }


    private ApiResponse<PayrollPrepared> createOffCyclePayrollWithHttpInfo(String companyId, String xGustoAPIVersion, PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest) throws ApiException {
        okhttp3.Call localVarCall = createOffCyclePayrollValidateBeforeCall(companyId, xGustoAPIVersion, payrollsCreateOffCyclePayrollRequest, null);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOffCyclePayrollAsync(String companyId, String xGustoAPIVersion, PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest, final ApiCallback<PayrollPrepared> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOffCyclePayrollValidateBeforeCall(companyId, xGustoAPIVersion, payrollsCreateOffCyclePayrollRequest, _callback);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOffCyclePayrollRequestBuilder {
        private final Boolean offCycle;
        private final String offCycleReason;
        private final String startDate;
        private final String endDate;
        private final String companyId;
        private String payScheduleUuid;
        private List<String> employeeUuids;
        private String checkDate;
        private String withholdingPayPeriod;
        private Boolean skipRegularDeductions;
        private Boolean fixedWithholdingRate;
        private String xGustoAPIVersion;

        private CreateOffCyclePayrollRequestBuilder(Boolean offCycle, String offCycleReason, String startDate, String endDate, String companyId) {
            this.offCycle = offCycle;
            this.offCycleReason = offCycleReason;
            this.startDate = startDate;
            this.endDate = endDate;
            this.companyId = companyId;
        }

        /**
         * Set payScheduleUuid
         * @param payScheduleUuid A pay schedule is required for Transition from old pay schedule payroll to identify the matching transition pay period. (optional)
         * @return CreateOffCyclePayrollRequestBuilder
         */
        public CreateOffCyclePayrollRequestBuilder payScheduleUuid(String payScheduleUuid) {
            this.payScheduleUuid = payScheduleUuid;
            return this;
        }
        
        /**
         * Set employeeUuids
         * @param employeeUuids A list of employee uuids to include on the payroll. (optional)
         * @return CreateOffCyclePayrollRequestBuilder
         */
        public CreateOffCyclePayrollRequestBuilder employeeUuids(List<String> employeeUuids) {
            this.employeeUuids = employeeUuids;
            return this;
        }
        
        /**
         * Set checkDate
         * @param checkDate Payment date. (optional)
         * @return CreateOffCyclePayrollRequestBuilder
         */
        public CreateOffCyclePayrollRequestBuilder checkDate(String checkDate) {
            this.checkDate = checkDate;
            return this;
        }
        
        /**
         * Set withholdingPayPeriod
         * @param withholdingPayPeriod The payment schedule tax rate the payroll is based on (optional)
         * @return CreateOffCyclePayrollRequestBuilder
         */
        public CreateOffCyclePayrollRequestBuilder withholdingPayPeriod(String withholdingPayPeriod) {
            this.withholdingPayPeriod = withholdingPayPeriod;
            return this;
        }
        
        /**
         * Set skipRegularDeductions
         * @param skipRegularDeductions Block regular deductions and contributions for this payroll. (optional)
         * @return CreateOffCyclePayrollRequestBuilder
         */
        public CreateOffCyclePayrollRequestBuilder skipRegularDeductions(Boolean skipRegularDeductions) {
            this.skipRegularDeductions = skipRegularDeductions;
            return this;
        }
        
        /**
         * Set fixedWithholdingRate
         * @param fixedWithholdingRate Enable taxes to be withheld at the IRS&#39;s required rate of 22% for federal income taxes. State income taxes will be taxed at the state&#39;s supplemental tax rate. Otherwise, we&#39;ll sum the entirety of the employee&#39;s wages and withhold taxes on the entire amount at the rate for regular wages. (optional)
         * @return CreateOffCyclePayrollRequestBuilder
         */
        public CreateOffCyclePayrollRequestBuilder fixedWithholdingRate(Boolean fixedWithholdingRate) {
            this.fixedWithholdingRate = fixedWithholdingRate;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateOffCyclePayrollRequestBuilder
         */
        public CreateOffCyclePayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createOffCyclePayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest = buildBodyParams();
            return createOffCyclePayrollCall(companyId, xGustoAPIVersion, payrollsCreateOffCyclePayrollRequest, _callback);
        }

        private PayrollsCreateOffCyclePayrollRequest buildBodyParams() {
            PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest = new PayrollsCreateOffCyclePayrollRequest();
            payrollsCreateOffCyclePayrollRequest.offCycle(this.offCycle);
            if (this.offCycleReason != null)
            payrollsCreateOffCyclePayrollRequest.offCycleReason(PayrollsCreateOffCyclePayrollRequest.OffCycleReasonEnum.fromValue(this.offCycleReason));
            payrollsCreateOffCyclePayrollRequest.startDate(this.startDate);
            payrollsCreateOffCyclePayrollRequest.endDate(this.endDate);
            payrollsCreateOffCyclePayrollRequest.payScheduleUuid(this.payScheduleUuid);
            payrollsCreateOffCyclePayrollRequest.employeeUuids(this.employeeUuids);
            payrollsCreateOffCyclePayrollRequest.checkDate(this.checkDate);
            if (this.withholdingPayPeriod != null)
            payrollsCreateOffCyclePayrollRequest.withholdingPayPeriod(PayrollsCreateOffCyclePayrollRequest.WithholdingPayPeriodEnum.fromValue(this.withholdingPayPeriod));
            payrollsCreateOffCyclePayrollRequest.skipRegularDeductions(this.skipRegularDeductions);
            payrollsCreateOffCyclePayrollRequest.fixedWithholdingRate(this.fixedWithholdingRate);
            return payrollsCreateOffCyclePayrollRequest;
        }

        /**
         * Execute createOffCyclePayroll request
         * @return PayrollPrepared
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayrollPrepared execute() throws ApiException {
            PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest = buildBodyParams();
            ApiResponse<PayrollPrepared> localVarResp = createOffCyclePayrollWithHttpInfo(companyId, xGustoAPIVersion, payrollsCreateOffCyclePayrollRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOffCyclePayroll request with HTTP info returned
         * @return ApiResponse&lt;PayrollPrepared&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollPrepared> executeWithHttpInfo() throws ApiException {
            PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest = buildBodyParams();
            return createOffCyclePayrollWithHttpInfo(companyId, xGustoAPIVersion, payrollsCreateOffCyclePayrollRequest);
        }

        /**
         * Execute createOffCyclePayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollPrepared> _callback) throws ApiException {
            PayrollsCreateOffCyclePayrollRequest payrollsCreateOffCyclePayrollRequest = buildBodyParams();
            return createOffCyclePayrollAsync(companyId, xGustoAPIVersion, payrollsCreateOffCyclePayrollRequest, _callback);
        }
    }

    /**
     * Create an off-cycle payroll
     * Creates a new, unprocessed, off-cycle payroll.  ## &#x60;off_cycle_reason&#x60; - External benefits and deductions will be included when the &#x60;off_cycle_reason&#x60; is set to &#x60;Correction&#x60;. - All benefits and deductions are blocked when the &#x60;off_cycle_reason&#x60; is set to &#x60;Bonus&#x60;.  scope: &#x60;payrolls:run&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateOffCyclePayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOffCyclePayrollRequestBuilder createOffCyclePayroll(Boolean offCycle, String offCycleReason, String startDate, String endDate, String companyId) throws IllegalArgumentException {
        if (offCycle == null) throw new IllegalArgumentException("\"offCycle\" is required but got null");
        if (offCycleReason == null) throw new IllegalArgumentException("\"offCycleReason\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateOffCyclePayrollRequestBuilder(offCycle, offCycleReason, startDate, endDate, companyId);
    }
    private okhttp3.Call deleteUnprocessedPayrollCall(String companyId, String payrollId, Boolean async, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUnprocessedPayrollValidateBeforeCall(String companyId, String payrollId, Boolean async, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteUnprocessedPayroll(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling deleteUnprocessedPayroll(Async)");
        }

        return deleteUnprocessedPayrollCall(companyId, payrollId, async, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteUnprocessedPayrollWithHttpInfo(String companyId, String payrollId, Boolean async, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteUnprocessedPayrollValidateBeforeCall(companyId, payrollId, async, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUnprocessedPayrollAsync(String companyId, String payrollId, Boolean async, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUnprocessedPayrollValidateBeforeCall(companyId, payrollId, async, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteUnprocessedPayrollRequestBuilder {
        private final String companyId;
        private final String payrollId;
        private Boolean async;
        private String xGustoAPIVersion;

        private DeleteUnprocessedPayrollRequestBuilder(String companyId, String payrollId) {
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set async
         * @param async When true, request an asynchronous delete of the payroll. (optional)
         * @return DeleteUnprocessedPayrollRequestBuilder
         */
        public DeleteUnprocessedPayrollRequestBuilder async(Boolean async) {
            this.async = async;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteUnprocessedPayrollRequestBuilder
         */
        public DeleteUnprocessedPayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteUnprocessedPayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUnprocessedPayrollCall(companyId, payrollId, async, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteUnprocessedPayroll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUnprocessedPayrollWithHttpInfo(companyId, payrollId, async, xGustoAPIVersion);
        }

        /**
         * Execute deleteUnprocessedPayroll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUnprocessedPayrollWithHttpInfo(companyId, payrollId, async, xGustoAPIVersion);
        }

        /**
         * Execute deleteUnprocessedPayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUnprocessedPayrollAsync(companyId, payrollId, async, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a payroll
     * This endpoint allows you to delete an **unprocessed** payroll.  By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the &#x60;async&#x3D;true&#x60; query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return &#x60;204/No Content&#x60;. When a payroll has been enqueued for asynchronous deletion, &#x60;202/Accepted&#x60; will be returned.  scope: &#x60;payrolls:run&#x60;
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return DeleteUnprocessedPayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUnprocessedPayrollRequestBuilder deleteUnprocessedPayroll(String companyId, String payrollId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new DeleteUnprocessedPayrollRequestBuilder(companyId, payrollId);
    }
    private okhttp3.Call generatePrintableChecksCall(String payrollId, String xGustoAPIVersion, PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollsGeneratePrintableChecksRequest;

        // create path and map variables
        String localVarPath = "/v1/payrolls/{payroll_id}/generated_documents/printable_payroll_checks"
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePrintableChecksValidateBeforeCall(String payrollId, String xGustoAPIVersion, PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling generatePrintableChecks(Async)");
        }

        return generatePrintableChecksCall(payrollId, xGustoAPIVersion, payrollsGeneratePrintableChecksRequest, _callback);

    }


    private ApiResponse<PayrollCheck> generatePrintableChecksWithHttpInfo(String payrollId, String xGustoAPIVersion, PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest) throws ApiException {
        okhttp3.Call localVarCall = generatePrintableChecksValidateBeforeCall(payrollId, xGustoAPIVersion, payrollsGeneratePrintableChecksRequest, null);
        Type localVarReturnType = new TypeToken<PayrollCheck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePrintableChecksAsync(String payrollId, String xGustoAPIVersion, PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest, final ApiCallback<PayrollCheck> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePrintableChecksValidateBeforeCall(payrollId, xGustoAPIVersion, payrollsGeneratePrintableChecksRequest, _callback);
        Type localVarReturnType = new TypeToken<PayrollCheck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GeneratePrintableChecksRequestBuilder {
        private final String printingFormat;
        private final String payrollId;
        private Integer startingCheckNumber;
        private String xGustoAPIVersion;

        private GeneratePrintableChecksRequestBuilder(String printingFormat, String payrollId) {
            this.printingFormat = printingFormat;
            this.payrollId = payrollId;
        }

        /**
         * Set startingCheckNumber
         * @param startingCheckNumber The starting check number for the checks being generated (optional)
         * @return GeneratePrintableChecksRequestBuilder
         */
        public GeneratePrintableChecksRequestBuilder startingCheckNumber(Integer startingCheckNumber) {
            this.startingCheckNumber = startingCheckNumber;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GeneratePrintableChecksRequestBuilder
         */
        public GeneratePrintableChecksRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for generatePrintableChecks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest = buildBodyParams();
            return generatePrintableChecksCall(payrollId, xGustoAPIVersion, payrollsGeneratePrintableChecksRequest, _callback);
        }

        private PayrollsGeneratePrintableChecksRequest buildBodyParams() {
            PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest = new PayrollsGeneratePrintableChecksRequest();
            payrollsGeneratePrintableChecksRequest.printingFormat(this.printingFormat);
            payrollsGeneratePrintableChecksRequest.startingCheckNumber(this.startingCheckNumber);
            return payrollsGeneratePrintableChecksRequest;
        }

        /**
         * Execute generatePrintableChecks request
         * @return PayrollCheck
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayrollCheck execute() throws ApiException {
            PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest = buildBodyParams();
            ApiResponse<PayrollCheck> localVarResp = generatePrintableChecksWithHttpInfo(payrollId, xGustoAPIVersion, payrollsGeneratePrintableChecksRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generatePrintableChecks request with HTTP info returned
         * @return ApiResponse&lt;PayrollCheck&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollCheck> executeWithHttpInfo() throws ApiException {
            PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest = buildBodyParams();
            return generatePrintableChecksWithHttpInfo(payrollId, xGustoAPIVersion, payrollsGeneratePrintableChecksRequest);
        }

        /**
         * Execute generatePrintableChecks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollCheck> _callback) throws ApiException {
            PayrollsGeneratePrintableChecksRequest payrollsGeneratePrintableChecksRequest = buildBodyParams();
            return generatePrintableChecksAsync(payrollId, xGustoAPIVersion, payrollsGeneratePrintableChecksRequest, _callback);
        }
    }

    /**
     * Generate payroll printable checks (pdf)
     * This endpoint initiates the generation of employee checks for the payroll specified by payroll_id. A generation status and corresponding generated document request_uuid will be returned. Use the generated document GET endpoint with document_type: &#x60;printable_payroll_checks&#x60; and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.  scope: &#x60;generated_documents:write&#x60;
     * @param payrollId The UUID of the payroll (required)
     * @return GeneratePrintableChecksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePrintableChecksRequestBuilder generatePrintableChecks(String printingFormat, String payrollId) throws IllegalArgumentException {
        if (printingFormat == null) throw new IllegalArgumentException("\"printingFormat\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new GeneratePrintableChecksRequestBuilder(printingFormat, payrollId);
    }
    private okhttp3.Call getAllPayrollBlockersCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/payrolls/blockers"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPayrollBlockersValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling getAllPayrollBlockers(Async)");
        }

        return getAllPayrollBlockersCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<PayrollBlocker>> getAllPayrollBlockersWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllPayrollBlockersValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<PayrollBlocker>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPayrollBlockersAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<List<PayrollBlocker>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPayrollBlockersValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<PayrollBlocker>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPayrollBlockersRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private GetAllPayrollBlockersRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllPayrollBlockersRequestBuilder
         */
        public GetAllPayrollBlockersRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAllPayrollBlockers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPayrollBlockersCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAllPayrollBlockers request
         * @return List&lt;PayrollBlocker&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<PayrollBlocker> execute() throws ApiException {
            ApiResponse<List<PayrollBlocker>> localVarResp = getAllPayrollBlockersWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPayrollBlockers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayrollBlocker&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayrollBlocker>> executeWithHttpInfo() throws ApiException {
            return getAllPayrollBlockersWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute getAllPayrollBlockers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayrollBlocker>> _callback) throws ApiException {
            return getAllPayrollBlockersAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all payroll blockers for a company
     * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.  The list is empty if there are no payroll blockers.  scope: &#x60;payrolls:run&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return GetAllPayrollBlockersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPayrollBlockersRequestBuilder getAllPayrollBlockers(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new GetAllPayrollBlockersRequestBuilder(companyUuid);
    }
    private okhttp3.Call getCompanyPayrollsCall(String companyId, String processingStatuses, String payrollTypes, String include, String startDate, String endDate, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processingStatuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processing_statuses", processingStatuses));
        }

        if (payrollTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payroll_types", payrollTypes));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyPayrollsValidateBeforeCall(String companyId, String processingStatuses, String payrollTypes, String include, String startDate, String endDate, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompanyPayrolls(Async)");
        }

        return getCompanyPayrollsCall(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<PayrollMinimal>> getCompanyPayrollsWithHttpInfo(String companyId, String processingStatuses, String payrollTypes, String include, String startDate, String endDate, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCompanyPayrollsValidateBeforeCall(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<PayrollMinimal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyPayrollsAsync(String companyId, String processingStatuses, String payrollTypes, String include, String startDate, String endDate, String xGustoAPIVersion, final ApiCallback<List<PayrollMinimal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyPayrollsValidateBeforeCall(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<PayrollMinimal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyPayrollsRequestBuilder {
        private final String companyId;
        private String processingStatuses;
        private String payrollTypes;
        private String include;
        private String startDate;
        private String endDate;
        private String xGustoAPIVersion;

        private GetCompanyPayrollsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set processingStatuses
         * @param processingStatuses Whether to include processed and/or unprocessed payrolls in the response, defaults to processed, for multiple attributes comma separate the values, i.e. &#x60;?processing_statuses&#x3D;processed,unprocessed&#x60; (optional)
         * @return GetCompanyPayrollsRequestBuilder
         */
        public GetCompanyPayrollsRequestBuilder processingStatuses(String processingStatuses) {
            this.processingStatuses = processingStatuses;
            return this;
        }
        
        /**
         * Set payrollTypes
         * @param payrollTypes Whether to include regular and/or off_cycle payrolls in the response, defaults to regular, for multiple attributes comma separate the values, i.e. &#x60;?payroll_types&#x3D;regular,off_cycle&#x60; (optional)
         * @return GetCompanyPayrollsRequestBuilder
         */
        public GetCompanyPayrollsRequestBuilder payrollTypes(String payrollTypes) {
            this.payrollTypes = payrollTypes;
            return this;
        }
        
        /**
         * Set include
         * @param include Include the requested attribute in the response. In v2023-04-01 totals are no longer included by default. For multiple attributes comma separate the values, i.e. &#x60;?include&#x3D;totals,payroll_status_meta&#x60; (optional)
         * @return GetCompanyPayrollsRequestBuilder
         */
        public GetCompanyPayrollsRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Return payrolls whose pay period is after the start date (optional)
         * @return GetCompanyPayrollsRequestBuilder
         */
        public GetCompanyPayrollsRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Return payrolls whose pay period is before the end date (optional)
         * @return GetCompanyPayrollsRequestBuilder
         */
        public GetCompanyPayrollsRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompanyPayrollsRequestBuilder
         */
        public GetCompanyPayrollsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompanyPayrolls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyPayrollsCall(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCompanyPayrolls request
         * @return List&lt;PayrollMinimal&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<PayrollMinimal> execute() throws ApiException {
            ApiResponse<List<PayrollMinimal>> localVarResp = getCompanyPayrollsWithHttpInfo(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyPayrolls request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayrollMinimal&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayrollMinimal>> executeWithHttpInfo() throws ApiException {
            return getCompanyPayrollsWithHttpInfo(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion);
        }

        /**
         * Execute getCompanyPayrolls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayrollMinimal>> _callback) throws ApiException {
            return getCompanyPayrollsAsync(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all payrolls for a company
     * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, &amp; end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can&#39;t be more than 1 year apart.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetCompanyPayrollsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyPayrollsRequestBuilder getCompanyPayrolls(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCompanyPayrollsRequestBuilder(companyId);
    }
    private okhttp3.Call getEmployeePayStubCall(String payrollId, String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payrolls/{payroll_id}/employees/{employee_id}/pay_stub"
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()))
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeePayStubValidateBeforeCall(String payrollId, String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling getEmployeePayStub(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeePayStub(Async)");
        }

        return getEmployeePayStubCall(payrollId, employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> getEmployeePayStubWithHttpInfo(String payrollId, String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getEmployeePayStubValidateBeforeCall(payrollId, employeeId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmployeePayStubAsync(String payrollId, String employeeId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeePayStubValidateBeforeCall(payrollId, employeeId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEmployeePayStubRequestBuilder {
        private final String payrollId;
        private final String employeeId;
        private String xGustoAPIVersion;

        private GetEmployeePayStubRequestBuilder(String payrollId, String employeeId) {
            this.payrollId = payrollId;
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetEmployeePayStubRequestBuilder
         */
        public GetEmployeePayStubRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getEmployeePayStub
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeePayStubCall(payrollId, employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getEmployeePayStub request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEmployeePayStubWithHttpInfo(payrollId, employeeId, xGustoAPIVersion);
        }

        /**
         * Execute getEmployeePayStub request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEmployeePayStubWithHttpInfo(payrollId, employeeId, xGustoAPIVersion);
        }

        /**
         * Execute getEmployeePayStub request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEmployeePayStubAsync(payrollId, employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee pay stub (pdf)
     * Get an employee&#39;s pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.  scope: &#x60;pay_stubs:read&#x60;
     * @param payrollId The UUID of the payroll (required)
     * @param employeeId The UUID of the employee (required)
     * @return GetEmployeePayStubRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeePayStubRequestBuilder getEmployeePayStub(String payrollId, String employeeId) throws IllegalArgumentException {
        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetEmployeePayStubRequestBuilder(payrollId, employeeId);
    }
    private okhttp3.Call getEmployeePayStubsCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/pay_stubs"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeePayStubsValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeePayStubs(Async)");
        }

        return getEmployeePayStubsCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<EmployeePayStub>> getEmployeePayStubsWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getEmployeePayStubsValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<EmployeePayStub>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeePayStubsAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<List<EmployeePayStub>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeePayStubsValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeePayStub>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeePayStubsRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private GetEmployeePayStubsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetEmployeePayStubsRequestBuilder
         */
        public GetEmployeePayStubsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getEmployeePayStubs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeePayStubsCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getEmployeePayStubs request
         * @return List&lt;EmployeePayStub&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeePayStub> execute() throws ApiException {
            ApiResponse<List<EmployeePayStub>> localVarResp = getEmployeePayStubsWithHttpInfo(employeeId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeePayStubs request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeePayStub&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeePayStub>> executeWithHttpInfo() throws ApiException {
            return getEmployeePayStubsWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute getEmployeePayStubs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeePayStub>> _callback) throws ApiException {
            return getEmployeePayStubsAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee&#39;s pay stubs
     * Get an employee&#39;s pay stubs  scope: &#x60;pay_stubs:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetEmployeePayStubsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeePayStubsRequestBuilder getEmployeePayStubs(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetEmployeePayStubsRequestBuilder(employeeId);
    }
    private okhttp3.Call getSinglePayrollCall(String companyId, String payrollId, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSinglePayrollValidateBeforeCall(String companyId, String payrollId, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSinglePayroll(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling getSinglePayroll(Async)");
        }

        return getSinglePayrollCall(companyId, payrollId, include, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Payroll> getSinglePayrollWithHttpInfo(String companyId, String payrollId, String include, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSinglePayrollValidateBeforeCall(companyId, payrollId, include, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Payroll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSinglePayrollAsync(String companyId, String payrollId, String include, String xGustoAPIVersion, final ApiCallback<Payroll> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSinglePayrollValidateBeforeCall(companyId, payrollId, include, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Payroll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSinglePayrollRequestBuilder {
        private final String companyId;
        private final String payrollId;
        private String include;
        private String xGustoAPIVersion;

        private GetSinglePayrollRequestBuilder(String companyId, String payrollId) {
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set include
         * @param include Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. &#x60;?include&#x3D;benefits,deductions,taxes&#x60; (optional)
         * @return GetSinglePayrollRequestBuilder
         */
        public GetSinglePayrollRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSinglePayrollRequestBuilder
         */
        public GetSinglePayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSinglePayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSinglePayrollCall(companyId, payrollId, include, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSinglePayroll request
         * @return Payroll
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Payroll execute() throws ApiException {
            ApiResponse<Payroll> localVarResp = getSinglePayrollWithHttpInfo(companyId, payrollId, include, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSinglePayroll request with HTTP info returned
         * @return ApiResponse&lt;Payroll&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Payroll> executeWithHttpInfo() throws ApiException {
            return getSinglePayrollWithHttpInfo(companyId, payrollId, include, xGustoAPIVersion);
        }

        /**
         * Execute getSinglePayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Payroll> _callback) throws ApiException {
            return getSinglePayrollAsync(companyId, payrollId, include, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a single payroll
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the &#x60;employee_benefits:read:phi&#x60; scope  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return GetSinglePayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSinglePayrollRequestBuilder getSinglePayroll(String companyId, String payrollId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new GetSinglePayrollRequestBuilder(companyId, payrollId);
    }
    private okhttp3.Call getSingleReceiptCall(String payrollUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payrolls/{payroll_uuid}/receipt"
            .replace("{" + "payroll_uuid" + "}", localVarApiClient.escapeString(payrollUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleReceiptValidateBeforeCall(String payrollUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payrollUuid' is set
        if (payrollUuid == null) {
            throw new ApiException("Missing the required parameter 'payrollUuid' when calling getSingleReceipt(Async)");
        }

        return getSingleReceiptCall(payrollUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PayrollReceipt> getSingleReceiptWithHttpInfo(String payrollUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSingleReceiptValidateBeforeCall(payrollUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PayrollReceipt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleReceiptAsync(String payrollUuid, String xGustoAPIVersion, final ApiCallback<PayrollReceipt> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleReceiptValidateBeforeCall(payrollUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PayrollReceipt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleReceiptRequestBuilder {
        private final String payrollUuid;
        private String xGustoAPIVersion;

        private GetSingleReceiptRequestBuilder(String payrollUuid) {
            this.payrollUuid = payrollUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSingleReceiptRequestBuilder
         */
        public GetSingleReceiptRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSingleReceipt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleReceiptCall(payrollUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSingleReceipt request
         * @return PayrollReceipt
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayrollReceipt execute() throws ApiException {
            ApiResponse<PayrollReceipt> localVarResp = getSingleReceiptWithHttpInfo(payrollUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleReceipt request with HTTP info returned
         * @return ApiResponse&lt;PayrollReceipt&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollReceipt> executeWithHttpInfo() throws ApiException {
            return getSingleReceiptWithHttpInfo(payrollUuid, xGustoAPIVersion);
        }

        /**
         * Execute getSingleReceipt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollReceipt> _callback) throws ApiException {
            return getSingleReceiptAsync(payrollUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a single payroll receipt
     * Returns a payroll receipt.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: &#x60;payrolls:read&#x60;
     * @param payrollUuid The UUID of the payroll (required)
     * @return GetSingleReceiptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleReceiptRequestBuilder getSingleReceipt(String payrollUuid) throws IllegalArgumentException {
        if (payrollUuid == null) throw new IllegalArgumentException("\"payrollUuid\" is required but got null");
            

        return new GetSingleReceiptRequestBuilder(payrollUuid);
    }
    private okhttp3.Call prepareForUpdateCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}/prepare"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prepareForUpdateValidateBeforeCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling prepareForUpdate(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling prepareForUpdate(Async)");
        }

        return prepareForUpdateCall(companyId, payrollId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PayrollPrepared> prepareForUpdateWithHttpInfo(String companyId, String payrollId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = prepareForUpdateValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call prepareForUpdateAsync(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback<PayrollPrepared> _callback) throws ApiException {

        okhttp3.Call localVarCall = prepareForUpdateValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PrepareForUpdateRequestBuilder {
        private final String companyId;
        private final String payrollId;
        private String xGustoAPIVersion;

        private PrepareForUpdateRequestBuilder(String companyId, String payrollId) {
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return PrepareForUpdateRequestBuilder
         */
        public PrepareForUpdateRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for prepareForUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return prepareForUpdateCall(companyId, payrollId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute prepareForUpdate request
         * @return PayrollPrepared
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayrollPrepared execute() throws ApiException {
            ApiResponse<PayrollPrepared> localVarResp = prepareForUpdateWithHttpInfo(companyId, payrollId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute prepareForUpdate request with HTTP info returned
         * @return ApiResponse&lt;PayrollPrepared&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollPrepared> executeWithHttpInfo() throws ApiException {
            return prepareForUpdateWithHttpInfo(companyId, payrollId, xGustoAPIVersion);
        }

        /**
         * Execute prepareForUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollPrepared> _callback) throws ApiException {
            return prepareForUpdateAsync(companyId, payrollId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Prepare a payroll for update
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates &amp; times.  Notes:  * Will null out calculated_at &amp; totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: &#x60;payrolls:write&#x60;
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return PrepareForUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public PrepareForUpdateRequestBuilder prepareForUpdate(String companyId, String payrollId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new PrepareForUpdateRequestBuilder(companyId, payrollId);
    }
    private okhttp3.Call skipPayrollCall(String companyUuid, String xGustoAPIVersion, PayrollsSkipPayrollRequest payrollsSkipPayrollRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollsSkipPayrollRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/payrolls/skip"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skipPayrollValidateBeforeCall(String companyUuid, String xGustoAPIVersion, PayrollsSkipPayrollRequest payrollsSkipPayrollRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling skipPayroll(Async)");
        }

        return skipPayrollCall(companyUuid, xGustoAPIVersion, payrollsSkipPayrollRequest, _callback);

    }


    private ApiResponse<Void> skipPayrollWithHttpInfo(String companyUuid, String xGustoAPIVersion, PayrollsSkipPayrollRequest payrollsSkipPayrollRequest) throws ApiException {
        okhttp3.Call localVarCall = skipPayrollValidateBeforeCall(companyUuid, xGustoAPIVersion, payrollsSkipPayrollRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call skipPayrollAsync(String companyUuid, String xGustoAPIVersion, PayrollsSkipPayrollRequest payrollsSkipPayrollRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = skipPayrollValidateBeforeCall(companyUuid, xGustoAPIVersion, payrollsSkipPayrollRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SkipPayrollRequestBuilder {
        private final String payrollType;
        private final String companyUuid;
        private String startDate;
        private String endDate;
        private String payScheduleUuid;
        private List<String> employeeUuids;
        private String xGustoAPIVersion;

        private SkipPayrollRequestBuilder(String payrollType, String companyUuid) {
            this.payrollType = payrollType;
            this.companyUuid = companyUuid;
        }

        /**
         * Set startDate
         * @param startDate Pay period start date (optional)
         * @return SkipPayrollRequestBuilder
         */
        public SkipPayrollRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Pay period end date (optional)
         * @return SkipPayrollRequestBuilder
         */
        public SkipPayrollRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set payScheduleUuid
         * @param payScheduleUuid The UUID of the pay schedule (optional)
         * @return SkipPayrollRequestBuilder
         */
        public SkipPayrollRequestBuilder payScheduleUuid(String payScheduleUuid) {
            this.payScheduleUuid = payScheduleUuid;
            return this;
        }
        
        /**
         * Set employeeUuids
         * @param employeeUuids An array of employees. This field is only applicable to new hire payroll and termination payroll (optional)
         * @return SkipPayrollRequestBuilder
         */
        public SkipPayrollRequestBuilder employeeUuids(List<String> employeeUuids) {
            this.employeeUuids = employeeUuids;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return SkipPayrollRequestBuilder
         */
        public SkipPayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for skipPayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayrollsSkipPayrollRequest payrollsSkipPayrollRequest = buildBodyParams();
            return skipPayrollCall(companyUuid, xGustoAPIVersion, payrollsSkipPayrollRequest, _callback);
        }

        private PayrollsSkipPayrollRequest buildBodyParams() {
            PayrollsSkipPayrollRequest payrollsSkipPayrollRequest = new PayrollsSkipPayrollRequest();
            if (this.payrollType != null)
            payrollsSkipPayrollRequest.payrollType(PayrollsSkipPayrollRequest.PayrollTypeEnum.fromValue(this.payrollType));
            payrollsSkipPayrollRequest.startDate(this.startDate);
            payrollsSkipPayrollRequest.endDate(this.endDate);
            payrollsSkipPayrollRequest.payScheduleUuid(this.payScheduleUuid);
            payrollsSkipPayrollRequest.employeeUuids(this.employeeUuids);
            return payrollsSkipPayrollRequest;
        }

        /**
         * Execute skipPayroll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PayrollsSkipPayrollRequest payrollsSkipPayrollRequest = buildBodyParams();
            skipPayrollWithHttpInfo(companyUuid, xGustoAPIVersion, payrollsSkipPayrollRequest);
        }

        /**
         * Execute skipPayroll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PayrollsSkipPayrollRequest payrollsSkipPayrollRequest = buildBodyParams();
            return skipPayrollWithHttpInfo(companyUuid, xGustoAPIVersion, payrollsSkipPayrollRequest);
        }

        /**
         * Execute skipPayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PayrollsSkipPayrollRequest payrollsSkipPayrollRequest = buildBodyParams();
            return skipPayrollAsync(companyUuid, xGustoAPIVersion, payrollsSkipPayrollRequest, _callback);
        }
    }

    /**
     * Skip a payroll
     * Submits a $0 payroll for employees associated with the pay schedule to skip payroll. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, the payroll is transitioned to the &#x60;processed&#x60; state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: &#x60;payrolls:run&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return SkipPayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public SkipPayrollRequestBuilder skipPayroll(String payrollType, String companyUuid) throws IllegalArgumentException {
        if (payrollType == null) throw new IllegalArgumentException("\"payrollType\" is required but got null");
            

        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new SkipPayrollRequestBuilder(payrollType, companyUuid);
    }
    private okhttp3.Call submitPayrollCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}/submit"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitPayrollValidateBeforeCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling submitPayroll(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling submitPayroll(Async)");
        }

        return submitPayrollCall(companyId, payrollId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> submitPayrollWithHttpInfo(String companyId, String payrollId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = submitPayrollValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitPayrollAsync(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitPayrollValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitPayrollRequestBuilder {
        private final String companyId;
        private final String payrollId;
        private String xGustoAPIVersion;

        private SubmitPayrollRequestBuilder(String companyId, String payrollId) {
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return SubmitPayrollRequestBuilder
         */
        public SubmitPayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for submitPayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return submitPayrollCall(companyId, payrollId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute submitPayroll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            submitPayrollWithHttpInfo(companyId, payrollId, xGustoAPIVersion);
        }

        /**
         * Execute submitPayroll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return submitPayrollWithHttpInfo(companyId, payrollId, xGustoAPIVersion);
        }

        /**
         * Execute submitPayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return submitPayrollAsync(companyId, payrollId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Submit payroll
     * Submits an unprocessed payroll to be calculated and run. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, transitions the payroll to the &#x60;processed&#x60; state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: &#x60;payrolls:run&#x60;
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return SubmitPayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public SubmitPayrollRequestBuilder submitPayroll(String companyId, String payrollId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new SubmitPayrollRequestBuilder(companyId, payrollId);
    }
    private okhttp3.Call updatePayrollByIdCall(String companyId, String payrollId, String xGustoAPIVersion, PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollsUpdatePayrollByIdRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayrollByIdValidateBeforeCall(String companyId, String payrollId, String xGustoAPIVersion, PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updatePayrollById(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling updatePayrollById(Async)");
        }

        return updatePayrollByIdCall(companyId, payrollId, xGustoAPIVersion, payrollsUpdatePayrollByIdRequest, _callback);

    }


    private ApiResponse<PayrollPrepared> updatePayrollByIdWithHttpInfo(String companyId, String payrollId, String xGustoAPIVersion, PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePayrollByIdValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, payrollsUpdatePayrollByIdRequest, null);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePayrollByIdAsync(String companyId, String payrollId, String xGustoAPIVersion, PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest, final ApiCallback<PayrollPrepared> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayrollByIdValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, payrollsUpdatePayrollByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePayrollByIdRequestBuilder {
        private final List<PayrollsUpdatePayrollByIdRequestEmployeeCompensationsInner> employeeCompensations;
        private final String companyId;
        private final String payrollId;
        private String xGustoAPIVersion;

        private UpdatePayrollByIdRequestBuilder(List<PayrollsUpdatePayrollByIdRequestEmployeeCompensationsInner> employeeCompensations, String companyId, String payrollId) {
            this.employeeCompensations = employeeCompensations;
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdatePayrollByIdRequestBuilder
         */
        public UpdatePayrollByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updatePayrollById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest = buildBodyParams();
            return updatePayrollByIdCall(companyId, payrollId, xGustoAPIVersion, payrollsUpdatePayrollByIdRequest, _callback);
        }

        private PayrollsUpdatePayrollByIdRequest buildBodyParams() {
            PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest = new PayrollsUpdatePayrollByIdRequest();
            payrollsUpdatePayrollByIdRequest.employeeCompensations(this.employeeCompensations);
            return payrollsUpdatePayrollByIdRequest;
        }

        /**
         * Execute updatePayrollById request
         * @return PayrollPrepared
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayrollPrepared execute() throws ApiException {
            PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest = buildBodyParams();
            ApiResponse<PayrollPrepared> localVarResp = updatePayrollByIdWithHttpInfo(companyId, payrollId, xGustoAPIVersion, payrollsUpdatePayrollByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePayrollById request with HTTP info returned
         * @return ApiResponse&lt;PayrollPrepared&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollPrepared> executeWithHttpInfo() throws ApiException {
            PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest = buildBodyParams();
            return updatePayrollByIdWithHttpInfo(companyId, payrollId, xGustoAPIVersion, payrollsUpdatePayrollByIdRequest);
        }

        /**
         * Execute updatePayrollById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollPrepared> _callback) throws ApiException {
            PayrollsUpdatePayrollByIdRequest payrollsUpdatePayrollByIdRequest = buildBodyParams();
            return updatePayrollByIdAsync(companyId, payrollId, xGustoAPIVersion, payrollsUpdatePayrollByIdRequest, _callback);
        }
    }

    /**
     * Update a payroll by ID
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: &#x60;payrolls:write&#x60;
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return UpdatePayrollByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePayrollByIdRequestBuilder updatePayrollById(List<PayrollsUpdatePayrollByIdRequestEmployeeCompensationsInner> employeeCompensations, String companyId, String payrollId) throws IllegalArgumentException {
        if (employeeCompensations == null) throw new IllegalArgumentException("\"employeeCompensations\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new UpdatePayrollByIdRequestBuilder(employeeCompensations, companyId, payrollId);
    }
}
