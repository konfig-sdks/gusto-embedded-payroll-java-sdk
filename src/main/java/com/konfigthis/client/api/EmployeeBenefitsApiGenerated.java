/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeBenefit;
import com.konfigthis.client.model.EmployeeBenefitsCreateBenefitRecordRequest;
import com.konfigthis.client.model.EmployeeBenefitsCreateBenefitRecordRequestContribution;
import com.konfigthis.client.model.EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest;
import com.konfigthis.client.model.EmployeeBenefitsUpdateBenefitRecordRequest;
import com.konfigthis.client.model.EmployeeBenefitsUpdateBenefitRecordRequestContribution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeBenefitsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeBenefitsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeBenefitsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBenefitRecordCall(String employeeId, String xGustoAPIVersion, EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeBenefitsCreateBenefitRecordRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/employee_benefits"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBenefitRecordValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createBenefitRecord(Async)");
        }

        return createBenefitRecordCall(employeeId, xGustoAPIVersion, employeeBenefitsCreateBenefitRecordRequest, _callback);

    }


    private ApiResponse<EmployeeBenefit> createBenefitRecordWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = createBenefitRecordValidateBeforeCall(employeeId, xGustoAPIVersion, employeeBenefitsCreateBenefitRecordRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBenefitRecordAsync(String employeeId, String xGustoAPIVersion, EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest, final ApiCallback<EmployeeBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBenefitRecordValidateBeforeCall(employeeId, xGustoAPIVersion, employeeBenefitsCreateBenefitRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBenefitRecordRequestBuilder {
        private final String companyBenefitUuid;
        private final String employeeId;
        private Boolean active;
        private String employeeDeduction;
        private Boolean deductAsPercentage;
        private String employeeDeductionAnnualMaximum;
        private EmployeeBenefitsCreateBenefitRecordRequestContribution contribution;
        private Boolean elective;
        private String companyContributionAnnualMaximum;
        private String limitOption;
        private Boolean catchUp;
        private String coverageAmount;
        private String coverageSalaryMultiplier;
        private String deductionReducesTaxableIncome;
        private String companyContribution;
        private Boolean contributeAsPercentage;
        private String xGustoAPIVersion;

        private CreateBenefitRecordRequestBuilder(String companyBenefitUuid, String employeeId) {
            this.companyBenefitUuid = companyBenefitUuid;
            this.employeeId = employeeId;
        }

        /**
         * Set active
         * @param active Whether the employee benefit is active. (optional, default to true)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set employeeDeduction
         * @param employeeDeduction The amount to be deducted, per pay period, from the employee&#39;s pay. (optional, default to 0.00)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder employeeDeduction(String employeeDeduction) {
            this.employeeDeduction = employeeDeduction;
            return this;
        }
        
        /**
         * Set deductAsPercentage
         * @param deductAsPercentage Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll. (optional, default to false)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder deductAsPercentage(Boolean deductAsPercentage) {
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }
        
        /**
         * Set employeeDeductionAnnualMaximum
         * @param employeeDeductionAnnualMaximum The maximum employee deduction amount per year. A null value signifies no limit. (optional)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder employeeDeductionAnnualMaximum(String employeeDeductionAnnualMaximum) {
            this.employeeDeductionAnnualMaximum = employeeDeductionAnnualMaximum;
            return this;
        }
        
        /**
         * Set contribution
         * @param contribution  (optional)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder contribution(EmployeeBenefitsCreateBenefitRecordRequestContribution contribution) {
            this.contribution = contribution;
            return this;
        }
        
        /**
         * Set elective
         * @param elective Whether the company contribution is elective (aka \\\&quot;matching\\\&quot;). For &#x60;tiered&#x60;, &#x60;elective_amount&#x60;, and &#x60;elective_percentage&#x60; contribution types this is ignored and assumed to be &#x60;true&#x60;. (optional, default to false)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder elective(Boolean elective) {
            this.elective = elective;
            return this;
        }
        
        /**
         * Set companyContributionAnnualMaximum
         * @param companyContributionAnnualMaximum The maximum company contribution amount per year. A null value signifies no limit. (optional)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder companyContributionAnnualMaximum(String companyContributionAnnualMaximum) {
            this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
            return this;
        }
        
        /**
         * Set limitOption
         * @param limitOption Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either \\\&quot;Family\\\&quot; or \\\&quot;Individual\\\&quot;. For a Dependent Care FSA benefit, the limit option should be either \\\&quot;Joint Filing or Single\\\&quot; or \\\&quot;Married and Filing Separately\\\&quot;. (optional)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder limitOption(String limitOption) {
            this.limitOption = limitOption;
            return this;
        }
        
        /**
         * Set catchUp
         * @param catchUp Whether the employee should use a benefit’s \\\&quot;catch up\\\&quot; rate. Only Roth 401k and 401k benefits use this value for employees over 50. (optional, default to false)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder catchUp(Boolean catchUp) {
            this.catchUp = catchUp;
            return this;
        }
        
        /**
         * Set coverageAmount
         * @param coverageAmount The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set. (optional)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder coverageAmount(String coverageAmount) {
            this.coverageAmount = coverageAmount;
            return this;
        }
        
        /**
         * Set coverageSalaryMultiplier
         * @param coverageSalaryMultiplier The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set. (optional, default to 0.00)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder coverageSalaryMultiplier(String coverageSalaryMultiplier) {
            this.coverageSalaryMultiplier = coverageSalaryMultiplier;
            return this;
        }
        
        /**
         * Set deductionReducesTaxableIncome
         * @param deductionReducesTaxableIncome Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not \\\&quot;unset\\\&quot;, coverage amount and coverage salary multiplier are ignored. (optional)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder deductionReducesTaxableIncome(String deductionReducesTaxableIncome) {
            this.deductionReducesTaxableIncome = deductionReducesTaxableIncome;
            return this;
        }
        
        /**
         * Set companyContribution
         * @param companyContribution The amount to be paid, per pay period, by the company. (optional, default to 0.00)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder companyContribution(String companyContribution) {
            this.companyContribution = companyContribution;
            return this;
        }
        
        /**
         * Set contributeAsPercentage
         * @param contributeAsPercentage Whether the company contribution amount should be treated as a percentage to be deducted from each payroll. (optional, default to false)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder contributeAsPercentage(Boolean contributeAsPercentage) {
            this.contributeAsPercentage = contributeAsPercentage;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateBenefitRecordRequestBuilder
         */
        public CreateBenefitRecordRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createBenefitRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest = buildBodyParams();
            return createBenefitRecordCall(employeeId, xGustoAPIVersion, employeeBenefitsCreateBenefitRecordRequest, _callback);
        }

        private EmployeeBenefitsCreateBenefitRecordRequest buildBodyParams() {
            EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest = new EmployeeBenefitsCreateBenefitRecordRequest();
            employeeBenefitsCreateBenefitRecordRequest.companyBenefitUuid(this.companyBenefitUuid);
            employeeBenefitsCreateBenefitRecordRequest.active(this.active);
            employeeBenefitsCreateBenefitRecordRequest.employeeDeduction(this.employeeDeduction);
            employeeBenefitsCreateBenefitRecordRequest.deductAsPercentage(this.deductAsPercentage);
            employeeBenefitsCreateBenefitRecordRequest.employeeDeductionAnnualMaximum(this.employeeDeductionAnnualMaximum);
            employeeBenefitsCreateBenefitRecordRequest.contribution(this.contribution);
            employeeBenefitsCreateBenefitRecordRequest.elective(this.elective);
            employeeBenefitsCreateBenefitRecordRequest.companyContributionAnnualMaximum(this.companyContributionAnnualMaximum);
            employeeBenefitsCreateBenefitRecordRequest.limitOption(this.limitOption);
            employeeBenefitsCreateBenefitRecordRequest.catchUp(this.catchUp);
            employeeBenefitsCreateBenefitRecordRequest.coverageAmount(this.coverageAmount);
            employeeBenefitsCreateBenefitRecordRequest.coverageSalaryMultiplier(this.coverageSalaryMultiplier);
            if (this.deductionReducesTaxableIncome != null)
            employeeBenefitsCreateBenefitRecordRequest.deductionReducesTaxableIncome(EmployeeBenefitsCreateBenefitRecordRequest.DeductionReducesTaxableIncomeEnum.fromValue(this.deductionReducesTaxableIncome));
            employeeBenefitsCreateBenefitRecordRequest.companyContribution(this.companyContribution);
            employeeBenefitsCreateBenefitRecordRequest.contributeAsPercentage(this.contributeAsPercentage);
            return employeeBenefitsCreateBenefitRecordRequest;
        }

        /**
         * Execute createBenefitRecord request
         * @return EmployeeBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeBenefit execute() throws ApiException {
            EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest = buildBodyParams();
            ApiResponse<EmployeeBenefit> localVarResp = createBenefitRecordWithHttpInfo(employeeId, xGustoAPIVersion, employeeBenefitsCreateBenefitRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBenefitRecord request with HTTP info returned
         * @return ApiResponse&lt;EmployeeBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeBenefit> executeWithHttpInfo() throws ApiException {
            EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest = buildBodyParams();
            return createBenefitRecordWithHttpInfo(employeeId, xGustoAPIVersion, employeeBenefitsCreateBenefitRecordRequest);
        }

        /**
         * Execute createBenefitRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeBenefit> _callback) throws ApiException {
            EmployeeBenefitsCreateBenefitRecordRequest employeeBenefitsCreateBenefitRecordRequest = buildBodyParams();
            return createBenefitRecordAsync(employeeId, xGustoAPIVersion, employeeBenefitsCreateBenefitRecordRequest, _callback);
        }
    }

    /**
     * Create an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: &#x60;employee_benefits:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateBenefitRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateBenefitRecordRequestBuilder createBenefitRecord(String companyBenefitUuid, String employeeId) throws IllegalArgumentException {
        if (companyBenefitUuid == null) throw new IllegalArgumentException("\"companyBenefitUuid\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateBenefitRecordRequestBuilder(companyBenefitUuid, employeeId);
    }
    private okhttp3.Call createYtdBenefitAmountsFromDifferentCompanyCall(String employeeId, String xGustoAPIVersion, EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/ytd_benefit_amounts_from_different_company"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createYtdBenefitAmountsFromDifferentCompanyValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createYtdBenefitAmountsFromDifferentCompany(Async)");
        }

        return createYtdBenefitAmountsFromDifferentCompanyCall(employeeId, xGustoAPIVersion, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, _callback);

    }


    private ApiResponse<Void> createYtdBenefitAmountsFromDifferentCompanyWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest) throws ApiException {
        okhttp3.Call localVarCall = createYtdBenefitAmountsFromDifferentCompanyValidateBeforeCall(employeeId, xGustoAPIVersion, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createYtdBenefitAmountsFromDifferentCompanyAsync(String employeeId, String xGustoAPIVersion, EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createYtdBenefitAmountsFromDifferentCompanyValidateBeforeCall(employeeId, xGustoAPIVersion, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder {
        private final Double taxYear;
        private final String ytdEmployeeDeductionAmount;
        private final String ytdCompanyContributionAmount;
        private final String employeeId;
        private Double benefitType;
        private String xGustoAPIVersion;

        private CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder(double taxYear, String ytdEmployeeDeductionAmount, String ytdCompanyContributionAmount, String employeeId) {
            this.taxYear = taxYear;
            this.ytdEmployeeDeductionAmount = ytdEmployeeDeductionAmount;
            this.ytdCompanyContributionAmount = ytdCompanyContributionAmount;
            this.employeeId = employeeId;
        }

        /**
         * Set benefitType
         * @param benefitType The benefit type supported by Gusto. (optional)
         * @return CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder
         */
        public CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder benefitType(Double benefitType) {
            this.benefitType = benefitType;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder
         */
        public CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createYtdBenefitAmountsFromDifferentCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest = buildBodyParams();
            return createYtdBenefitAmountsFromDifferentCompanyCall(employeeId, xGustoAPIVersion, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, _callback);
        }

        private EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest buildBodyParams() {
            EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest = new EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest();
            employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.benefitType(this.benefitType);
            employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.taxYear(this.taxYear);
            employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.ytdEmployeeDeductionAmount(this.ytdEmployeeDeductionAmount);
            employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest.ytdCompanyContributionAmount(this.ytdCompanyContributionAmount);
            return employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest;
        }

        /**
         * Execute createYtdBenefitAmountsFromDifferentCompany request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest = buildBodyParams();
            createYtdBenefitAmountsFromDifferentCompanyWithHttpInfo(employeeId, xGustoAPIVersion, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest);
        }

        /**
         * Execute createYtdBenefitAmountsFromDifferentCompany request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest = buildBodyParams();
            return createYtdBenefitAmountsFromDifferentCompanyWithHttpInfo(employeeId, xGustoAPIVersion, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest);
        }

        /**
         * Execute createYtdBenefitAmountsFromDifferentCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest = buildBodyParams();
            return createYtdBenefitAmountsFromDifferentCompanyAsync(employeeId, xGustoAPIVersion, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, _callback);
        }
    }

    /**
     * Create year-to-date benefit amounts from a different company
     * Year-to-date benefit amounts from a different company represents the amount of money added to an employee&#39;s plan during a current year, made outside of the current contribution when they were employed at a different company.  This endpoint only supports passing outside contributions for 401(k) benefits.  scope: &#x60;employee_benefits:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder createYtdBenefitAmountsFromDifferentCompany(double taxYear, String ytdEmployeeDeductionAmount, String ytdCompanyContributionAmount, String employeeId) throws IllegalArgumentException {
        
        if (ytdEmployeeDeductionAmount == null) throw new IllegalArgumentException("\"ytdEmployeeDeductionAmount\" is required but got null");
            

        if (ytdCompanyContributionAmount == null) throw new IllegalArgumentException("\"ytdCompanyContributionAmount\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateYtdBenefitAmountsFromDifferentCompanyRequestBuilder(taxYear, ytdEmployeeDeductionAmount, ytdCompanyContributionAmount, employeeId);
    }
    private okhttp3.Call deleteByIdCall(String employeeBenefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employee_benefits/{employee_benefit_id}"
            .replace("{" + "employee_benefit_id" + "}", localVarApiClient.escapeString(employeeBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String employeeBenefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeBenefitId' is set
        if (employeeBenefitId == null) {
            throw new ApiException("Missing the required parameter 'employeeBenefitId' when calling deleteById(Async)");
        }

        return deleteByIdCall(employeeBenefitId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(String employeeBenefitId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(employeeBenefitId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(String employeeBenefitId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(employeeBenefitId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String employeeBenefitId;
        private String xGustoAPIVersion;

        private DeleteByIdRequestBuilder(String employeeBenefitId) {
            this.employeeBenefitId = employeeBenefitId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteByIdRequestBuilder
         */
        public DeleteByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(employeeBenefitId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(employeeBenefitId, xGustoAPIVersion);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(employeeBenefitId, xGustoAPIVersion);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(employeeBenefitId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: &#x60;employee_benefits:write&#x60;
     * @param employeeBenefitId The UUID of the employee benefit. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String employeeBenefitId) throws IllegalArgumentException {
        if (employeeBenefitId == null) throw new IllegalArgumentException("\"employeeBenefitId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(employeeBenefitId);
    }
    private okhttp3.Call getAllForEmployeeCall(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/employee_benefits"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllForEmployeeValidateBeforeCall(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAllForEmployee(Async)");
        }

        return getAllForEmployeeCall(employeeId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<EmployeeBenefit>> getAllForEmployeeWithHttpInfo(String employeeId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllForEmployeeValidateBeforeCall(employeeId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<EmployeeBenefit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllForEmployeeAsync(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<List<EmployeeBenefit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllForEmployeeValidateBeforeCall(employeeId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeBenefit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllForEmployeeRequestBuilder {
        private final String employeeId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetAllForEmployeeRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetAllForEmployeeRequestBuilder
         */
        public GetAllForEmployeeRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetAllForEmployeeRequestBuilder
         */
        public GetAllForEmployeeRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllForEmployeeRequestBuilder
         */
        public GetAllForEmployeeRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAllForEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllForEmployeeCall(employeeId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAllForEmployee request
         * @return List&lt;EmployeeBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeBenefit> execute() throws ApiException {
            ApiResponse<List<EmployeeBenefit>> localVarResp = getAllForEmployeeWithHttpInfo(employeeId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllForEmployee request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeBenefit&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeBenefit>> executeWithHttpInfo() throws ApiException {
            return getAllForEmployeeWithHttpInfo(employeeId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getAllForEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeBenefit>> _callback) throws ApiException {
            return getAllForEmployeeAsync(employeeId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all benefits for an employee
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Returns an array of all employee benefits for this employee  Benefits containing PHI are only visible to applications with the &#x60;employee_benefits:read:phi&#x60; scope.  scope: &#x60;employee_benefits:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetAllForEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllForEmployeeRequestBuilder getAllForEmployee(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAllForEmployeeRequestBuilder(employeeId);
    }
    private okhttp3.Call getEmployeeBenefitByIdCall(String employeeBenefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employee_benefits/{employee_benefit_id}"
            .replace("{" + "employee_benefit_id" + "}", localVarApiClient.escapeString(employeeBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeBenefitByIdValidateBeforeCall(String employeeBenefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeBenefitId' is set
        if (employeeBenefitId == null) {
            throw new ApiException("Missing the required parameter 'employeeBenefitId' when calling getEmployeeBenefitById(Async)");
        }

        return getEmployeeBenefitByIdCall(employeeBenefitId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<EmployeeBenefit> getEmployeeBenefitByIdWithHttpInfo(String employeeBenefitId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeBenefitByIdValidateBeforeCall(employeeBenefitId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<EmployeeBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeBenefitByIdAsync(String employeeBenefitId, String xGustoAPIVersion, final ApiCallback<EmployeeBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeBenefitByIdValidateBeforeCall(employeeBenefitId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<EmployeeBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeBenefitByIdRequestBuilder {
        private final String employeeBenefitId;
        private String xGustoAPIVersion;

        private GetEmployeeBenefitByIdRequestBuilder(String employeeBenefitId) {
            this.employeeBenefitId = employeeBenefitId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetEmployeeBenefitByIdRequestBuilder
         */
        public GetEmployeeBenefitByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getEmployeeBenefitById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeBenefitByIdCall(employeeBenefitId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getEmployeeBenefitById request
         * @return EmployeeBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeBenefit execute() throws ApiException {
            ApiResponse<EmployeeBenefit> localVarResp = getEmployeeBenefitByIdWithHttpInfo(employeeBenefitId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeBenefitById request with HTTP info returned
         * @return ApiResponse&lt;EmployeeBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeBenefit> executeWithHttpInfo() throws ApiException {
            return getEmployeeBenefitByIdWithHttpInfo(employeeBenefitId, xGustoAPIVersion);
        }

        /**
         * Execute getEmployeeBenefitById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeBenefit> _callback) throws ApiException {
            return getEmployeeBenefitByIdAsync(employeeBenefitId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Benefits containing PHI are only visible to applications with the &#x60;employee_benefits:read:phi&#x60; scope.  scope: &#x60;employee_benefits:read&#x60;
     * @param employeeBenefitId The UUID of the employee benefit. (required)
     * @return GetEmployeeBenefitByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeBenefitByIdRequestBuilder getEmployeeBenefitById(String employeeBenefitId) throws IllegalArgumentException {
        if (employeeBenefitId == null) throw new IllegalArgumentException("\"employeeBenefitId\" is required but got null");
            

        return new GetEmployeeBenefitByIdRequestBuilder(employeeBenefitId);
    }
    private okhttp3.Call updateBenefitRecordCall(String employeeBenefitId, String xGustoAPIVersion, EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeBenefitsUpdateBenefitRecordRequest;

        // create path and map variables
        String localVarPath = "/v1/employee_benefits/{employee_benefit_id}"
            .replace("{" + "employee_benefit_id" + "}", localVarApiClient.escapeString(employeeBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBenefitRecordValidateBeforeCall(String employeeBenefitId, String xGustoAPIVersion, EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeBenefitId' is set
        if (employeeBenefitId == null) {
            throw new ApiException("Missing the required parameter 'employeeBenefitId' when calling updateBenefitRecord(Async)");
        }

        return updateBenefitRecordCall(employeeBenefitId, xGustoAPIVersion, employeeBenefitsUpdateBenefitRecordRequest, _callback);

    }


    private ApiResponse<EmployeeBenefit> updateBenefitRecordWithHttpInfo(String employeeBenefitId, String xGustoAPIVersion, EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBenefitRecordValidateBeforeCall(employeeBenefitId, xGustoAPIVersion, employeeBenefitsUpdateBenefitRecordRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBenefitRecordAsync(String employeeBenefitId, String xGustoAPIVersion, EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest, final ApiCallback<EmployeeBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBenefitRecordValidateBeforeCall(employeeBenefitId, xGustoAPIVersion, employeeBenefitsUpdateBenefitRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBenefitRecordRequestBuilder {
        private final String version;
        private final String employeeBenefitId;
        private Boolean active;
        private String employeeDeduction;
        private Boolean deductAsPercentage;
        private String employeeDeductionAnnualMaximum;
        private EmployeeBenefitsUpdateBenefitRecordRequestContribution contribution;
        private Boolean elective;
        private String companyContributionAnnualMaximum;
        private String limitOption;
        private Boolean catchUp;
        private String coverageAmount;
        private String deductionReducesTaxableIncome;
        private String coverageSalaryMultiplier;
        private String companyContribution;
        private Boolean contributeAsPercentage;
        private String xGustoAPIVersion;

        private UpdateBenefitRecordRequestBuilder(String version, String employeeBenefitId) {
            this.version = version;
            this.employeeBenefitId = employeeBenefitId;
        }

        /**
         * Set active
         * @param active Whether the employee benefit is active. (optional)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set employeeDeduction
         * @param employeeDeduction The amount to be deducted, per pay period, from the employee&#39;s pay. (optional, default to 0.00)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder employeeDeduction(String employeeDeduction) {
            this.employeeDeduction = employeeDeduction;
            return this;
        }
        
        /**
         * Set deductAsPercentage
         * @param deductAsPercentage Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll. (optional)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder deductAsPercentage(Boolean deductAsPercentage) {
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }
        
        /**
         * Set employeeDeductionAnnualMaximum
         * @param employeeDeductionAnnualMaximum The maximum employee deduction amount per year. A null value signifies no limit. (optional)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder employeeDeductionAnnualMaximum(String employeeDeductionAnnualMaximum) {
            this.employeeDeductionAnnualMaximum = employeeDeductionAnnualMaximum;
            return this;
        }
        
        /**
         * Set contribution
         * @param contribution  (optional)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder contribution(EmployeeBenefitsUpdateBenefitRecordRequestContribution contribution) {
            this.contribution = contribution;
            return this;
        }
        
        /**
         * Set elective
         * @param elective Whether the company contribution is elective (aka \\\&quot;matching\\\&quot;). For &#x60;tiered&#x60;, &#x60;elective_amount&#x60;, and &#x60;elective_percentage&#x60; contribution types this is ignored and assumed to be &#x60;true&#x60;. (optional, default to false)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder elective(Boolean elective) {
            this.elective = elective;
            return this;
        }
        
        /**
         * Set companyContributionAnnualMaximum
         * @param companyContributionAnnualMaximum The maximum company contribution amount per year. A null value signifies no limit. (optional)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder companyContributionAnnualMaximum(String companyContributionAnnualMaximum) {
            this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
            return this;
        }
        
        /**
         * Set limitOption
         * @param limitOption Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either \\\&quot;Family\\\&quot; or \\\&quot;Individual\\\&quot;. For a Dependent Care FSA benefit, the limit option should be either \\\&quot;Joint Filing or Single\\\&quot; or \\\&quot;Married and Filing Separately\\\&quot;. (optional)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder limitOption(String limitOption) {
            this.limitOption = limitOption;
            return this;
        }
        
        /**
         * Set catchUp
         * @param catchUp Whether the employee should use a benefit’s \\\&quot;catch up\\\&quot; rate. Only Roth 401k and 401k benefits use this value for employees over 50. (optional, default to false)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder catchUp(Boolean catchUp) {
            this.catchUp = catchUp;
            return this;
        }
        
        /**
         * Set coverageAmount
         * @param coverageAmount The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set. (optional)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder coverageAmount(String coverageAmount) {
            this.coverageAmount = coverageAmount;
            return this;
        }
        
        /**
         * Set deductionReducesTaxableIncome
         * @param deductionReducesTaxableIncome Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not \\\&quot;unset\\\&quot;, coverage amount and coverage salary multiplier are ignored. (optional, default to unset)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder deductionReducesTaxableIncome(String deductionReducesTaxableIncome) {
            this.deductionReducesTaxableIncome = deductionReducesTaxableIncome;
            return this;
        }
        
        /**
         * Set coverageSalaryMultiplier
         * @param coverageSalaryMultiplier The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set. (optional, default to 0.00)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder coverageSalaryMultiplier(String coverageSalaryMultiplier) {
            this.coverageSalaryMultiplier = coverageSalaryMultiplier;
            return this;
        }
        
        /**
         * Set companyContribution
         * @param companyContribution The amount to be paid, per pay period, by the company. (optional, default to 0.00)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder companyContribution(String companyContribution) {
            this.companyContribution = companyContribution;
            return this;
        }
        
        /**
         * Set contributeAsPercentage
         * @param contributeAsPercentage Whether the company contribution amount should be treated as a percentage to be deducted from each payroll. (optional, default to false)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder contributeAsPercentage(Boolean contributeAsPercentage) {
            this.contributeAsPercentage = contributeAsPercentage;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateBenefitRecordRequestBuilder
         */
        public UpdateBenefitRecordRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateBenefitRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest = buildBodyParams();
            return updateBenefitRecordCall(employeeBenefitId, xGustoAPIVersion, employeeBenefitsUpdateBenefitRecordRequest, _callback);
        }

        private EmployeeBenefitsUpdateBenefitRecordRequest buildBodyParams() {
            EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest = new EmployeeBenefitsUpdateBenefitRecordRequest();
            employeeBenefitsUpdateBenefitRecordRequest.version(this.version);
            employeeBenefitsUpdateBenefitRecordRequest.active(this.active);
            employeeBenefitsUpdateBenefitRecordRequest.employeeDeduction(this.employeeDeduction);
            employeeBenefitsUpdateBenefitRecordRequest.deductAsPercentage(this.deductAsPercentage);
            employeeBenefitsUpdateBenefitRecordRequest.employeeDeductionAnnualMaximum(this.employeeDeductionAnnualMaximum);
            employeeBenefitsUpdateBenefitRecordRequest.contribution(this.contribution);
            employeeBenefitsUpdateBenefitRecordRequest.elective(this.elective);
            employeeBenefitsUpdateBenefitRecordRequest.companyContributionAnnualMaximum(this.companyContributionAnnualMaximum);
            employeeBenefitsUpdateBenefitRecordRequest.limitOption(this.limitOption);
            employeeBenefitsUpdateBenefitRecordRequest.catchUp(this.catchUp);
            employeeBenefitsUpdateBenefitRecordRequest.coverageAmount(this.coverageAmount);
            if (this.deductionReducesTaxableIncome != null)
            employeeBenefitsUpdateBenefitRecordRequest.deductionReducesTaxableIncome(EmployeeBenefitsUpdateBenefitRecordRequest.DeductionReducesTaxableIncomeEnum.fromValue(this.deductionReducesTaxableIncome));
            employeeBenefitsUpdateBenefitRecordRequest.coverageSalaryMultiplier(this.coverageSalaryMultiplier);
            employeeBenefitsUpdateBenefitRecordRequest.companyContribution(this.companyContribution);
            employeeBenefitsUpdateBenefitRecordRequest.contributeAsPercentage(this.contributeAsPercentage);
            return employeeBenefitsUpdateBenefitRecordRequest;
        }

        /**
         * Execute updateBenefitRecord request
         * @return EmployeeBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeBenefit execute() throws ApiException {
            EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest = buildBodyParams();
            ApiResponse<EmployeeBenefit> localVarResp = updateBenefitRecordWithHttpInfo(employeeBenefitId, xGustoAPIVersion, employeeBenefitsUpdateBenefitRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBenefitRecord request with HTTP info returned
         * @return ApiResponse&lt;EmployeeBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeBenefit> executeWithHttpInfo() throws ApiException {
            EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest = buildBodyParams();
            return updateBenefitRecordWithHttpInfo(employeeBenefitId, xGustoAPIVersion, employeeBenefitsUpdateBenefitRecordRequest);
        }

        /**
         * Execute updateBenefitRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeBenefit> _callback) throws ApiException {
            EmployeeBenefitsUpdateBenefitRecordRequest employeeBenefitsUpdateBenefitRecordRequest = buildBodyParams();
            return updateBenefitRecordAsync(employeeBenefitId, xGustoAPIVersion, employeeBenefitsUpdateBenefitRecordRequest, _callback);
        }
    }

    /**
     * Update an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: &#x60;employee_benefits:write&#x60;
     * @param employeeBenefitId The UUID of the employee benefit. (required)
     * @return UpdateBenefitRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBenefitRecordRequestBuilder updateBenefitRecord(String version, String employeeBenefitId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (employeeBenefitId == null) throw new IllegalArgumentException("\"employeeBenefitId\" is required but got null");
            

        return new UpdateBenefitRecordRequestBuilder(version, employeeBenefitId);
    }
}
